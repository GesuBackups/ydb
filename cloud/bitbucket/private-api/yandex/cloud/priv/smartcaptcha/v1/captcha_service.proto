syntax = "proto3";

option go_package = "a.yandex-team.ru/cloud/bitbucket/private-api/yandex/cloud/priv/smartcaptcha/v1;captcha";

import "yandex/cloud/priv/smartcaptcha/v1/captcha.proto";

import "google/protobuf/field_mask.proto";
import "yandex/cloud/api/operation.proto";
import "yandex/cloud/priv/operation/operation.proto";
import "yandex/cloud/priv/validation.proto";

package yandex.cloud.priv.smartcaptcha.v1;


service CaptchaSettingsService {
  rpc Get (GetSettingsRequest) returns (CaptchaSettings) {}

  rpc GetByClientKey (GetSettingsByClientKeyRequest) returns (CaptchaSettings) {}

  rpc GetByServerKey (GetSettingsByServerKeyRequest) returns (CaptchaSettings) {}

  rpc Create (CreateCaptchaRequest) returns (operation.Operation) {
    option (yandex.cloud.api.operation) = {
      metadata: "CreateCaptchaMetadata"
      response: "CaptchaSettings"
    };
  }

  rpc Delete (DeleteCaptchaRequest) returns (operation.Operation) {
    option (yandex.cloud.api.operation) = {
      metadata: "DeleteCaptchaMetadata"
      response: "CaptchaSettings"
    };
  }

  rpc Update (UpdateCaptchaRequest) returns (operation.Operation) {
    option (yandex.cloud.api.operation) = {
      metadata: "UpdateCaptchaMetadata"
      response: "CaptchaSettings"
    };
  }

  rpc UpdateAll (UpdateAllCaptchaRequest) returns (operation.Operation) {
    option (yandex.cloud.api.operation) = {
      metadata: "UpdateCaptchaMetadata"
      response: "CaptchaSettings"
    };
  }

  rpc List (ListCaptchasRequest) returns (ListCaptchasResponse);
}

message GetSettingsRequest {
  string captcha_id = 1 [(required) = true, (length) = "<=50"];
}

message GetSettingsByClientKeyRequest {
  string client_key = 1 [(required) = true, (length) = "<=50"];
}

message GetSettingsByServerKeyRequest {
  string server_key = 1 [(required) = true, (length) = "<=50"];
}

message CreateCaptchaRequest {
  string folder_id = 1 [(required) = true, (length) = "<=50"];
  string name = 2 [(pattern) = "|[a-z]([-a-z0-9]{0,61}[a-z0-9])?"];
  repeated string allowed_sites = 3;
  CaptchaComplexity complexity = 4;
  string style_json = 5;
}

message CreateCaptchaMetadata {
  string captcha_id = 1;
}

message DeleteCaptchaRequest {
  string captcha_id = 1 [(required) = true, (length) = "<=50"];
}

message DeleteCaptchaMetadata {
  string captcha_id = 1;
}

message UpdateCaptchaRequest {
  string captcha_id = 1 [(required) = true, (length) = "<=50"];
  google.protobuf.FieldMask update_mask = 2;
  string name = 3 [(pattern) = "|[a-z]([-a-z0-9]{0,61}[a-z0-9])?"];
  repeated string allowed_sites = 4;
  CaptchaComplexity complexity = 5;
  string style_json = 6;
}

message UpdateCaptchaMetadata {
  string captcha_id = 1;
}

message UpdateAllCaptchaRequest {
  string captcha_id = 1 [(required) = true, (length) = "<=50"];
  google.protobuf.FieldMask update_mask = 2;
  CaptchaSettings settings = 3;
}

message ListCaptchasRequest {
  string folder_id = 1 [(required) = true, (length) = "<=50"];
  int64 page_size = 2 [(value) = "<=1000"];
  string page_token = 3 [(length) = "<=100"];
  string filter = 4;
  string order_by = 5;
}

message ListCaptchasResponse {
  repeated CaptchaSettings captchas = 1;
  string next_page_token = 2;
}
