syntax = "proto3";

package yandex.cloud.priv.monitoring.v3;

import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";
import "yandex/cloud/api/operation.proto";
import "yandex/cloud/priv/operation/operation.proto";
import "yandex/cloud/priv/monitoring/v3/service_dashboard.proto";
import "yandex/cloud/priv/monitoring/v3/parametrization.proto";
import "yandex/cloud/priv/monitoring/v3/widget.proto";

option go_package = "a.yandex-team.ru/cloud/bitbucket/private-api/yandex/cloud/priv/monitoring/v3;monitoring";

// A set of methods for managing service dashboards.
service ServiceDashboardService {
    // Returns the specified service dashboard.
    rpc Get(GetServiceDashboardRequest) returns (ServiceDashboard) {
        option (google.api.http) = { get: "/monitoring/v3/serviceProviders/{service_provider_id}/serviceDashboards/{service_dashboard_id}" };
    }

    // Retrieves the list of dashboards in the specified service provider.
    rpc List(ListServiceDashboardRequest) returns (ListServiceDashboardResponse) {
        option (google.api.http) = { get: "/monitoring/v3/serviceProviders/{service_provider_id}/serviceDashboards" };
    }

    // Creates a new dashboard in the specified service provider.
    rpc Create(CreateServiceDashboardRequest) returns (operation.Operation) {
        option (google.api.http) = { post: "/monitoring/v3/serviceProviders/{service_provider_id}/serviceDashboards" body: "*" };
        option (yandex.cloud.api.operation) = {
            metadata: "CreateServiceDashboardMetadata"
            response: "ServiceDashboard"
        };
    }

    // Updates the specified service dashboard.
    rpc Update(UpdateServiceDashboardRequest) returns (operation.Operation) {
        option (google.api.http) = { patch: "/monitoring/v3/serviceProviders/{service_provider_id}/serviceDashboards/{service_dashboard_id}" body: "*" };
        option (yandex.cloud.api.operation) = {
            metadata: "UpdateServiceDashboardMetadata"
            response: "ServiceDashboard"
        };
    }

    // Synchronize the specified service dashboard with existing dashboard.
    // It's necessary to simplify editing in Admin UI.
    rpc Sync(SyncServiceDashboardRequest) returns (operation.Operation) {
        option (google.api.http) = { post: "/monitoring/v3/serviceProviders/{service_provider_id}/serviceDashboards/{service_dashboard_id}:sync" body: "*" };
        option (yandex.cloud.api.operation) = {
            metadata: "SyncServiceDashboardMetadata"
            response: "ServiceDashboard"
        };
    }

    // Deletes the specified service dashboard.
    rpc Delete(DeleteServiceDashboardRequest) returns (operation.Operation) {
        option (google.api.http) = { delete: "/monitoring/v3/serviceProviders/{service_provider_id}/serviceDashboards/{service_dashboard_id}" };
        option (yandex.cloud.api.operation) = {
            metadata: "DeleteServiceDashboardMetadata"
            response: "google.protobuf.Empty"
        };
    }

    // Lists operations for the specified dashboard.
    rpc ListOperations (ListServiceDashboardOperationsRequest) returns (ListServiceDashboardOperationsResponse) {
        option (google.api.http) = { get: "/monitoring/v3/serviceProviders/{service_provider_id}/serviceDashboards/{service_dashboard_id}/operations" };
    }
}

message GetServiceDashboardRequest {
    // Required. Service provider ID.
    string service_provider_id = 1;

    // Required. Service dashboard ID.
    string service_dashboard_id = 2;
}

message ListServiceDashboardRequest {
    // Required. Service provider ID.
    string service_provider_id = 1;

    // The maximum number of dashboards to return.
    // If unspecified, at most 100 dashboards will be returned.
    // The maximum value is 1000; values above 1000 will be coerced to 1000.
    int64 page_size = 2;

    // Page token. To get the next page of results, set `page_token` to the
    // [ListServiceDashboardResponse.next_page_token] returned by a previous list request.
    string page_token = 3;

    // The filter expression. Currently you can use filtering only on [ServiceDashboard.name] field.
    string filter = 4;
}

message ListServiceDashboardResponse {
    // List of dashboards.
    repeated ServiceDashboard service_dashboards = 1;

    // Token to retrieve the next page of results, or empty if there are no more results in the list.
    string next_page_token = 2;
}

message CreateServiceDashboardRequest {
    // Required. Service provider ID.
    string service_provider_id = 1;

    // Required. Service dashboard name.
    string name = 2;

    // Service dashboard description.
    string description = 3;

    // Resource labels as `key:value` pairs.
    map<string, string> labels = 4;

    // Dashboard title.
    string title = 5;

    // Required. List of dashboard widgets.
    repeated Widget widgets = 6;

    // Dashboard parametrization.
    Parametrization parametrization = 7;
}

message CreateServiceDashboardMetadata {
    // ID of the service dashboard.
    string service_dashboard_id = 1;
}

message UpdateServiceDashboardRequest {
    // Required. Service provider ID.
    string service_provider_id = 1;

    // Required. Service dashboard ID.
    string service_dashboard_id = 2;

    // Field mask that specifies which fields of the Service Dashboard resource are going to be updated.
    google.protobuf.FieldMask update_mask = 3;

    // Required. Service dashboard name.
    string name = 4;

    // Service dashboard description.
    string description = 5;

    // Resource labels as `key:value` pairs.
    map<string, string> labels = 6;

    // Dashboard title.
    string title = 7;

    // Required. List of dashboard widgets.
    repeated Widget widgets = 8;

    // Dashboard parametrization.
    Parametrization parametrization = 9;
}

message UpdateServiceDashboardMetadata {
    // ID of the service dashboard.
    string service_dashboard_id = 1;
}

message SyncServiceDashboardRequest {
    // Required. Service provider ID.
    string service_provider_id = 1;

    // Required. Target service dashboard ID.
    string service_dashboard_id = 2;

    // Required. Source dashboard ID.
    string dashboard_id = 3;
}

message SyncServiceDashboardMetadata {
    // ID of the service dashboard.
    string service_dashboard_id = 1;
}

message DeleteServiceDashboardRequest {
    // Required. Service provider ID.
    string service_provider_id = 1;

    // Required. Service dashboard ID.
    string service_dashboard_id = 2;
}

message DeleteServiceDashboardMetadata {
    // ID of the service dashboard.
    string service_dashboard_id = 1;
}

message ListServiceDashboardOperationsRequest {
    // ID of the service provider.
    string service_provider_id = 1;

    // ID of the service dashboard to list operations for.
    string service_dashboard_id = 2;

    // The maximum number of results per page to return. If the number of available
    // results is larger than [page_size], the service returns a [ListServiceDashboardOperationsResponse.next_page_token]
    // that can be used to get the next page of results in subsequent list requests.
    int64 page_size = 3;

    // Page token. To get the next page of results, set [page_token] to the
    // [ListServiceDashboardOperationsResponse.next_page_token] returned by a previous list request.
    string page_token = 4;
}

message ListServiceDashboardOperationsResponse {
    // List of operations for the specified service dashboard.
    repeated operation.Operation operations = 1;

    // This token allows you to get the next page of results for list requests. If the number of results
    // is larger than [ListServiceDashboardOperationsRequest.page_size], use the [next_page_token] as the value
    // for the [ListServiceDashboardOperationsRequest.page_token] query parameter in the next list request.
    // Each subsequent list request will have its own [next_page_token] to continue paging through the results.
    string next_page_token = 2;
}
