syntax = "proto3";

package yandex.cloud.priv.monitoring.v3;

import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";
import "yandex/cloud/api/operation.proto";
import "yandex/cloud/priv/operation/operation.proto";
import "yandex/cloud/priv/monitoring/v3/service_provider.proto";

option go_package = "a.yandex-team.ru/cloud/bitbucket/private-api/yandex/cloud/priv/monitoring/v3;monitoring";

// A set of methods for managing service providers.
service ServiceProviderService {
    // Returns the specified quick links.
    rpc Get(GetServiceProviderRequest) returns (ServiceProvider) {
        option (google.api.http) = { get: "/monitoring/v3/serviceProviders/{service_provider_id}" };
    }

    // Retrieves the list of service providers.
    rpc List(ListServiceProvidersRequest) returns (ListServiceProvidersResponse) {
        option (google.api.http) = { get: "/monitoring/v3/serviceProviders" };
    }

    // Creates a new service provider.
    rpc Create(CreateServiceProviderRequest) returns (operation.Operation) {
        option (google.api.http) = { post: "/monitoring/v3/serviceProviders" body: "*" };
        option (yandex.cloud.api.operation) = {
            metadata: "CreateServiceProviderMetadata"
            response: "ServiceProvider"
        };
    }

    // Upserts the specified quick service provider.
    rpc Update(UpdateServiceProviderRequest) returns (operation.Operation) {
        option (google.api.http) = { patch: "/monitoring/v3/serviceProviders/{service_provider_id}" body: "*" };
        option (yandex.cloud.api.operation) = {
            metadata: "UpdateServiceProviderMetadata"
            response: "ServiceProvider"
        };
    }

    // Deletes the specified service provider.
    rpc Delete(DeleteServiceProviderRequest) returns (operation.Operation) {
        option (google.api.http) = { delete: "/monitoring/v3/serviceProviders/{service_provider_id}" };
        option (yandex.cloud.api.operation) = {
            metadata: "DeleteServiceProviderMetadata"
            response: "google.protobuf.Empty"
        };
    }
}

message GetServiceProviderRequest {
    // Required. Service provider ID.
    string service_provider_id = 1;
}

message ListServiceProvidersRequest {
    // The maximum number of service providers to return.
    // If unspecified, at most 100 service providers will be returned.
    // The maximum value is 1000; values above 1000 will be coerced to 1000.
    int64 page_size = 1;

    // Page token. To get the next page of results, set `page_token` to the
    // [ListServiceProviderResponse.next_page_token] returned by a previous list request.
    string page_token = 2;

    // The filter expression. Currently you can use filtering only on [ServiceProvider.id] field.
    string filter = 3;
}

message ListServiceProvidersResponse {
    // List of service providers.
    repeated ServiceProvider service_providers = 1;

    // Token to retrieve the next page of results, or empty if there are no more results in the list.
    string next_page_token = 2;
}

message CreateServiceProviderRequest {
    // Required. Cloud ID.
    string cloud_id = 1;

    // Required. Service provider ID.
    string service_provider_id = 2;

    // Description.
    string description = 3;

    // Resource labels as `key:value` pairs.
    map<string, string> labels = 4;

    // Shard settings.
    ServiceProvider.ShardSettings shard_settings = 5;

    // Deprecated, use iam_service_account_ids instead. IAM service account IDs.
    string iam_service_account_id = 6;

    // List of name references.
    repeated ServiceProvider.Reference references = 7;

    // IAM service account IDs.
    repeated string iam_service_account_ids = 8;
}

message CreateServiceProviderMetadata {
    // ID of the service provider.
    string service_provider_id = 1;
}

message UpdateServiceProviderRequest {
    // Required. Service provider ID.
    string service_provider_id = 1;

    // Field mask that specifies which fields of the Service Provider resource are going to be updated.
    google.protobuf.FieldMask update_mask = 2;

    // Description.
    string description = 3;

    // Resource labels as `key:value` pairs.
    map<string, string> labels = 4;

    // Shard settings.
    ServiceProvider.ShardSettings shard_settings = 5;

    // IAM service account IDs.
    string iam_service_account_id = 6;

    // List of name references.
    repeated ServiceProvider.Reference references = 7;

    // Deprecated, use iam_service_account_ids instead. IAM service account IDs.
    repeated string iam_service_account_ids = 8;
}

message UpdateServiceProviderMetadata {
    // ID of the service provider.
    string service_provider_id = 1;
}

message DeleteServiceProviderRequest {
    // Required. Service provider ID.
    string service_provider_id = 1;
}

message DeleteServiceProviderMetadata {
    // ID of the service provider.
    string service_provider_id = 1;
}
