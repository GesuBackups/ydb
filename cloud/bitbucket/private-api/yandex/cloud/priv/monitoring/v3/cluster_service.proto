syntax = "proto3";

package yandex.cloud.priv.monitoring.v3;

import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";
import "yandex/cloud/api/operation.proto";
import "yandex/cloud/priv/operation/operation.proto";
import "yandex/cloud/priv/monitoring/v3/cluster.proto";
import "yandex/cloud/priv/monitoring/v3/shard_settings.proto";

option go_package = "a.yandex-team.ru/cloud/bitbucket/private-api/yandex/cloud/priv/monitoring/v3;monitoring";

// A set of methods for managing Cluster resources.
service ClusterService {
    // Returns the specified Cluster resource.
    //
    // To get the list of available Cluster resources, make a [List] request.
    rpc Get (GetClusterRequest) returns (Cluster) {
        option (google.api.http) = { get: "/monitoring/v3/clusters/{cluster_id}" };
    }

    // Retrieves the list of Cluster resources.
    rpc List (ListClustersRequest) returns (ListClustersResponse) {
        option (google.api.http) = { get: "/monitoring/v3/clusters" };
    }

    // Creates a cluster.
    rpc Create (CreateClusterRequest) returns (operation.Operation) {
        option (google.api.http) = { post: "/monitoring/v3/clusters" body: "*" };
        option (yandex.cloud.api.operation) = {
            metadata: "CreateClusterMetadata"
            response: "Cluster"
        };
    }

    // Updates the specified cluster.
    rpc Update (UpdateClusterRequest) returns (operation.Operation) {
        option (google.api.http) = { patch: "/monitoring/v3/clusters/{cluster_id}" body: "*" };
        option (yandex.cloud.api.operation) = {
            metadata: "UpdateClusterMetadata"
            response: "Cluster"
        };
    }

    // Deletes the specified cluster.
    rpc Delete (DeleteClusterRequest) returns (operation.Operation) {
        option (google.api.http) = { delete: "/monitoring/v3/clusters/{cluster_id}" };
        option (yandex.cloud.api.operation) = {
            metadata: "DeleteClusterMetadata"
            response: "google.protobuf.Empty"
        };
    }

    // Lists operations for the specified cluster.
    rpc ListOperations (ListClusterOperationsRequest) returns (ListClusterOperationsResponse) {
        option (google.api.http) = { get: "/monitoring/v3/clusters/{cluster_id}/operations" };
    }
}

message GetClusterRequest {
    // ID of the folder to get cluster from.
    string folder_id = 1;

    // ID of the Cluster resource to return.
    string cluster_id = 2;
}

message ListClustersRequest {
    // ID of the folder to list clusters in.
    string folder_id = 1;

    // The maximum number of results per page to return. If the number of available
    // results is larger than [page_size],
    // the service returns a [ListClustersResponse.next_page_token]
    // that can be used to get the next page of results in subsequent list requests.
    int64 page_size = 2;

    // Page token. To get the next page of results, set [page_token] to the
    // [ListClustersResponse.next_page_token] returned by a previous list request.
    string page_token = 3;

    // A filter expression that filters resources listed in the response.
    // Currently you can use filtering only on the [Cluster.id] or [Cluster.name] field.
    string filter = 4;
}

message ListClustersResponse {
    // List of Cluster resources.
    repeated Cluster clusters = 1;

    // This token allows you to get the next page of results for list requests. If the number of results
    // is larger than [ListClustersRequest.page_size], use
    // the [next_page_token] as the value
    // for the [ListClustersRequest.page_token] query parameter
    // in the next list request. Each subsequent list request will have its own
    // [next_page_token] to continue paging through the results.
    string next_page_token = 2;
}

message CreateClusterRequest {
    // ID of the folder to create cluster in.
    string folder_id = 1;

    // ID of the cluster.
    string cluster_id = 2;

    // Description of the cluster.
    string description = 3;

    // Resource labels as `key:value` pairs.
    map<string, string> labels = 4;

    // Name of the cluster label name.
    string label_name = 5;

    // Shard settings.
    ShardSettings shard_settings = 6;

    // Hosts.
    repeated PatternHost hosts = 7;

    // Host urls.
    repeated HostUrl host_urls = 8;

    // Conductor groups.
    repeated ConductorGroup conductor_groups = 9;

    // Conductor tags.
    repeated ConductorTag conductor_tags = 10;

    // Nanny groups.
    repeated NannyGroup nanny_groups = 11;

    // Qloud groups.
    repeated QloudGroup qloud_groups = 12;

    // Networks.
    repeated Network networks = 13;

    // YP clusters.
    repeated YpCluster yp_clusters = 14;

    // Instance groups.
    repeated InstanceGroup instance_groups = 15;
}

message CreateClusterMetadata {
    // ID of the cluster.
    string cluster_id = 1;
}

message UpdateClusterRequest {
    // ID of the folder.
    string folder_id = 1;

    // ID of the Cluster resource to update.
    string cluster_id = 2;

    // Field mask that specifies which fields of the Cluster resource are going to be updated.
    google.protobuf.FieldMask update_mask = 3;

    // Description of the cluster.
    string description = 4;

    // Resource labels as `key:value` pairs.
    map<string, string> labels = 5;

    // Name of the cluster label name.
    string label_name = 6;

    // Shard settings.
    ShardSettings shard_settings = 7;

    // Hosts.
    repeated PatternHost hosts = 8;

    // Host urls.
    repeated HostUrl host_urls = 9;

    // Conductor groups.
    repeated ConductorGroup conductor_groups = 10;

    // Conductor tags.
    repeated ConductorTag conductor_tags = 11;

    // Nanny groups.
    repeated NannyGroup nanny_groups = 12;

    // Qloud groups.
    repeated QloudGroup qloud_groups = 13;

    // Networks.
    repeated Network networks = 14;

    // YP clusters.
    repeated YpCluster yp_clusters = 15;

    // Instance groups.
    repeated InstanceGroup instance_groups = 16;
}

message UpdateClusterMetadata {
    // ID of the cluster that is being updated.
    string cluster_id = 1;
}

message DeleteClusterRequest {
    // ID of the folder.
    string folder_id = 1;

    // ID of the cluster to delete.
    string cluster_id = 2;
}

message DeleteClusterMetadata {
    // ID of the cluster that is being deleted.
    string cluster_id = 1;
}

message ListClusterOperationsRequest {
    // ID of the folder to list operations for.
    string folder_id = 1;

    // ID of the cluster to list operations for.
    string cluster_id = 2;

    // The maximum number of results per page to return. If the number of available
    // results is larger than [page_size], the service returns a [ListClusterOperationsResponse.next_page_token]
    // that can be used to get the next page of results in subsequent list requests.
    int64 page_size = 3;

    // Page token. To get the next page of results, set [page_token] to the
    // [ListClusterOperationsResponse.next_page_token] returned by a previous list request.
    string page_token = 4;
}

message ListClusterOperationsResponse {
    // List of operations for the specified cluster.
    repeated operation.Operation operations = 1;

    // This token allows you to get the next page of results for list requests. If the number of results
    // is larger than [ListClusterOperationsRequest.page_size], use the [next_page_token] as the value
    // for the [ListClusterOperationsRequest.page_token] query parameter in the next list request.
    // Each subsequent list request will have its own [next_page_token] to continue paging through the results.
    string next_page_token = 2;
}
