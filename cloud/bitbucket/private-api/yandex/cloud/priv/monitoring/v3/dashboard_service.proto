syntax = "proto3";

package yandex.cloud.priv.monitoring.v3;

import "google/api/annotations.proto";
import "yandex/cloud/api/operation.proto";
import "yandex/cloud/priv/operation/operation.proto";
import "yandex/cloud/priv/monitoring/v3/dashboard.proto";
import "yandex/cloud/priv/monitoring/v3/parametrization.proto";
import "yandex/cloud/priv/monitoring/v3/widget.proto";

option go_package = "a.yandex-team.ru/cloud/bitbucket/private-api/yandex/cloud/priv/monitoring/v3;monitoring";

// A set of methods for managing dashboards.
service DashboardService {
    // Returns the specified dashboard.
    rpc Get(GetDashboardRequest) returns (Dashboard) {
        option (google.api.http) = { get: "/monitoring/v3/dashboards/{dashboard_id}" };
    }

    // Retrieves the list of dashboards in the specified folder.
    rpc List(ListDashboardsRequest) returns (ListDashboardsResponse) {
        option (google.api.http) = { get: "/monitoring/v3/dashboards" };
    }

    // Creates a new dashboard in the specified folder.
    rpc Create(CreateDashboardRequest) returns (operation.Operation) {
        option (google.api.http) = { post: "/monitoring/v3/dashboards" body: "*" };
        option (yandex.cloud.api.operation) = {
            metadata: "CreateDashboardMetadata"
            response: "Dashboard"
        };
    }

    // Updates the specified dashboard.
    rpc Update(UpdateDashboardRequest) returns (operation.Operation) {
        option (google.api.http) = { patch: "/monitoring/v3/dashboards/{dashboard_id}" body: "*" };
        option (yandex.cloud.api.operation) = {
            metadata: "UpdateDashboardMetadata"
            response: "Dashboard"
        };
    }

    // Deletes the specified dashboard.
    rpc Delete(DeleteDashboardRequest) returns (operation.Operation) {
        option (google.api.http) = { delete: "/monitoring/v3/dashboards/{dashboard_id}" };
        option (yandex.cloud.api.operation) = {
            metadata: "DeleteDashboardMetadata"
            response: "google.protobuf.Empty"
        };
    }

    // Lists operations for the specified dashboard.
    rpc ListOperations (ListDashboardOperationsRequest) returns (ListDashboardOperationsResponse) {
        option (google.api.http) = { get: "/monitoring/v3/dashboards/{dashboard_id}/operations" };
    }
}

message GetDashboardRequest {
    // Required. Dashboard ID.
    string dashboard_id = 1;
}

message ListDashboardsRequest {
    // Container id
    oneof container {
        // Required. Folder ID.
        string folder_id = 2;
    }

    // The maximum number of dashboards to return.
    // If unspecified, at most 100 dashboards will be returned.
    // The maximum value is 1000; values above 1000 will be coerced to 1000.
    int64 page_size = 19;

    // Page token. To get the next page of results, set `page_token` to the
    // [ListDashboardResponse.next_page_token] returned by a previous list request.
    string page_token = 20;

    // A filter expression that filters resources listed in the response.
    // The expression must specify:
    // 1. The field name. Currently you can use filtering only on the [Dashboard.name] field.
    // 2. An `=` operator.
    // 3. The value in double quotes (`"`). Must be 3-63 characters long and match the regular expression `[a-z][-a-z0-9]{1,61}[a-z0-9]`.
    // Example: name="abc"
    string filter = 21;
}

message ListDashboardsResponse {
    // List of dashboards.
    repeated Dashboard dashboards = 1;

    // Token to retrieve the next page of results, or empty if there are no more results in the list.
    string next_page_token = 2;
}

message CreateDashboardRequest {
    // Container id
    oneof container {
        // Required. Folder ID.
        string folder_id = 2;
    }

    // Required. Dashboard name.
    string name = 19;

    // Dashboard description.
    string description = 20;

    // Resource labels as `key:value` pairs.
    map<string, string> labels = 21;

    // Dashboard title.
    string title = 22;

    // Required. List of dashboard widgets.
    repeated Widget widgets = 23;

    // Dashboard parametrization.
    Parametrization parametrization = 24;
}

message CreateDashboardMetadata {
    // Dashboard ID.
    string dashboard_id = 1;
}

message UpdateDashboardRequest {
    // Required. Dashboard ID.
    string dashboard_id = 1;

    // Required. Dashboard name.
    string name = 2;

    // Dashboard description.
    string description = 3;

    // Resource labels as `key:value` pairs.
    map<string, string> labels = 4;

    // Dashboard title;
    string title = 5;

    // Required. List of dashboard widgets.
    repeated Widget widgets = 6;

    // Dashboard parametrization.
    Parametrization parametrization = 7;

    // The current etag of the dashboard.
    string etag = 8;
}

message UpdateDashboardMetadata {
    // Dashboard ID.
    string dashboard_id = 1;
}

message DeleteDashboardRequest {
    // Required. Dashboard ID.
    string dashboard_id = 1;

    // The current etag of the dashboard.
    string etag = 2;
}

message DeleteDashboardMetadata {
    // Dashboard ID.
    string dashboard_id = 1;
}

message ListDashboardOperationsRequest {
    // ID of the dashboard to list operations for.
    string dashboard_id = 1;

    // The maximum number of results per page to return. If the number of available
    // results is larger than [page_size], the service returns a [ListDashboardOperationsResponse.next_page_token]
    // that can be used to get the next page of results in subsequent list requests.
    int64 page_size = 2;

    // Page token. To get the next page of results, set [page_token] to the
    // [ListDashboardOperationsResponse.next_page_token] returned by a previous list request.
    string page_token = 3;
}

message ListDashboardOperationsResponse {
    // List of operations for the specified dashboard.
    repeated operation.Operation operations = 1;

    // This token allows you to get the next page of results for list requests. If the number of results
    // is larger than [ListDashboardOperationsRequest.page_size], use the [next_page_token] as the value
    // for the [ListDashboardOperationsRequest.page_token] query parameter in the next list request.
    // Each subsequent list request will have its own [next_page_token] to continue paging through the results.
    string next_page_token = 2;
}
