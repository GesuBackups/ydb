syntax = "proto3";

package yandex.cloud.priv.monitoring.v3;

import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";
import "yandex/cloud/api/operation.proto";
import "yandex/cloud/priv/operation/operation.proto";
import "yandex/cloud/priv/monitoring/v3/shard.proto";
import "yandex/cloud/priv/monitoring/v3/shard_settings.proto";

option go_package = "a.yandex-team.ru/cloud/bitbucket/private-api/yandex/cloud/priv/monitoring/v3;monitoring";

// A set of methods for managing Shard resources.
service ShardService {
  // Returns the specified Shard resource.
  //
  // To get the list of available Shard resources, make a [List] request.
  rpc Get (GetShardRequest) returns (Shard) {
    option (google.api.http) = {get: "/monitoring/v3/shards/{shard_id}"};
  }

  // Retrieves the list of Shard resources.
  rpc List (ListShardsRequest) returns (ListShardsResponse) {
    option (google.api.http) = {get: "/monitoring/v3/shards"};
  }

  // Creates a shard.
  rpc Create (CreateShardRequest) returns (operation.Operation) {
    option (google.api.http) = {post: "/monitoring/v3/shards" body: "*"};
    option (yandex.cloud.api.operation) = {
      metadata: "CreateShardMetadata"
      response: "Shard"
    };
  }

  // Updates the specified shard.
  rpc Update (UpdateShardRequest) returns (operation.Operation) {
    option (google.api.http) = {patch: "/monitoring/v3/shards/{shard_id}" body: "*"};
    option (yandex.cloud.api.operation) = {
      metadata: "UpdateShardMetadata"
      response: "Shard"
    };
  }

  // Deletes the specified shard.
  rpc Delete (DeleteShardRequest) returns (operation.Operation) {
    option (google.api.http) = {delete: "/monitoring/v3/shards/{shard_id}"};
    option (yandex.cloud.api.operation) = {
      metadata: "DeleteShardMetadata"
      response: "google.protobuf.Empty"
    };
  }

  // Lists operations for the specified shard.
  rpc ListOperations (ListShardOperationsRequest) returns (ListShardOperationsResponse) {
    option (google.api.http) = {get: "/monitoring/v3/shards/{shard_id}/operations"};
  }
}

message GetShardRequest {
  // ID of the folder to get shard from.
  string folder_id = 1;

  // ID of the Shard resource to return.
  string shard_id = 2;
}

message ListShardsRequest {
  // ID of the folder to list shards in.
  string folder_id = 1;

  // The maximum number of results per page to return. If the number of available
  // results is larger than [page_size],
  // the shard returns a [ListShardsResponse.next_page_token]
  // that can be used to get the next page of results in subsequent list requests.
  int64 page_size = 2;

  // Page token. To get the next page of results, set [page_token] to the
  // [ListShardsResponse.next_page_token] returned by a previous list request.
  string page_token = 3;

  // A filter expression that filters resources listed in the response.
  // Currently you can use filtering only on the [Shard.id] or [Shard.name] field.
  string filter = 4;
}

message ListShardsResponse {
  // List of Shard resources.
  repeated Shard shards = 1;

  // This token allows you to get the next page of results for list requests. If the number of results
  // is larger than [ListShardsRequest.page_size], use
  // the [next_page_token] as the value
  // for the [ListShardsRequest.page_token] query parameter
  // in the next list request. Each subsequent list request will have its own
  // [next_page_token] to continue paging through the results.
  string next_page_token = 2;
}

message CreateShardRequest {
  // ID of the folder to create shard in.
  string folder_id = 1;

  // ID of the shard.
  string shard_id = 2;

  // Description of the shard.
  string description = 3;

  // Resource labels as `key:value` pairs.
  map<string, string> labels = 4;

  // ID of related cluster.
  string cluster_id = 5;

  // ID of related service.
  string service_id = 6;

  // Metric TTL in days.
  ShardSettings shard_settings = 10;

  // Shard mode.
  Shard.Mode mode = 11;

  // Metric name label.
  string metric_name_label = 12;
}

message CreateShardMetadata {
  // ID of the shard.
  string shard_id = 1;
}

message UpdateShardRequest {
  // ID of the folder.
  string folder_id = 1;

  // ID of the Shard resource to update.
  string shard_id = 2;

  // Field mask that specifies which fields of the Shard resource are going to be updated.
  google.protobuf.FieldMask update_mask = 3;

  // Description of the shard.
  string description = 4;

  // Resource labels as `key:value` pairs.
  map<string, string> labels = 5;

  // Metric TTL in days.
  ShardSettings shard_settings = 10;

  // Shard mode.
  Shard.Mode mode = 11;

  // Metric name label.
  string metric_name_label = 12;
}

message UpdateShardMetadata {
  // ID of the shard that is being updated.
  string shard_id = 1;
}

message DeleteShardRequest {
  // ID of the folder.
  string folder_id = 1;

  // ID of the shard to delete.
  string shard_id = 2;
}

message DeleteShardMetadata {
  // ID of the Shard resource that is being deleted.
  string shard_id = 1;
}

message ListShardOperationsRequest {
  // ID of the folder to list operations for.
  string folder_id = 1;

  // ID of the shard to list operations for.
  string shard_id = 2;

  // The maximum number of results per page to return. If the number of available
  // results is larger than [page_size], the shard returns a [ListShardOperationsResponse.next_page_token]
  // that can be used to get the next page of results in subsequent list requests.
  int64 page_size = 3;

  // Page token. To get the next page of results, set [page_token] to the
  // [ListShardOperationsResponse.next_page_token] returned by a previous list request.
  string page_token = 4;
}

message ListShardOperationsResponse {
  // List of operations for the specified shard.
  repeated operation.Operation operations = 1;

  // This token allows you to get the next page of results for list requests. If the number of results
  // is larger than [ListShardOperationsRequest.page_size], use the [next_page_token] as the value
  // for the [ListShardOperationsRequest.page_token] query parameter in the next list request.
  // Each subsequent list request will have its own [next_page_token] to continue paging through the results.
  string next_page_token = 2;
}
