role_groups:
  backoffice:
    name: Backoffice roles

roles:

  backoffice.admin:
    groups: [backoffice]
    name: Администратор backoffice
    visibility: internal
    description: Роль для доступа к backoffice UI (чтение и изменение)
    includedRoles:
      - vpc.admin
      - vpc.securityGroups.editor.pseudo
      - compute.instanceGroups.admin
      - billing.accounts.viewer
      - certificate-manager.admin
      - audit-trails.admin
    scopes:
      - yc.support.tickets.manage
    permissions:
    - billing.accounts.acceptMonetaryGrantOffer
    - billing.accounts.activateSubaccount
    - billing.accounts.bindCloud
    - billing.accounts.createCommittedUseDiscount
    - billing.accounts.createExporterTask
    - billing.accounts.createSubaccount
    - billing.accounts.listAccessBindings
    - billing.accounts.makeInvoicePayment
    - billing.accounts.suspendSubaccount
    - billing.accounts.updateAccessBindings
    - billing.accounts.updateExporterTask
    - cloudai.biometry.exec
    - cloudai.locator.exec
    - cloudai.predictor.exec
    - cloudai.speechkitStt.exec
    - cloudai.speechkitTts.exec
    - cloudai.speller.exec
    - cloudai.translate.exec
    - cloudai.vision.exec
    - cloudai.vocabulary.exec
    - compute.console.getFolderStats
    - compute.diskOperations.list
    - compute.disks.use
    - compute.disks.{create,delete,update}
    - compute.disks.{get,list}
    - compute.imageOperations.list
    - compute.images.getLatestByFamily
    - compute.images.use
    - compute.images.{create,delete,update}
    - compute.images.{get,list}
    - compute.instanceOperations.list
    - compute.instances.accessSerialPort
    - compute.instances.assignServiceAccount
    - compute.instances.attachDisk
    - compute.instances.detachDisk
    - compute.instances.getSerialPortOutput
    - compute.instances.restart
    - compute.instances.start
    - compute.instances.stop
    - compute.instances.{create,delete,update}
    - compute.instances.{get,list}
    - compute.instances.assignSecurityGroup
    - compute.networkInterfaces.attach
    - compute.networkInterfaces.detach
    - compute.networkInterfaces.{get,list}
    - compute.operations.cancel
    - compute.operations.{get,list}
    - compute.placementGroups.use
    - compute.placementGroups.{create,delete,update}
    - compute.placementGroups.{get,list,listInstances}
    - compute.placementGroupOperations.list
    - compute.quotas.getCloudLimit
    - compute.snapshotOperations.list
    - compute.snapshots.import
    - compute.snapshots.use
    - compute.snapshots.{create,delete,update}
    - compute.snapshots.{get,list}
    - compute.zones.{get,list}
    - computeInternal.quotas.getCloudLimit
    - container-registry.images.{create,delete,update}
    - container-registry.images.{get,list}
    - container-registry.quotas.get
    - container-registry.registries.listAccessBindings
    - container-registry.registries.updateAccessBindings
    - container-registry.registries.{create,delete,update}
    - container-registry.registries.{get,list}
    - container-registry.registries.{listIpPermissions,updateIpPermissions}
    - container-registry.repositories.{create,delete}
    - container-registry.repositories.listAccessBindings
    - container-registry.repositories.updateAccessBindings
    - container-registry.repositories.{createLifecyclePolicy,deleteLifecyclePolicy,updateLifecyclePolicy,dryRunLifecyclePolicy}
    - container-registry.repositories.{getLifecyclePolicy,listLifecyclePolicies,getDryRunLifecyclePolicyResult,listDryRunLifecyclePolicyResults}
    - iam.accessBinding.delete
    - iam.accessBindings.list
    - iam.accessBindings.set
    - iam.accessBindings.update
    - iam.authorizedKeys.get
    - iam.authorizedKeys.{create,delete,update}
    - iam.cloud.update
    - iam.cloudOperations.list
    - iam.cloudUser.get
    - iam.cloudUser.{create,delete}
    - iam.cloudUsers.list
    - iam.clouds.delete
    - iam.clouds.{get,list}
    - iam.folderOperations.list
    - iam.folders.{create,delete,update}
    - iam.folders.{get,list}
    - iam.operations.{get,list}
    - iam.roles.list
    - iam.serviceAccounts.createAccessKey
    - iam.serviceAccounts.createApiKey
    - iam.serviceAccounts.deleteAccessKey
    - iam.serviceAccounts.deleteApiKey
    - iam.serviceAccounts.updateAccessKey
    - iam.serviceAccounts.updateApiKey
    - iam.serviceAccounts.getAccessKey
    - iam.serviceAccounts.getApiKey
    - iam.serviceAccounts.listAccessKeys
    - iam.serviceAccounts.listApiKeys
    - iam.serviceAccounts.use
    - iam.serviceAccounts.{create,delete,update}
    - iam.serviceAccounts.{get,list}
    - iam.serviceAccounts.{list,update}AccessBindings
    - iam.tokenKeys.get
    - iam.tokenKeys.{create,delete,update}
    - iam.userAccounts.get
    - iam.userOperations.list
    - iot.quotas.get
    - kms.keys.cancelDelete
    - kms.keys.decrypt
    - kms.keys.encrypt
    - kms.keys.rotate
    - kms.keys.setPrimaryVersion
    - kms.keys.updateMeta
    - kms.keys.updateRotation
    - kms.keys.updateStatus
    - kms.keys.{create,delete}
    - kms.keys.{get,list}
    - kms.quotas.get
    - marketplace.agreementAcceptances.list
    - marketplace.agreements.accept
    - marketplace.agreements.create
    - marketplace.agreements.deprecate
    - marketplace.agreements.{get,list}
    - marketplace.avatar.create
    - marketplace.isvs.{create,update}
    - marketplace.isvs.{get,list}
    - marketplace.osProductFamilies.deprecate
    - marketplace.osProductFamilies.update
    - marketplace.osProductFamilies.{get,list}
    - marketplace.osProductFamilyVersions.list
    - marketplace.osProducts.deprecate
    - marketplace.osProducts.{create,update}
    - marketplace.osProducts.{get,list}
    - marketplace.partner.become
    - marketplace.product.create
    - marketplace.products.list
    - marketplace.publishers.{create,update}
    - marketplace.publishers.{get,list}
    - marketplace.skus.{create,update}
    - marketplace.skus.{get,list}
    - marketplace.vars.{create,update}
    - marketplace.vars.{get,list}
    - mdb.all.modify
    - mdb.all.read
    - mdb.all.{create,delete}
    - mdb.clusterInfo.read
    - mdb.quotas.read
    - monitoring.configs.{create,delete,update}
    - monitoring.configs.{get,list}
    - monitoring.data.read
    - monitoring.data.write
    - monitoring.sensorLabels.get
    - monitoring.sensorNames.get
    - monitoring.sensors.get
    - resource-manager.clouds.get
    - resource-manager.clouds.{update,delete}
    - resource-manager.clouds.{list,update}AccessBindings
    - resource-manager.clouds.{list,update}PermissionStages
    - resource-manager.folders.get
    - resource-manager.folders.{create,update,delete}
    - resource-manager.folders.{list,update}AccessBindings
    - s3.buckets.createBucket
    - s3.buckets.deleteBucket
    - s3.buckets.deleteBucketWebsite
    - s3.buckets.getBucketCors
    - s3.buckets.getBucketLocation
    - s3.buckets.getBucketVersioning
    - s3.buckets.getBucketWebsite
    - s3.buckets.getExternalSettings
    - s3.buckets.getLifecycleConfiguration
    - s3.buckets.listAccessBindings
    - s3.buckets.listBucket
    - s3.buckets.listBucketMultipartUploads
    - s3.buckets.listBucketVersions
    - s3.buckets.putBucketCors
    - s3.buckets.putBucketWebsite
    - s3.buckets.putExternalSettings
    - s3.buckets.putLifecycleConfiguration
    - s3.buckets.updateAccessBindings
    - s3.cloudQuotas.get
    - s3.objects.abortMultipartUpload
    - s3.objects.deleteObject
    - s3.objects.getObject
    - s3.objects.listAccessBindings
    - s3.objects.listMultipartUploadParts
    - s3.objects.putObject
    - s3.objects.updateAccessBindings
    - s3.services.listAllMyBuckets
    - ydb.tables.alter
    - ydb.tables.drop
    - ydb.tables.list
    - ydb.tables.{create,delete,update}
    - ylb.networkLoadBalancerOperations.list
    - ylb.networkLoadBalancers.start
    - ylb.networkLoadBalancers.stop
    - ylb.networkLoadBalancers.{create,createInternal,createUdpListener,delete,update}
    - ylb.networkLoadBalancers.{get,list}
    - ylb.targetGroupOperations.list
    - ylb.targetGroups.use
    - ylb.targetGroups.{create,delete,update}
    - ylb.targetGroups.{get,list}
    - ymq.messages.changeVisibility
    - ymq.messages.delete
    - ymq.messages.receive
    - ymq.messages.send
    - ymq.queues.getAttributes
    - ymq.queues.getUrl
    - ymq.queues.list
    - ymq.queues.listDeadLetterSourceQueues
    - ymq.queues.purge
    - ymq.queues.setAttributes
    - ymq.queues.{create,delete}

  backoffice.viewer:
    groups: [backoffice]
    name: Read-only пользователь backoffice
    visibility: internal
    description: Роль для доступа к backoffice UI (только чтение)
    includedRoles:
      - vpc.viewer
      - internal.vpc.backoffice.viewer
      - load-balancer.viewer
      - compute.instanceGroups.viewer
      - billing.accounts.viewer
      - certificate-manager.viewer
      - audit-trails.configViewer
      - storage.configViewer
      - compute.viewer
      - container-registry.viewer
      - iam.viewer
      - kms.viewer
      - marketplace.viewer
      - mdb.viewer
      - monitoring.viewer
      - resource-manager.viewer
      - ymq.viewer
      - organization-manager.viewer
      - quota-manager.viewer
    scopes:
      - yc.support.tickets.manage
    permissions:
    - computeInternal.quotas.getCloudLimit
    - s3.cloudQuotas.get
    - ydb.tables.list

  internal.backoffice.notify.agent:
    groups: [backoffice]
    name: Агент Notify
    visibility: internal
    description: Роль Service Account для отправки писем
    includedRoles:
    - internal.iam.userSettings.agent
    permissions:
    - iam.accessBindings.list
    - iam.clouds.getSettings
    - iam.clouds.get
    - iam.folders.get
    - iam.serviceAccounts.listAccessBindings
    - resource-manager.clouds.listAccessBindings
    - resource-manager.clouds.get
    - resource-manager.clouds.getSettings
    - resource-manager.folders.listAccessBindings
    - resource-manager.folders.get

  backoffice.contentViewer:
    groups:
      - backoffice
    name: Backoffice content viewer
    visibility: internal
    description: Viewer role for backoffice content
    includedRoles:
     - backoffice.eventsViewer
     - backoffice.servicesViewer
    permissions:
      - backoffice.blog.get
      - backoffice.cases.get
      - backoffice.forms.get
      - backoffice.industries.get
      - backoffice.pages.get
      - backoffice.regionsCatalogue.get
      - backoffice.solutions.get
      - backoffice.useCases.get

  backoffice.contentEditor:
    groups:
      - backoffice
    name: Backoffice content editor
    visibility: internal
    description: Editor role for backoffice content
    includedRoles:
      - backoffice.contentViewer
    permissions:
      - backoffice.blog.update
      - backoffice.cases.update
      - backoffice.forms.update
      - backoffice.industries.update
      - backoffice.pages.update
      - backoffice.regionsCatalogue.update
      - backoffice.solutions.update
      - backoffice.useCases.update

  backoffice.contentAdmin:
    groups:
      - backoffice
    name: Backoffice content admin
    visibility: internal
    description: Admin role for backoffice content
    includedRoles:
      - backoffice.contentEditor
    permissions:
      - backoffice.blog.create
      - backoffice.cases.create
      - backoffice.forms.create
      - backoffice.industries.create
      - backoffice.pages.create
      - backoffice.regionsCatalogue.create
      - backoffice.solutions.create
      - backoffice.useCases.create

      - backoffice.blog.delete
      - backoffice.cases.delete
      - backoffice.forms.delete
      - backoffice.industries.delete
      - backoffice.pages.delete
      - backoffice.regionsCatalogue.delete
      - backoffice.solutions.delete
      - backoffice.useCases.delete

  backoffice.eventsViewer:
    groups:
      - backoffice
    name: Backoffice events viewer
    visibility: internal
    description: Viewer role for backoffice events
    includedRoles:
     - backoffice.servicesViewer
    permissions:
      - backoffice.events.get
      - backoffice.participants.get

  backoffice.eventsEditor:
    groups:
      - backoffice
    name: Backoffice events editor
    visibility: internal
    description: Editor role for backoffice events
    includedRoles:
      - backoffice.eventsViewer
    permissions:
      - backoffice.events.update

  backoffice.eventsAdmin:
    groups:
      - backoffice
    name: Backoffice events admin
    visibility: internal
    description: Admin role for backoffice events
    includedRoles:
      - backoffice.eventsEditor
    permissions:
      - backoffice.events.create
      - backoffice.events.delete

  backoffice.eventApplicationsViewer:
    groups:
      - backoffice
    name: Backoffice event applications viewer
    visibility: internal
    description: Viewer role for backoffice event applications
    includedRoles:
      - backoffice.eventsViewer
    permissions:
      - backoffice.eventApplications.get
      - backoffice.mailLog.get

  backoffice.eventApplicationsEditor:
    groups:
      - backoffice
    name: Backoffice event applications editor
    visibility: internal
    description: Editor role for backoffice event applications
    includedRoles:
      - backoffice.eventApplicationsViewer
    permissions:
      - backoffice.eventApplications.update

  backoffice.servicesViewer:
    groups:
      - backoffice
    name: Backoffice services viewer
    visibility: internal
    description: Viewer role for backoffice services
    permissions:
      - backoffice.services.get
      - backoffice.pseudoServices.get
      - backoffice.serviceCategories.get

  backoffice.servicesEditor:
    groups:
      - backoffice
    name: Backoffice services editor
    visibility: internal
    description: Editor role for backoffice services
    includedRoles:
      - backoffice.servicesViewer
    permissions:
      - backoffice.services.update
      - backoffice.pseudoServices.update
      - backoffice.serviceCategories.update

  backoffice.servicesAdmin:
    groups:
      - backoffice
    name: Backoffice services admin
    visibility: internal
    description: Admin role for backoffice services
    includedRoles:
      - backoffice.servicesEditor
    permissions:
      - backoffice.services.create
      - backoffice.pseudoServices.create
      - backoffice.serviceCategories.create

      - backoffice.services.delete
      - backoffice.pseudoServices.delete
      - backoffice.serviceCategories.delete

  backoffice.featuresViewer:
    groups:
      - backoffice
    name: Backoffice features viewer
    visibility: internal
    description: Viewer role for backoffice features
    includedRoles:
      - backoffice.servicesViewer
    permissions:
      - backoffice.features.get

  backoffice.featuresEditor:
    groups:
      - backoffice
    name: Backoffice features editor
    visibility: internal
    description: Editor role for backoffice features
    includedRoles:
      - backoffice.featuresViewer
    permissions:
      - backoffice.features.update

  backoffice.incidentsViewer:
    groups:
      - backoffice
    name: Backoffice incidents viewer
    visibility: internal
    description: Viewer role for backoffice incidents
    includedRoles:
      - backoffice.servicesViewer
    permissions:
      - backoffice.incidents.get

  backoffice.incidentsEditor:
    groups:
      - backoffice
    name: Backoffice incidents editor
    visibility: internal
    description: Editor role for backoffice incidents
    includedRoles:
      - backoffice.incidentsViewer
    permissions:
      - backoffice.incidents.update

  backoffice.incidentsAdmin:
    groups:
      - backoffice
    name: Backoffice incidents admin
    visibility: internal
    description: Admin role for backoffice incidents
    includedRoles:
      - backoffice.incidentsEditor
    permissions:
      - backoffice.incidents.create
      - backoffice.incidents.delete

  backoffice.techMailSender:
    groups:
      - backoffice
    name: Backoffice tech mail sender
    visibility: internal
    description: Tech mail sender role
    permissions:
      - backoffice.techMail.send

  backoffice.support:
    groups:
      - backoffice
    name: Backoffice support
    visibility: internal
    description: Support roles
    includedRoles:
      - backoffice.incidentsAdmin
    permissions:
      - backoffice.techMail.send

  backoffice.devViewer:
    groups:
      - backoffice
    name: Backoffice dev viewer
    visibility: internal
    description: Viewer role for backoffice dev instruments
    permissions:
      - backoffice.regions.get
      - backoffice.featureFlags.get
      - backoffice.yandexChats.get

  backoffice.devEditor:
    groups:
      - backoffice
    name: Backoffice dev editors
    visibility: internal
    description: Editor role for backoffice dev instruments
    includedRoles:
      - backoffice.devViewer
    permissions:
      - backoffice.regions.update
      - backoffice.featureFlags.update
      - backoffice.yandexChats.update

  backoffice.devAdmin:
    groups:
      - backoffice
    name: Backoffice dev admin
    visibility: internal
    description: Admin role for backoffice dev instruments
    includedRoles:
      - backoffice.devEditor
    permissions:
      - backoffice.regions.create
      - backoffice.featureFlags.create
      - backoffice.yandexChats.create
      - backoffice.regions.delete
      - backoffice.featureFlags.delete
      - backoffice.yandexChats.delete