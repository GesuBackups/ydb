syntax = "proto3";

package yandex.cloud.priv.platform.cats.v1;

import "google/protobuf/empty.proto";

import "yandex/cloud/api/tools/options.proto";
import "yandex/cloud/priv/platform/cats/v1/identifier.proto";
import "yandex/cloud/priv/platform/cats/v1/worker.proto";

option go_package = "a.yandex-team.ru/cloud/bitbucket/private-api/yandex/cloud/priv/platform/cats/v1;cats";
option java_outer_classname = "PCATSWS";

// WorkerService is used by workers to report its state and by schedulers
// to read worker states.
service WorkerService {
  // Workers report their state (mainly running task info) to tha CATS core.
  rpc ReportWorkerStatus(WorkerStatusRequest) returns (google.protobuf.Empty) {
    option (cloud.api.tools.method).lint_skip.contains_resource_name = true;
  }
  rpc StreamWorkerStatus(stream WorkerStatusRequest) returns (stream WorkerStatusResponse) {
    option (cloud.api.tools.method).lint_skip.contains_resource_name = true;
  }
  // The interested party (scheduler) use StreamWorkers to retreive information
  // about the active workers and tasks running on them.
  rpc ListWorkers(ListWorkersRequest) returns (ListWorkersResponse) {
    option (cloud.api.tools.method).lint_skip.contains_resource_name = true;
  }
  rpc StreamWorkers(stream WorkersRequest) returns (stream WorkersResponse) {
    option (cloud.api.tools.method).lint_skip.contains_resource_name = true;
  }
  rpc Delete(DeleteWorkerRequest) returns (google.protobuf.Empty);
}

message WorkerStatusRequest {
  WorkerIdentifier id = 1;
  map<string, string> labels = 2;
  repeated string namespace_ids = 3;
  repeated string supported_task_families = 4;
  WorkerCapacity capacity = 5;

  repeated WorkerTaskInfo running_tasks = 6;
  repeated WorkerCondition conditions = 7;
}

message WorkerStatusResponse {
}

message WorkersRequest {
  map<string, string> selector = 1;
}

message WorkersResponse {
  repeated Worker workers = 1;
}

message ListWorkersRequest {
  map<string, string> selector = 1;
}

message ListWorkersResponse {
  repeated Worker workers = 1;
}

message DeleteWorkerRequest {
  WorkerIdentifier worker_id = 1;
}
