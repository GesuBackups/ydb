syntax = "proto3";

package yandex.cloud.priv.platform.cats.v1;

import "yandex/cloud/priv/platform/cats/v1/task.proto";
import "yandex/cloud/priv/platform/cats/v1/identifier.proto";

option go_package = "a.yandex-team.ru/cloud/bitbucket/private-api/yandex/cloud/priv/platform/cats/v1;cats";
option java_outer_classname = "PCATSTQS";

// TaskQueueService is used by workers or schedulers to retreive tasks from the queue.
// It has intentionally pretty broad interface, with streaming support and flexible
// query conditions, to allow low-latency scenarios with arbitrary intentions - 
// execution, scheduling, monitoring, etc.
service TaskQueueService {
  rpc WatchActiveTasks(WatchActiveTasksRequest) returns (stream WatchActiveTasksResponse);

  rpc ListActiveTasks(ListActiveTasksRequest) returns (ListActiveTasksResponse);
}

message WatchActiveTasksRequest {
  repeated string namespace_ids = 1;
  // TODO: add more filters - task state, anything else?

  bool fetch_once = 2;
}

message WatchActiveTasksResponse {
  repeated Task tasks = 1;
  repeated Identifier removed_tasks = 2;
}

message ListActiveTasksRequest {
  repeated string namespace_ids = 1;
  // TODO: add more filters - task state, anything else?
}

message ListActiveTasksResponse {
  repeated Task tasks = 1;
}
