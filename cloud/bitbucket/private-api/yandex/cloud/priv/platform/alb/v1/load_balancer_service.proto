syntax = "proto3";

package yandex.cloud.priv.platform.alb.v1;

import "google/protobuf/field_mask.proto";

import "yandex/cloud/api/operation.proto";
import "yandex/cloud/priv/operation/operation.proto";
import "yandex/cloud/priv/platform/alb/v1/load_balancer.proto";
import "yandex/cloud/priv/validation.proto";

option go_package = "a.yandex-team.ru/cloud/bitbucket/private-api/yandex/cloud/priv/platform/alb/v1;alb";
option java_outer_classname = "PALBS";

service LoadBalancerService {
  // Get load balancer by ID.
  // Permission: alb.loadBalancers.get
  rpc Get(GetLoadBalancerRequest) returns (LoadBalancer);

  // List load balancers in folder.
  // Permission: alb.loadBalancers.list
  rpc List(ListLoadBalancersRequest) returns (ListLoadBalancersResponse);

  // Create new load balancer.
  // Permission: alb.loadBalancers.create
  rpc Create(CreateLoadBalancerRequest) returns (operation.Operation) {
    option (yandex.cloud.api.operation) = {
      metadata: "CreateLoadBalancerMetadata"
      response: "LoadBalancer"
    };
  }

  // Update load balancer.
  // Permission: alb.loadBalancers.update
  rpc Update(UpdateLoadBalancerRequest) returns (operation.Operation) {
    option (yandex.cloud.api.operation) = {
      metadata: "UpdateLoadBalancerMetadata"
      response: "LoadBalancer"
    };
  }

  // Delete load balancer.
  // Permission: alb.loadBalancers.delete (or alb.loadBalancers.forceDelete with deletion_protection on)
  rpc Delete(DeleteLoadBalancerRequest) returns (operation.Operation) {
    option (yandex.cloud.api.operation) = {
      metadata: "DeleteLoadBalancerMetadata"
      response: "google.protobuf.Empty"
    };
  }

  // Start load balancer.
  // It has to be in the STOPPED state.
  // Permission: alb.loadBalancers.update
  rpc Start(StartLoadBalancerRequest) returns (operation.Operation) {
    option (yandex.cloud.api.operation) = {
      metadata: "StartLoadBalancerMetadata"
      response: "LoadBalancer"
    };
  }

  // Stop load balancer.
  // It has to be in the ACTIVE state.
  // Permission: alb.loadBalancers.update
  rpc Stop(StopLoadBalancerRequest) returns (operation.Operation) {
    option (yandex.cloud.api.operation) = {
      metadata: "StopLoadBalancerMetadata"
      response: "LoadBalancer"
    };
  }

  // Add new listener to a load balancer.
  // All listeners should have different names.
  // Permission: alb.loadBalancers.update
  rpc AddListener(AddListenerRequest) returns (operation.Operation) {
    option (yandex.cloud.api.operation) = {
      metadata: "AddListenerMetadata"
      response: "LoadBalancer"
    };
  }

  // Remove a listener from load balancer.
  // Finds the listener by its name.
  // Listener will handle existing connections for up to 10 minutes.
  // Permission: alb.loadBalancers.update
  rpc RemoveListener(RemoveListenerRequest) returns (operation.Operation) {
    option (yandex.cloud.api.operation) = {
      metadata: "RemoveListenerMetadata"
      response: "LoadBalancer"
    };
  }

  // Update an existing listener.
  // Finds the listener by its name.
  // Previous version of the listener will handle existing connections for up to 10 minutes.
  // Permission: alb.loadBalancers.update
  rpc UpdateListener(UpdateListenerRequest) returns (operation.Operation) {
    option (yandex.cloud.api.operation) = {
      metadata: "UpdateListenerMetadata"
      response: "LoadBalancer"
    };
  }

  // Add an SNI match to a TLS listener.
  // A shortcut for UpdateListener.
  rpc AddSniMatch(AddSniMatchRequest) returns (operation.Operation) {
    option (yandex.cloud.api.operation) = {
      metadata: "AddSniMatchMetadata"
      response: "google.protobuf.Empty"
    };
  }

  // Update SNI match by its name.
  // A shortcut for UpdateListener.
  rpc UpdateSniMatch(UpdateSniMatchRequest) returns (operation.Operation) {
    option (yandex.cloud.api.operation) = {
      metadata: "UpdateSniMatchMetadata"
      response: "google.protobuf.Empty"
    };
  }

  // Remove SNI match.
  // A shortcut for UpdateListener.
  rpc RemoveSniMatch(RemoveSniMatchRequest) returns (operation.Operation) {
    option (yandex.cloud.api.operation) = {
      metadata: "RemoveSniMatchMetadata"
      response: "google.protobuf.Empty"
    };
  }

  // Get state of each target (backend) within each zone.
  // Permission: alb.loadBalancers.get+alb.backendGroups.get+alb.targetGroups.get
  rpc GetTargetStates (GetTargetStatesRequest) returns (GetTargetStatesResponse);

  // Get state of each target for many load balancers.
  // Will find all the load balancers that use target group.
  // Permission: alb.targetGroups.get
  rpc GetAggregatedTargetStates (GetAggregatedTargetStatesRequest) returns (GetAggregatedTargetStatesResponse);

  // Lists operations for the specified load balancer.
  // Permission: alb.loadBalancers.get
  rpc ListOperations (ListLoadBalancerOperationsRequest) returns (ListLoadBalancerOperationsResponse);
}

message GetAggregatedTargetStatesRequest {
  // Optional filter for zones (e.g. "ru-central1-a")
  repeated string zone_ids = 1;
  // Not implemented yet.
  repeated string load_balancer_ids = 2;
  // Not implemented yet.
  repeated string backend_group_ids = 3;
  // Target group to get the states.
  string target_group_id = 4 [(required) = true];
}

message GetAggregatedTargetStatesResponse {
  // List of target states, same size as the target group.
  repeated AggregatedTargetState target_states = 1;
}

message GetTargetStatesRequest {
  string load_balancer_id = 1 [(required) = true];
  string backend_group_id = 2 [(required) = true];
  string target_group_id = 3 [(required) = true];
}

message GetTargetStatesResponse {
  // List of target states, same size as the target group.
  repeated TargetState target_states = 1;
}

message GetLoadBalancerRequest {
  string load_balancer_id = 1 [(required) = true];
}

message ListLoadBalancersRequest {
  string folder_id = 1 [(required) = true];

  int64 page_size = 2 [(value) = "0-1000"];
  // Token returned by a previous List() call.
  string page_token = 3 [(length) = "<=100"];
  // Only supports `name = "lb-name"`.
  string filter = 4 [(length) = "<=1000"];
}

message ListLoadBalancersResponse {
  repeated LoadBalancer load_balancers = 1;

  // Token to send to the next List() call.
  string next_page_token = 2;
}

message DeleteLoadBalancerRequest {
  string load_balancer_id = 1 [(required) = true];
}

message DeleteLoadBalancerMetadata {
  string load_balancer_id = 1;
}

message UpdateLoadBalancerRequest {
  string load_balancer_id = 1 [(required) = true];

  // Use UpdateListener to change a specific listener.
  google.protobuf.FieldMask update_mask = 2;

  string name = 3 [(pattern) = "|[a-z][-a-z0-9]{1,61}[a-z0-9]"];
  string description = 4 [(length) = "<=256"];
  map<string, string> labels = 5 [(priv.size) = "<=64", (length) = "<=63", (pattern) = "[-_0-9a-z]*", (map_key).length = "1-63", (map_key).pattern = "[a-z][-_0-9a-z]*"];

  repeated ListenerSpec listener_specs = 6;

  AllocationPolicy allocation_policy = 7;

  // Note that changing this will gracefully restart the load balancer.
  repeated string security_group_ids = 9;

  // Deprecated.
  int64 health_check_port = 8;

  // Forbids Delete() calls.
  bool deletion_protection = 10;

  // Return changed load balancer without actually changing anything.
  bool dry_run = 11;

  // Custom ALS server for serverless-gateway.
  AlsSettings custom_als = 12;

  LoadBalancer.CloseTrafficPolicy close_traffic_policy = 13;
}

message UpdateLoadBalancerMetadata {
  string load_balancer_id = 1;
}

message CreateLoadBalancerRequest {
  string folder_id = 1 [(required) = true];
  string name = 2 [(pattern) = "|[a-z][-a-z0-9]{1,61}[a-z0-9]"];
  string description = 3 [(length) = "<=256"];
  map<string, string> labels = 4 [(priv.size) = "<=64", (length) = "<=63", (pattern) = "[-_0-9a-z]*", (map_key).length = "1-63", (map_key).pattern = "[a-z][-_0-9a-z]*"];

  // "ru-central1"
  string region_id = 12;

  // Network where to allocate load balancer nodes.
  // Network's default security group applies unless you use `security_group_ids` below.
  string network_id = 8;

  // List of zones and subnets where to allocate load balancer nodes.
  // IPv4 backends will be accessible only in those subnets.
  // IPv6 backends can be in other subnets.
  AllocationPolicy allocation_policy = 7;

  // Listeners, can be empty.
  repeated ListenerSpec listener_specs = 6;

  // Optional security groups (instead of the network's default security group).
  // There should be an SG that allows health checks from HC networks (see SG docs) on port 30080.
  repeated string security_group_ids = 11;

  // Deprecated fields, not supported from now.
  reserved 10; // traffic_scheme
  reserved 5; // internal

  // Do not use. Internal field. (Used in tests).
  int64 health_check_port = 9;

  // Forbids Delete() calls.
  bool deletion_protection = 13;

  // Enable tracing (jaeger). Note that this cannot be changed later.
  Tracing tracing = 14;

  // Optional custom solomon cluster name (instead of "l7-{id}"). Must be unique.
  string solomon_cluster_name = 15;

  // Access logs will be sent to YT table.
  bool persistent_logs = 16;

  // Optional custom host for Juggler alerts (instead of "cloud_{env}_l7-{id}"). Must be unique.
  string juggler_host = 17;

  LoadBalancer.CloseTrafficPolicy close_traffic_policy = 18;
}

message CreateLoadBalancerMetadata {
  string load_balancer_id = 1;
  double progress_percentage = 2;
}

message StartLoadBalancerRequest {
  string load_balancer_id = 1 [(required) = true];
}

message StartLoadBalancerMetadata {
  string load_balancer_id = 1;
}

message StopLoadBalancerRequest {
  string load_balancer_id = 1 [(required) = true];
}

message StopLoadBalancerMetadata {
  string load_balancer_id = 1;
}

message AddListenerRequest {
  string load_balancer_id = 1 [(required) = true];

  ListenerSpec listener_spec = 2 [(required) = true];
}

message AddListenerMetadata {
  string load_balancer_id = 1;
  string listener_name = 2;
}

message RemoveListenerRequest {
  string load_balancer_id = 1 [(required) = true];
  string name = 2 [(required) = true];
}

message RemoveListenerMetadata {
  string load_balancer_id = 1;
  string listener_name = 2;
}

message UpdateListenerRequest {
  string load_balancer_id = 1 [(required) = true];
  google.protobuf.FieldMask update_mask = 2;

  ListenerSpec listener_spec = 3 [(required) = true];
}

message UpdateListenerMetadata {
  string load_balancer_id = 1;
  string listener_name = 2;
}

message AddressSpec {
  oneof address_spec {
    option (exactly_one) = true;

    ExternalIpv4AddressSpec external_ipv4_address_spec = 1;
    InternalIpv4AddressSpec internal_ipv4_address_spec = 2;
    ExternalIpv6AddressSpec external_ipv6_address_spec = 3;
  }
}

message ExternalIpv4AddressSpec {
  // Optional pre-allocated address.
  string address = 1;
}

message InternalIpv4AddressSpec {
  // Optional pre-allocated address.
  string address = 1;
  // Subnet of the address / where to allocated address.
  string subnet_id = 2 [(required) = true];
}

message ExternalIpv6AddressSpec {
  // Optional pre-allocated address.
  string address = 1;
  // Allocate an address that's accessible only from the Yandex networks.
  bool yandex_only = 2;
}

message EndpointSpec {
  // One or more addresses to listen on.
  repeated AddressSpec address_specs = 1 [(size) = ">0"];
  // One or more ports to listen on.
  repeated int64 ports = 2 [(size) = ">0", (value) = "1-65535"];
}

// Deprecated. Do not use.
message ExternalAddressSpec {
  string address = 1;
  Listener.IpVersion ip_version = 2;
  bool yandex_only = 3;
}

// Deprecated. Do not use.
message InternalAddressSpec {
  string address = 1;
  string subnet_id = 2;
  Listener.IpVersion ip_version = 3;
}

message ListenerSpec {
  string name = 1 [(required) = true, (pattern) = "[a-z][-a-z0-9]{1,61}[a-z0-9]"];

  // Deprecated. Use endpoint_specs.
  int64 port = 2 [(value) = "0-65535"];

  // Deprecated. Use endpoint_specs.
  oneof address {
    ExternalAddressSpec external_address_spec = 3;
    InternalAddressSpec internal_address_spec = 4;
  }

  // Addresses and ports.
  repeated EndpointSpec endpoint_specs = 8;

  oneof listener {
    option (exactly_one) = true;
    // TCP.
    StreamListener stream = 5;

    // Plaintext.
    HttpListener http = 6;

    // HTTPS and gRPC.
    TlsListener tls = 7;
  }
}

message AddSniMatchRequest {
  string load_balancer_id = 1 [(required) = true, (length) = "<=50"];
  string listener_name = 2 [(required) = true];
  string name = 3 [(required) = true];
  repeated string server_names = 4 [(size) = ">0"];
  TlsHandler handler = 5 [(required) = true];
}

message AddSniMatchMetadata {
  string load_balancer_id = 1;
  string listener_name = 2;
  string sni_match_name = 3;
}

message RemoveSniMatchRequest {
  string load_balancer_id = 1 [(required) = true, (length) = "<=50"];
  string listener_name = 2 [(required) = true];
  string sni_match_name = 3 [(required) = true];
}

message RemoveSniMatchMetadata {
  string load_balancer_id = 1;
  string listener_name = 2;
  string sni_match_name = 3;
}

message UpdateSniMatchRequest {
  string load_balancer_id = 1 [(required) = true, (length) = "<=50"];
  string listener_name = 2 [(required) = true];
  string name = 3 [(required) = true];
  google.protobuf.FieldMask update_mask = 4;
  repeated string server_names = 5 [(size) = ">0"];
  TlsHandler handler = 6 [(required) = true];
}

message UpdateSniMatchMetadata {
  string load_balancer_id = 1;
  string listener_name = 2;
  string sni_match_name = 3;
}

message ListLoadBalancerOperationsRequest {
  string load_balancer_id = 1 [(required) = true, (length) = "<=50"];
  int64 page_size = 2 [(value) = "<=1000"];

  // Token from the previous ListOperations() call.
  string page_token = 3 [(length) = "<=100"];
}

message ListLoadBalancerOperationsResponse {
  repeated operation.Operation operations = 1;

  // Token to send to the next ListOperations() call.
  string next_page_token = 2;
}
