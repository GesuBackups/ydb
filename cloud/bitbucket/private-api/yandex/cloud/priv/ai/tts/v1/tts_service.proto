syntax = "proto3";

package yandex.cloud.priv.ai.tts.v1;

import "yandex/cloud/priv/validation.proto";

option go_package = "a.yandex-team.ru/cloud/bitbucket/private-api/yandex/cloud/priv/ai/tts/v1;tts";

service TtsService {
  rpc AdaptiveSynthesize (AdaptiveSynthesizeRequest) returns (stream AdaptiveSynthesizeResponse) {
  }
}

message AdaptiveSynthesizeRequest {
  AudioContent template_audio = 1 [(required) = true];
  string template_text = 2 [(required) = true, (length) = "<=256"];
  repeated ReplacementUnit replacements = 3 [(size) = "<=10"];
  string folder_id = 4 [(length) = "<=50"];
  AudioSpec output_audio_spec = 5;
}

message AudioContent {
  oneof audio_source {
    option (exactly_one) = true;
    bytes content = 1 [(length) = "<=10485760"];
  }
  AudioSpec audio_spec = 2 [(required) = true];
}

message AudioSpec {
  enum AudioEncoding {
    AUDIO_ENCODING_UNSPECIFIED = 0;

    // 16-bit signed little-endian (Linear PCM)
    LINEAR16_PCM = 1;
  }

  AudioEncoding audio_encoding = 1;
  int64 sample_rate_hertz = 2;
  string voice = 3;
}

message ReplacementUnit {
  int64 word_index_start = 1 [(value) = "0-128"];
  int64 word_index_end = 2  [(value) = "0-128"];
  string replacement_text = 3 [(required) = true, (length) = "<=100"];
  int64 audio_unit_start_ms = 4 [(value) = ">=0"];
  int64 audio_unit_end_ms = 5 [(value) = ">=0"];
}

message AdaptiveSynthesizeResponse {
  AudioChunk audio_chunk = 1;
}

message AudioChunk {
  bytes data = 1;
}
