syntax = "proto3";

package yandex.cloud.priv.ai.platform.v1;

import "yandex/cloud/priv/operation/operation.proto";
import "yandex/cloud/api/operation.proto";
import "yandex/cloud/priv/validation.proto";

option go_package = "a.yandex-team.ru/cloud/bitbucket/private-api/yandex/cloud/priv/ai/platform/v1;platform";
option java_outer_classname = "RPS";

service ResourcePoolService {
    rpc CreatePool (CreatePoolRequest) returns (operation.Operation) {
        option (yandex.cloud.api.operation) = {
            metadata: "CreatePoolMetadata"
            response: "Pool"
        };
    }

    rpc RemovePool (RemovePoolRequest) returns (operation.Operation) {
        option (yandex.cloud.api.operation) = {
            metadata: "RemovePoolMetadata"
            response: "google.protobuf.Empty"
        };
    }

    rpc AllocateVm (AllocateVmRequest) returns (operation.Operation) {
        option (yandex.cloud.api.operation) = {
            metadata: "AllocateVmMetadata"
            response: "Instance"
        };
    }

    rpc FreeVm (FreeVmRequest) returns (operation.Operation) {
        option (yandex.cloud.api.operation) = {
            metadata: "FreeVmMetadata"
            response: "google.protobuf.Empty"
        };
    }

    rpc ListPools (ListPoolsRequest) returns (ListPoolsResponse);
    rpc PoolVmsInfo (PoolVmsInfoRequest) returns (PoolVmsInfoResponse);

    rpc UpdatePoolAvailability (UpdatePoolAvailabilityRequest) returns (UpdatePoolAvailabilityResponse);
    rpc UpdateManifest (UpdateManifestRequest) returns (UpdateManifestResponse) {
        option deprecated = true;
    };
    rpc UpdateMetadata (UpdateMetadataRequest) returns (UpdateMetadataResponse);

    rpc CreateStoragePool (CreateStoragePoolRequest) returns (operation.Operation) {
        option (yandex.cloud.api.operation) = {
            metadata: "CreateStoragePoolMetadata"
            response: "StoragePool"
        };
    }

    rpc CreateStorage (CreateStorageRequest) returns (operation.Operation) {
        option (yandex.cloud.api.operation) = {
            metadata: "CreateStorageMetadata"
            response: "Storage"
        };
    }

    rpc DeleteStorage (DeleteStorageRequest) returns (operation.Operation) {
        option (yandex.cloud.api.operation) = {
            metadata: "DeleteStorageMetadata"
            response: "google.protobuf.Empty"
        };
    }

    rpc ListStorageSpecs (ListStorageSpecsRequest) returns (ListStorageSpecsResponse);
}

// Pool operations
message CreatePoolRequest {
    User user = 1;
    UserACL acl = 2;
    VmSpec spec = 3;
    repeated AvailabilitySpec availability_specs = 4;
    string manifest = 5 [deprecated = true];
    string name = 6 [(length) = "<=31", (pattern) = "[a-z]([-a-z0-9]{0,61}[a-z0-9])?"];
    string folder_id = 7 [(required) = true, (length) = "<=50"];
    map<string, string> metadata = 8;
}

message CreatePoolMetadata {
    string pool_id = 1;
}

message ListPoolsRequest {
    User user = 1;
}

message ListPoolsResponse {
    repeated Pool pools = 1;
}

message RemovePoolRequest {
    User user = 1;
    string pool_id = 2;
}

message RemovePoolMetadata {
    string pool_id = 1;
}


message PoolVmsInfoRequest {
    User user = 1;
    string pool_id = 2;
}

message PoolVmsInfoResponse {
    string pool_info = 1;
}

// Manifest operations

message UpdatePoolAvailabilityRequest {
    User user = 1;
    string pool_id = 2;
    repeated AvailabilitySpec availability_specs = 3;
}

message UpdatePoolAvailabilityResponse {
}

message UpdateManifestRequest {
    User user = 1;
    string pool_id = 2;
    string manifest = 3;
}

message UpdateManifestResponse {

}

message UpdateMetadataRequest {
    User user = 1;
    string pool_id = 2;
    map<string, string> metadata = 3;
}

message UpdateMetadataResponse {

}

// VM operations
message AllocateVmRequest {
    User user = 1;
    string pool_id = 2;
    string storage_id = 3; // optional
    string subnet_id = 4;
}

message AllocateVmMetadata {
    string instance_id = 1;
}

message FreeVmRequest {
    User user = 1;
    string instance_id = 2;
}

message FreeVmMetadata {
    string instance_id = 1;
}

// Storage spec operations
message CreateStoragePoolRequest {
    User user = 1;
    UserACL acl = 2;
    StorageSpec spec = 3;
    repeated string zone_ids = 4;
    string folder_id = 5;
}

message CreateStoragePoolMetadata {
    string storage_pool_id = 1;
}

message ListStorageSpecsRequest {
    User user = 1;
}

message ListStorageSpecsResponse {
    repeated StoragePool pools = 1;
}

// Storage operations
message CreateStorageRequest {
    User user = 1;
    string spec_pool_id = 2;
    string zone_id = 3;
}

message CreateStorageMetadata {
    string storage_id = 1;
}

message DeleteStorageRequest {
    User user = 1;
    string storage_id = 2;
}

message DeleteStorageMetadata {
    string storage_id = 1;
}


message Pool {
    string pool_id = 1;
    VmSpec spec = 2;
    repeated AvailabilitySpec availability_specs = 3;
    string manifest = 4 [deprecated = true];
    string name = 5; //[(length) = "<=63", (pattern) = "[a-z]([-a-z0-9]{0,61}[a-z0-9])?"];
    string folder_id = 6; //[(required) = true, (length) = "<=50"];
    map<string, string> metadata = 7;
}

message VmSpec {
    int64 cpu_count = 1;
    int64 gpu_count = 2;
    string gpu_type = 3;
    int64 ram_gb = 4;
    string image = 5;
    string name = 6;
}

message VmNetwork {
    string ipv4 = 1;
    string ipv6 = 2;
    string security_group_id = 3;
    string subnet_id = 4;
}

message Instance {
    string pool_id = 1;
    string instance_id = 2;
    VmNetwork network = 3;
    VmSpec spec = 4;
    repeated VmNetwork networks = 5;
}

message StorageSpec {
    int64 size_gb = 1;
    StorageType type = 2;
    string name = 3;
}

message StoragePool {
    string spec_pool_id = 1;
    string folder_id = 2;
    StorageSpec spec = 3;
    repeated string zone_ids = 4;
}

message Storage {
    string storage_id = 1;
    StorageSpec spec = 2;
    string zone_id = 3;
}

message AvailabilitySpec {
    int64 min_count = 1;
    int64 max_count = 2;
    string default_subnet_id = 3;
}


message User {
    string token = 1;
}

message UserACL {
    string acl = 1;
}

enum StorageType {
    STORAGE_TYPE_UNSPECIFIED = 0;
    HDD = 1;
    SSD = 2;
}
