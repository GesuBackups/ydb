syntax = "proto3";

package yandex.cloud.priv.k8s.v1.inner;

import "google/protobuf/empty.proto";

import "yandex/cloud/api/tools/options.proto";
import "yandex/cloud/priv/k8s/v1/inner/common.proto";
import "yandex/cloud/priv/validation.proto";
import "yandex/cloud/priv/operation/operation.proto";
import "yandex/cloud/api/operation.proto";

option go_package = "a.yandex-team.ru/cloud/bitbucket/private-api/yandex/cloud/priv/k8s/v1/inner;k8s";
option java_outer_classname = "PMKINS";

service NodeGroupService {
  rpc List(ListNodeGroupsRequest) returns (ListNodeGroupsResponse);
  rpc SetNodeGroupVersion(SetNodeGroupVersionRequest) returns (operation.Operation) {
    option (yandex.cloud.api.operation) = {
      metadata: "k8s.v1.AutoUpgradeNodeGroupMetadata"
      response: "k8s.v1.NodeGroup"
    };
    option (yandex.cloud.api.tools.method).lint_skip.contains_resource_name = true;
  };
  rpc SetNodeGroupReleaseChannel(SetNodeGroupReleaseChannelRequest) returns (google.protobuf.Empty) {
    option (yandex.cloud.api.tools.method).lint_skip.contains_resource_name = true;
  };
}

message ListNodeGroupsRequest {
  repeated ComponentFilter filter = 1;

  int64 page_size = 2 [(value) = "0-1000"];
  string page_token = 3 [(length) = "<=100"];
}

message ListNodeGroupsResponse {
  repeated NodeGroupInfo node_groups = 1;
  string next_page_token = 2;
}

message SetNodeGroupVersionRequest {
  string id = 1 [(required) = true];
  Version version = 2 [(required) = true];
  // force forces to version set regardless of user specified maintenance policy.
  bool force = 3;
}

message SetNodeGroupReleaseChannelRequest {
  string id = 1 [(required) = true];
  ReleaseChannel release_channel = 2 [(required) = true];
  // force forces release channel set regardless of user specified maintenance policy.
  bool force = 3;
}
