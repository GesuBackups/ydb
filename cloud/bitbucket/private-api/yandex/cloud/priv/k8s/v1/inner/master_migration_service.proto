syntax = "proto3";

package yandex.cloud.priv.k8s.v1.inner;

import "google/protobuf/empty.proto";

import "yandex/cloud/priv/k8s/v1/inner/common.proto";
import "yandex/cloud/priv/validation.proto";

option go_package = "a.yandex-team.ru/cloud/bitbucket/private-api/yandex/cloud/priv/k8s/v1/inner;k8s";
option java_outer_classname = "PMKIMMGS";

// MasterMigration is a mass master upgrade
service MasterMigrationService {
    // Create or update master migration specification
    rpc Upsert (UpsertMasterMigrationRequest) returns (google.protobuf.Empty);
    rpc List (ListMasterMigrationRequest) returns (ListMasterMigrationResponse);
    rpc Delete (DeleteMasterMigrationRequest) returns (google.protobuf.Empty);
}

// MasterMigration represents a mass upgrade that is performed for masters of the specified
// ReleaseChannel (including both major version and channel) to the desired_version (including
// revision).
message MasterMigration {
    // release_channel is the primary key of the migration table
    ReleaseChannel release_channel = 1 [(required) = true];
    // It's possible to specify desired_version.major_version distinct from release_channel.major_version
    // for deprecation upgrades
    Version desired_version = 2 [(required) = true];
    // Limit on the total number of masters/node-groups with the desired version. This is best effort
    // only, since clusters could be created and deleted at will.
    int64 limit = 3 [(value) = ">=0"];

    enum Status {
        STATUS_UNSPECIFIED = 0;
        MIGRATING = 1;
        NO_VALID_TARGETS = 2;
    }
    Status status = 4;

    message MasterUpgradeStates {
        int64 upgrading = 1;
        int64 can_upgrade_now = 2;
        int64 not_now = 3;
        int64 actual = 4;
        int64 invalid = 5;
    }
    MasterUpgradeStates master_upgrade_states = 5;
}

message UpsertMasterMigrationRequest {
    // release_channel is the primary key of the migration table: if a migration for the
    // release_channel exists, its parameters (desired_version and limit) are replaced
    ReleaseChannel release_channel = 1 [(required) = true];
    Version desired_version = 3 [(required) = true];
    int64 limit = 4 [(value) = ">=0"];
}

message ListMasterMigrationRequest {}

message ListMasterMigrationResponse {
    repeated MasterMigration migrations = 1;
}

message DeleteMasterMigrationRequest {
    ReleaseChannel release_channel = 1 [(required) = true];
}
