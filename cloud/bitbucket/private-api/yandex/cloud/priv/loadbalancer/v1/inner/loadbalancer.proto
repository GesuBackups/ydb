syntax = "proto3";

package yandex.cloud.priv.loadbalancer.v1.inner;

import "yandex/cloud/priv/validation.proto";

option go_package = "a.yandex-team.ru/cloud/bitbucket/private-api/yandex/cloud/priv/loadbalancer/v1/inner;loadbalancer";

// LoadbalancerInternalService.
service LoadbalancerInternalService {
  rpc GetForwardingGroup (GetForwardingGroupRequest) returns (ForwardingGroup);
  rpc UpsertForwardingGroup (UpsertForwardingGroupRequest) returns (UpsertForwardingGroupResponse);
  rpc DeleteForwardingGroup (DeleteForwardingGroupRequest) returns (DeleteForwardingGroupResponse);

  rpc AddTargets (AddTargetsRequest) returns (AddTargetsResponse);
  rpc RemoveTargets (RemoveTargetsRequest) returns (RemoveTargetsResponse);

  rpc GetForwardingGroupRules (GetForwardingGroupRulesRequest) returns (GetForwardingGroupRulesResponse);
  rpc ReplaceForwardingGroupRules (ReplaceForwardingGroupRulesRequest) returns (ReplaceForwardingGroupRulesResponse);
  rpc DeleteForwardingGroupRules (DeleteForwardingGroupRulesRequest) returns (DeleteForwardingGroupRulesResponse);
}

message ForwardingGroup {
  message LbOptions {
    string health_check_group_id = 1;
    repeated string feature_flags = 2;
  }

  message Target {
    string zone_id = 1;
    string address = 2;
    int64 block_size = 3 [(value) = "0-128"]; // NOTE: For quasi addresses, value must be valid (block size of ipv4 rip + 96).
  }

  message Listener {
    string address = 1;
    int64 port = 2;
    int64 protocol = 3;
  }

  string id = 1;
  repeated Listener listeners = 2;
  repeated Target targets = 3;

  oneof options {
    LbOptions lb_options = 4;
  }
}

message ForwardingRule {
  message Address {
    string address = 1;
    int64 port = 2 [(value) = "1-65535"];
    int64 block_size = 3 [(value) = "0-128"]; // NOTE: For quasi addresses, value must be valid (block size of ipv4 rip + 96).
  }
  string zone_id = 1;
  int64 protocol = 2;
  Address source = 3;
  Address destination = 4;
}

message GetForwardingGroupRequest {
  string id = 1;
}

message UpsertForwardingGroupRequest {
  string id = 1;
  repeated ForwardingGroup.Listener listeners = 2 [(size) = ">=1"];
  repeated ForwardingGroup.Target targets = 3 [(size) = ">=1"];

  oneof options {
    option (exactly_one) = true;

    ForwardingGroup.LbOptions lb_options = 4;
  }
}

message DeleteForwardingGroupRequest {
  string id = 1;
}

message GetForwardingGroupRulesRequest {
  string forwarding_group_id = 1;
}

message ReplaceForwardingGroupRulesRequest {
  string forwarding_group_id = 1;
  repeated ForwardingRule forwarding_rules = 2 [(size) = ">=1"];

  oneof options {
    option (exactly_one) = true;

    ForwardingGroup.LbOptions lb_options = 3;
  }
}

message DeleteForwardingGroupRulesRequest {
  string forwarding_group_id = 1;
  repeated ForwardingRule forwarding_rules = 2 [(size) = ">=1"];
}

message UpsertForwardingGroupResponse {}

message DeleteForwardingGroupResponse {}

message AddTargetsRequest {
  string forwarding_group_id = 1;
  repeated ForwardingGroup.Target targets = 2 [(size) = ">=1"];
}

message AddTargetsResponse {}

message RemoveTargetsRequest {
  string forwarding_group_id = 1;
  repeated ForwardingGroup.Target targets = 2 [(size) = ">=1"];
}

message RemoveTargetsResponse {}

message GetForwardingGroupRulesResponse {
  repeated ForwardingRule forwarding_rules = 1;
}

message ReplaceForwardingGroupRulesResponse {
}

message DeleteForwardingGroupRulesResponse {
}
