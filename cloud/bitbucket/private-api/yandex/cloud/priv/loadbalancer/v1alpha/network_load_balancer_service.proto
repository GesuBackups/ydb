syntax = "proto3";

package yandex.cloud.priv.loadbalancer.v1alpha;

import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";
import "yandex/cloud/api/operation.proto";
import "yandex/cloud/priv/validation.proto";
import "yandex/cloud/priv/operation/operation.proto";
import "yandex/cloud/priv/loadbalancer/v1alpha/network_load_balancer.proto";

option go_package = "a.yandex-team.ru/cloud/bitbucket/private-api/yandex/cloud/priv/loadbalancer/v1alpha;loadbalancer";
option java_outer_classname = "PNLBS";

service NetworkLoadBalancerService {
  rpc Get (GetNetworkLoadBalancerRequest) returns (NetworkLoadBalancer) {
    option (google.api.http) = { get: "/compute/v1alpha/networkLoadBalancers/{network_load_balancer_id}" };
  }

  rpc List (ListNetworkLoadBalancersRequest) returns (ListNetworkLoadBalancersResponse) {
    option (google.api.http) = { get: "/compute/v1alpha/networkLoadBalancers" };
  }

  rpc Create (CreateNetworkLoadBalancerRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/compute/v1alpha/networkLoadBalancers" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "CreateNetworkLoadBalancerMetadata"
      response: "NetworkLoadBalancer"
    };
  }

  rpc Update (UpdateNetworkLoadBalancerRequest) returns (operation.Operation) {
    option (google.api.http) = { patch: "/compute/v1alpha/networkLoadBalancers/{network_load_balancer_id}" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "UpdateNetworkLoadBalancerMetadata"
      response: "NetworkLoadBalancer"
    };
  }

  rpc Delete (DeleteNetworkLoadBalancerRequest) returns (operation.Operation) {
    option (google.api.http) = { delete: "/compute/v1alpha/networkLoadBalancers/{network_load_balancer_id}" };
    option (yandex.cloud.api.operation) = {
      metadata: "DeleteNetworkLoadBalancerMetadata"
      response: "google.protobuf.Empty"
    };
  }

  // state

  rpc Start (StartNetworkLoadBalancerRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/compute/v1alpha/networkLoadBalancers/{network_load_balancer_id}/start" };
    option (yandex.cloud.api.operation) = {
      metadata: "StartNetworkLoadBalancerMetadata"
      response: "google.protobuf.Empty"
    };
  }

  rpc Stop (StopNetworkLoadBalancerRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/compute/v1alpha/networkLoadBalancers/{network_load_balancer_id}/stop" };
    option (yandex.cloud.api.operation) = {
      metadata: "StopNetworkLoadBalancerMetadata"
      response: "google.protobuf.Empty"
    };
  }

  // targets

  rpc AttachTargetGroup (AttachTargetGroupRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/compute/v1alpha/networkLoadBalancers/{network_load_balancer_id}/attachTargetGroup" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "AttachTargetGroupMetadata"
      response: "NetworkLoadBalancer"
    };
  }

  rpc DetachTargetGroup (DetachTargetGroupRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/compute/v1alpha/networkLoadBalancers/{network_load_balancer_id}/detachTargetGroup" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "DetachTargetGroupMetadata"
      response: "NetworkLoadBalancer"
    };
  }

  rpc GetTargetStates (GetTargetStatesRequest) returns (GetTargetStatesResponse) {
    option (google.api.http) = { get: "/compute/v1alpha/networkLoadBalancers/{network_load_balancer_id}/getTargetStates" };
  }

  // listeners

  rpc AddListener (AddListenerRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/compute/v1alpha/networkLoadBalancers/{network_load_balancer_id}/addListener" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "AddListenerMetadata"
      response: "NetworkLoadBalancer"
    };
  }

  rpc RemoveListener (RemoveListenerRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/compute/v1alpha/networkLoadBalancers/{network_load_balancer_id}/removeListener" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "RemoveListenerMetadata"
      response: "NetworkLoadBalancer"
    };
  }

  // operations

  rpc ListOperations (ListNetworkLoadBalancerOperationsRequest) returns (ListNetworkLoadBalancerOperationsResponse) {
    option (google.api.http) = { get: "/compute/v1alpha/networkLoadBalancers/{network_load_balancer_id}/operations" };
  }
}

message GetNetworkLoadBalancerRequest {
  string network_load_balancer_id = 1 [(length) = "<=50"];
}

message ListNetworkLoadBalancersRequest {
  string folder_id = 1 [(required) = true, (length) = "<=50"];
  int64 page_size = 2 [(value) = "0-1000"];
  string page_token = 3 [(length) = "<=100"];
  string filter = 4 [(length) = "<=1000"];
}

message ListNetworkLoadBalancersResponse {
  repeated NetworkLoadBalancer network_load_balancers = 1;
  string next_page_token = 2;
}

message CreateNetworkLoadBalancerRequest {
  string folder_id = 1 [(required) = true, (length) = "<=50"];
  string name = 2 [(pattern) = "|[a-z][-a-z0-9]{1,61}[a-z0-9]"];
  string description = 3 [(length) = "<=256"];
  map<string, string> labels = 4 [(priv.size) = "<=64", (length) = "<=63", (pattern) = "[-_0-9a-z]*", (map_key).length = "1-63", (map_key).pattern = "[a-z][-_0-9a-z]*"];

  string region_id = 5 [(required) = true, (length) = "<=50"];
  NetworkLoadBalancer.Type type = 6 [(required) = true];

  repeated ListenerSpec listener_specs = 7 [(size) = "<=10"];

  // for now we accept only one target_group per NetworkLoadBalancer
  repeated AttachedTargetGroup attached_target_groups = 8 [(size) = "<=1"];
}

message CreateNetworkLoadBalancerMetadata {
  string network_load_balancer_id = 1;
}

message UpdateNetworkLoadBalancerRequest {
  string network_load_balancer_id = 1 [(required) = true, (length) = "<=50"];
  google.protobuf.FieldMask update_mask = 2;

  string name = 3 [(pattern) = "|[a-z][-a-z0-9]{1,61}[a-z0-9]"];
  string description = 4 [(length) = "<=256"];
  map<string, string> labels = 5 [(priv.size) = "<=64", (length) = "<=63", (pattern) = "[-_0-9a-z]*", (map_key).length = "1-63", (map_key).pattern = "[a-z][-_0-9a-z]*"];

  repeated ListenerSpec listener_specs = 6 [(size) = "<=10"];

  // for now we accept only one target_group per NetworkLoadBalancer
  repeated AttachedTargetGroup attached_target_groups = 7 [(size) = "<=1"];
}

message UpdateNetworkLoadBalancerMetadata {
  string network_load_balancer_id = 1;
}

message DeleteNetworkLoadBalancerRequest {
  string network_load_balancer_id = 1 [(required) = true, (length) = "<=50"];
}

message DeleteNetworkLoadBalancerMetadata {
  string network_load_balancer_id = 1;
}

message StartNetworkLoadBalancerRequest {
  string network_load_balancer_id = 1 [(required) = true, (length) = "<=50"];
}

message StartNetworkLoadBalancerMetadata {
  string network_load_balancer_id = 1;
}

message StopNetworkLoadBalancerRequest {
  string network_load_balancer_id = 1 [(required) = true, (length) = "<=50"];
}

message StopNetworkLoadBalancerMetadata {
  string network_load_balancer_id = 1;
}

message AttachTargetGroupRequest {
  string network_load_balancer_id = 1 [(required) = true, (length) = "<=50"];
  AttachedTargetGroup attached_target_group = 2 [(required) = true];
}

message AttachTargetGroupMetadata {
  string network_load_balancer_id = 1;
  string target_group_id = 2;
}

message DetachTargetGroupRequest {
  string network_load_balancer_id = 1 [(required) = true, (length) = "<=50"];
  string target_group_id = 2 [(required) = true, (length) = "<=50"];
}

message DetachTargetGroupMetadata {
  string network_load_balancer_id = 1;
  string target_group_id = 2;
}

message AddListenerRequest {
  string network_load_balancer_id = 1 [(required) = true, (length) = "<=50"];
  ListenerSpec listener_spec = 2 [(required) = true];
}

message AddListenerMetadata {
  string network_load_balancer_id = 1;
}

message RemoveListenerRequest {
  string network_load_balancer_id = 1 [(required) = true, (length) = "<=50"];
  string address = 2 [(required) = true, (length) = "<=50"];
  Listener.Protocol protocol = 3 [(required) = true];
  int64 port = 4 [(value) = "1-65535"];
}

message RemoveListenerMetadata {
  string network_load_balancer_id = 1;
}

message ListNetworkLoadBalancerOperationsRequest {
  string network_load_balancer_id = 1 [(required) = true, (length) = "<=50"];
  int64 page_size = 2 [(value) = "0-1000"];
  string page_token = 3 [(length) = "<=100"];
}

message ListNetworkLoadBalancerOperationsResponse {
  repeated operation.Operation operations = 1;
  string next_page_token = 2;
}

message GetTargetStatesRequest {
  string network_load_balancer_id = 1 [(length) = "<=50"];
  string target_group_id = 2 [(length) = "<=50"];
}

message GetTargetStatesResponse {
  repeated TargetState target_states = 1;
}

message ExternalAddressSpec {
  string address = 1;
  IpVersion ip_version = 2;
  bool yandex_only = 3;
}

message InternalAddressSpec {
  string address = 1;
  string subnet_id = 2;
  IpVersion ip_version = 3;
}

message ListenerSpec {
  int64 port = 1 [(value) = "1-65535"];
  Listener.Protocol protocol = 2 [(required) = true];

  oneof address {
    ExternalAddressSpec external_address_spec = 3;
    InternalAddressSpec internal_address_spec = 4;
  }
  int64 target_port = 5 [(value) = "0-65535"];
}
