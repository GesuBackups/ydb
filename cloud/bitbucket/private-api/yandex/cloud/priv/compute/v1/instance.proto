syntax = "proto3";

package yandex.cloud.priv.compute.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "yandex/cloud/priv/compute/v1/maintenance.proto";
import "yandex/cloud/priv/compute/v1/os.proto";
import "yandex/cloud/priv/compute/v1/validation.proto";
import "yandex/cloud/priv/sensitive.proto";

option go_package = "a.yandex-team.ru/cloud/bitbucket/private-api/yandex/cloud/priv/compute/v1;compute";
option java_outer_classname = "PN";

message Instance {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    PROVISIONING = 1;
    RUNNING = 2;
    STOPPING = 3;
    STOPPED = 4;
    STARTING = 5;
    RESTARTING = 6;
    UPDATING = 7;
    ERROR = 8;
    CRASHED = 9;
    DELETING = 10;
  }

  string id = 1;
  string folder_id = 2;
  google.protobuf.Timestamp created_at = 3;
  string name = 4;
  string description = 5;
  map<string, string> labels = 6;

  string zone_id = 7;

  string platform_id = 8;
  Resources resources = 9;

  Status status = 10;

  map<string, string> metadata = 11 [(sensitive) = true, (sensitive_type) = SENSITIVE_CRC];

  AttachedDisk boot_disk = 12;
  repeated AttachedDisk secondary_disks = 13;

  repeated NetworkInterface network_interfaces = 14;
  string hostname = 15;
  string fqdn = 16; // output only

  SchedulingPolicy scheduling_policy = 17;

  string service_account_id = 18;
  NetworkSettings network_settings = 19;
  PlacementPolicy placement_policy = 20;

  // ID of the dedicated host group that the instance belongs to.
  string host_group_id = 21;
  // ID of the dedicated host that the instance belongs to.
  string host_id = 22;

  repeated AttachedFilesystem filesystems = 23;
  repeated AttachedLocalDisk local_disks = 25;

  // Private properties

  // Action to take on guest panic (not public yet, but will be when we fully switch to Go Compute Node).
  GuestPanicPolicy guest_panic_policy = 24;

  GPUSettings gpu_settings = 26;

  // Behaviour on maintenance events
  MaintenancePolicy maintenance_policy = 27;
  // Time between notification via metadata service and maintenance
  google.protobuf.Duration maintenance_grace_period = 28;

  MetadataOptions metadata_options = 29;

  repeated UnderlayNetwork underlay_networks = 100;

  HypervisorType hypervisor_type = 102;
  int64 nvme_disks = 103;
  bool nested_virtualization = 105;
  bool disable_seccomp = 106;
  PciTopologyId pci_topology_id = 107;

  // Hostname where instance is running (private property)
  string compute_node = 108;

  // Deprecated fields
  // string instance_group_id = 101;
  // InstancePlacementRestrictions placement = 104;
}

message Resources {
  int64 memory = 1;
  int64 cores = 2;
  int64 core_fraction = 3;
  int64 gpus = 4;
  int64 sockets = 5;

  int64 nvme_disks = 100;
}

// network disks

message AttachedDisk {
  enum Mode {
    MODE_UNSPECIFIED = 0;
    READ_ONLY = 1;
    READ_WRITE = 2;
  }

  enum Status {
    STATUS_UNSPECIFIED = 0;
    ATTACHING = 1;
    ATTACHED = 2;
    DETACHING = 3;
    DETACH_ERROR = 4;
  }

  message LinearIoRetryPolicy {
    // Whole request timeout
    google.protobuf.Duration request_timeout = 1;
    // Timeout on each retry within request
    google.protobuf.Duration attempt_timeout = 2;
    // Value to increment attempt_timeout on each retry
    google.protobuf.Duration attempt_timeout_increment = 3;
  }

  Mode mode = 1;
  string device_name = 2;
  bool auto_delete = 3;
  string disk_id = 4;
  Status status = 5;
  oneof io_retry_policy {
    LinearIoRetryPolicy linear_io_retry_policy = 6;
  }

  // Private fields

  repeated string product_ids = 100;
  Os os = 101;
  string backend = 102;
}

// local disks

message AttachedLocalDisk {
  int64 size = 1;
  string device_name = 2;
}

// filesystem

message AttachedFilesystem {
  enum Mode {
    MODE_UNSPECIFIED = 0;
    READ_ONLY = 1;
    READ_WRITE = 2;
  }

  enum Status {
    STATUS_UNSPECIFIED = 0;
    ATTACHING = 1;
    ATTACHED = 2;
    DETACHING = 3;
    DETACH_ERROR = 4;
  }

  Mode mode = 1;
  string device_name = 2;
  string filesystem_id = 3;
  Status status = 4;

  // Private fields
}

// network interfaces

message NetworkInterface {
  // [Output Only] The index of the network interface, generated by the server, 0,1,2... etc.
  string index = 1;

  string mac_address = 2;

  string subnet_id = 3;
  PrimaryAddress primary_v4_address = 4;
  PrimaryAddress primary_v6_address = 5;
  repeated string security_group_ids = 6;
}

message PrimaryAddress {
  string address = 1;
  string address_id = 3;
  OneToOneNat one_to_one_nat = 2;
  repeated string additional_fqdns = 4;
  repeated DnsRecord dns_records = 5;
}

message OneToOneNat {
  string address = 1;
  string address_id = 3;
  IpVersion ip_version = 2;
  repeated DnsRecord dns_records = 5;
}

message DnsRecord {
  string fqdn = 1;
  string dns_zone_id = 2;
  int64 ttl = 3;
  bool ptr = 4;
}

enum IpVersion {
  IP_VERSION_UNSPECIFIED = 0;
  IPV4 = 1;
  IPV6 = 2;
}

message UnderlayNetwork {
  string network_name = 1;
  string mac_address = 2;
  PrimaryAddress primary_address = 3 [deprecated = true];

  string ipv4_address = 4;
  repeated DnsRecord ipv4_dns_records = 5;

  string ipv6_address = 6;
  repeated DnsRecord ipv6_dns_records = 7;
}

message SchedulingPolicy {
  bool preemptible = 1;

  // internal fields
  bool disable_auto_recovery = 2;
  bool deny_deallocation = 3;
  bool start_without_compute = 4;
  google.protobuf.Duration preemption_deadline = 5 [(valid) = "seconds:1"];
  google.protobuf.Duration termination_grace_period = 6 [(valid) = "seconds:1,1800"];
  bool service = 7;
}

enum HypervisorType {
  HYPERVISOR_TYPE_UNSPECIFIED = 0;
  QEMU = 1;
  SERVERLESS = 2;
}

enum PciTopologyId {
  PCI_TOPOLOGY_ID_UNSPECIFIED = 0;
  // This is initial compute topology. Creation of new instances with this topo is not available.
  V1 = 1;
  V2 = 2;
  // This topology will be available only for internal usage
  K8S = 3;
}

message NetworkSettings {
  enum Type {
    TYPE_UNSPECIFIED = 0;
    STANDARD = 1;
    SOFTWARE_ACCELERATED = 2;
    HARDWARE_ACCELERATED = 3;
  }

  Type type = 1;

  // private fields

  string backend = 100 [(valid) = "network_backend"];
  int64 tx_queue_len = 101 [(value) = "1000-120000"];
}

message PlacementPolicy {
  // Affinitity definition
  message HostAffinityRule {
    enum Operator {
      OPERATOR_UNSPECIFIED = 0;
      IN = 1;
      NOT_IN = 2;
    }

    // Affinity label or one of reserved values - 'yc.hostId', 'yc.hostGroupId'
    string key = 1 [(valid) = "affinity_key", (required) = true];
    // Include or exclude action
    Operator op = 2;
    // Affinity value or host ID or host group ID
    repeated string values = 3 [(valid) = "affinity_value", (required) = true, (length) = "1-1000"];
  }

  // Identifier of placement group
  string placement_group_id = 1 [(valid) = "resource_id"];
  // List of affinity rules. Scheduler will attempt to allocate instances according to order of rules.
  repeated HostAffinityRule host_affinity_rules = 2 [(length) = "<=10", (required) = true];

  repeated string compute_nodes = 100 [(valid) = "hostname", (length) = "<=1000"];
  string host_group = 101 [(valid) = "hostgroup"];
}

enum GuestPanicPolicy {
  GUEST_PANIC_POLICY_UNSPECIFIED = 0;

  // Crash the instance (the default).
  CRASH = 1;

  // Let the guest OS handle the crash and do the recovery.
  IGNORE = 2;

  // The guest will be paused and you can contact support to dump guest memory.
  PAUSE = 3;
}

message GPUSettings {
  // User can select only one Interconnect network. We have no plans to allow
  // multiple interconnect networks both for public and private users.
  string interconnect_network_id = 1 [(valid) = "resource_id"];
}

message MetadataOptions {
  // Enabled access to GCE flavored metadata
  MetadataOption gce_http_endpoint = 1;
  // Enabled access to AWS flavored metadata (IMDSv1)
  MetadataOption aws_v1_http_endpoint = 2;
  // Enabled access to IAM credentials with GCE flavored metadata
  MetadataOption gce_http_token = 3;
  // Enabled access to IAM credentials with AWS flavored metadata (IMDSv1)
  MetadataOption aws_v1_http_token = 4;
}

enum MetadataOption {
  METADATA_OPTION_UNSPECIFIED = 0;

  // Option is enabled
  ENABLED = 1;

  // Option is disabled
  DISABLED = 2;
}
