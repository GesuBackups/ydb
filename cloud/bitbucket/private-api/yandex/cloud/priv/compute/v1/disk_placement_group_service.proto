syntax = "proto3";

package yandex.cloud.priv.compute.v1;

import "google/protobuf/field_mask.proto";

import "yandex/cloud/api/operation.proto";
import "yandex/cloud/priv/compute/v1/disk.proto";
import "yandex/cloud/priv/compute/v1/disk_placement_group.proto";
import "yandex/cloud/priv/compute/v1/validation.proto";
import "yandex/cloud/priv/operation/operation.proto";
import "yandex/cloud/priv/reference/reference.proto";

option go_package = "a.yandex-team.ru/cloud/bitbucket/private-api/yandex/cloud/priv/compute/v1;compute";
option java_outer_classname = "DPPS";

// A set of methods for managing DiskPlacementGroup resources.
service DiskPlacementGroupService {
  // Returns the specified placement group.
  rpc Get (GetDiskPlacementGroupRequest) returns (DiskPlacementGroup);

  // Retrieves the list of placement groups in the specified folder.
  rpc List (ListDiskPlacementGroupsRequest) returns (ListDiskPlacementGroupsResponse);

  // Creates a placement group in the specified folder.
  rpc Create (CreateDiskPlacementGroupRequest) returns (operation.Operation) {
    option (yandex.cloud.api.operation) = {
      metadata: "CreateDiskPlacementGroupMetadata"
      response: "DiskPlacementGroup"
    };
  }

  // Updates the specified placement group.
  rpc Update (UpdateDiskPlacementGroupRequest) returns (operation.Operation) {
    option (yandex.cloud.api.operation) = {
      metadata: "UpdateDiskPlacementGroupMetadata"
      response: "DiskPlacementGroup"
    };
  }

  // Deletes the specified placement group.
  rpc Delete (DeleteDiskPlacementGroupRequest) returns (operation.Operation) {
    option (yandex.cloud.api.operation) = {
      metadata: "DeleteDiskPlacementGroupMetadata"
      response: "google.protobuf.Empty"
    };
  }

  // Lists disks for the specified placement group.
  rpc ListDisks (ListDiskPlacementGroupDisksRequest) returns (ListDiskPlacementGroupDisksResponse);

  // Lists operations for the specified placement group.
  rpc ListOperations (ListDiskPlacementGroupOperationsRequest) returns (ListDiskPlacementGroupOperationsResponse);

  rpc UpdateReferences (UpdateDiskPlacementGroupReferencesRequest) returns (operation.Operation) {
    option (yandex.cloud.api.operation) = {
      metadata: "UpdateDiskPlacementGroupReferencesMetadata"
      response: "UpdateDiskPlacementGroupReferencesResponse"
    };
  }
  rpc ListReferences (ListDiskPlacementGroupReferencesRequest) returns (ListDiskPlacementGroupReferencesResponse);
}

message GetDiskPlacementGroupRequest {
  // ID of the placement group to return.
  // To get the placement group ID, use [DiskPlacementGroupService.List] request.
  string disk_placement_group_id = 1 [(valid) = "resource_id", (required) = true];
}

message ListDiskPlacementGroupsRequest {
  // ID of the folder to list placement groups in.
  // To get the folder ID, use [yandex.cloud.resourcemanager.v1.FolderService.List] request.
  string folder_id = 1 [(valid) = "resource_id", (required) = true];

  // The maximum number of results per page to return. If the number of available
  // results is larger than [page_size],
  // the service returns a [ListDiskPlacementGroupsResponse.next_page_token]
  // that can be used to get the next page of results in subsequent list requests.
  int64 page_size = 2 [(valid) = "page_size"];

  // Page token. To get the next page of results,
  // set [page_token] to the [ListDiskPlacementGroupsResponse.next_page_token]
  // returned by a previous list request.
  string page_token = 3 [(valid) = "page_token"];

  // A filter expression that filters resources listed in the response.
  // Currently you can use filtering only on the [DiskPlacementGroup.name] field.
  string filter = 4;

  // By which column the listing should be ordered and in which direction,
  // format is "createdAt desc". "id asc" if omitted.
  string order_by = 5 [(valid) = "order_by"];
}

message ListDiskPlacementGroupsResponse {
  // Lists placement groups for the specified folder.
  repeated DiskPlacementGroup disk_placement_groups = 1;

  // This token allows you to get the next page of results for list requests. If the number of results
  // is larger than [ListDiskPlacementGroupsRequest.page_size], use
  // [next_page_token] as the value
  // for the [ListDiskPlacementGroupsRequest.page_token] query parameter
  // in the next list request. Each subsequent list request will have its own
  // [next_page_token] to continue paging through the results.
  string next_page_token = 2;
}

message CreateDiskPlacementGroupRequest {
  // ID of the folder to create a placement group in.
  // To get the folder ID, use a [yandex.cloud.resourcemanager.v1.FolderService.List] request.
  string folder_id = 1 [(valid) = "resource_id", (required) = true];

  // Name of the placement group.
  string name = 2 [(valid) = "resource_name"];

  // Description of the placement group.
  string description = 3 [(valid) = "description"];

  // Resource labels as `key:value` pairs.
  map<string, string> labels = 4 [(valid) = "labels"];

  // ID of the availability zone where the placement group resides.
  // To get a list of available zones use the [yandex.cloud.compute.v1.ZoneService.List] request.
  string zone_id = 5 [(valid) = "zone_id", (required) = true];

  // Placement strategy.
  oneof placement_strategy {
    option (exactly_one) = true;

    // Distribute disks over distinct failure domains.
    DiskSpreadPlacementStrategy spread_placement_strategy = 6;
  }

  // private fields
  repeated reference.Reference references = 100 [(required) = true];
}

message CreateDiskPlacementGroupMetadata {
  // ID of the placement group that is being created.
  string disk_placement_group_id = 1;
}

message UpdateDiskPlacementGroupRequest {
  // ID of the placement group to update.
  // To get the placement group ID, use an [DiskPlacementGroupService.List] request.
  string disk_placement_group_id = 1 [(valid) = "resource_id", (required) = true];

  // Field mask that specifies which fields of the DiskPlacementGroup resource are going to be updated.
  google.protobuf.FieldMask update_mask = 2;

  // Name of the placement group.
  string name = 3 [(valid) = "resource_name"];

  // Description of the placement group.
  string description = 4 [(valid) = "description"];

  // Resource labels as `key:value` pairs.
  //
  // The existing set of `labels` is completely replaced by the provided set.
  map<string, string> labels = 5 [(valid) = "labels"];
}

message UpdateDiskPlacementGroupMetadata {
  // ID of the placement group that is being updated.
  string disk_placement_group_id = 1;
}

message DeleteDiskPlacementGroupRequest {
  // ID of the placement group to delete.
  // To get the placement group ID, use [DiskPlacementGroupService.List] request.
  string disk_placement_group_id = 1 [(valid) = "resource_id", (required) = true];
}

message DeleteDiskPlacementGroupMetadata {
  // ID of the placement group that is being deleted.
  string disk_placement_group_id = 1;
}

message ListDiskPlacementGroupDisksRequest {
  // ID of the placement group to list disks for.
  // To get the placement group ID, use [DiskPlacementGroupService.List] request.
  string disk_placement_group_id = 1 [(valid) = "resource_id", (required) = true];

  // The maximum number of results per page to return. If the number of available
  // results is larger than [page_size],
  // the service returns a [ListDiskPlacementGroupDisksResponse.next_page_token]
  // that can be used to get the next page of results in subsequent list requests.
  int64 page_size = 2 [(valid) = "page_size"];

  // Page token. To get the next page of results,
  // set [page_token] to the [ListDiskPlacementGroupDisksResponse.next_page_token]
  // returned by a previous list request.
  string page_token = 3 [(valid) = "page_token"];
}

message ListDiskPlacementGroupDisksResponse {
  // Lists disks for the specified placement group.
  repeated Disk disks = 1;

  // This token allows you to get the next page of results for list requests. If the number of results
  // is more than [ListDiskPlacementGroupInstancesRequest.page_size], use
  // [next_page_token] as the value
  // for the [ListDiskPlacementGroupInstancesRequest.page_token] query parameter
  // in the next list request. Each subsequent list request will have its own
  // [next_page_token] to continue paging through the results.
  string next_page_token = 2;
}

message ListDiskPlacementGroupOperationsRequest {
  // ID of the placement group to list operations for.
  // To get the placement group ID, use [DiskPlacementGroupService.List] request.
  string disk_placement_group_id = 1 [(valid) = "resource_id", (required) = true];

  // The maximum number of results per page to return. If the number of available
  // results is larger than [page_size], the service returns a [ListDiskPlacementGroupOperationsResponse.next_page_token]
  // that can be used to get the next page of results in subsequent list requests.
  int64 page_size = 2 [(valid) = "page_size"];

  // Page token. To get the next page of results, set [page_token] to the
  // [ListDiskPlacementGroupOperationsResponse.next_page_token] returned by a previous list request.
  string page_token = 3  [(valid) = "page_token"];
}

message ListDiskPlacementGroupOperationsResponse {
  // List of operations for the specified placement group.
  repeated operation.Operation operations = 1;

  // This token allows you to get the next page of results for list requests. If the number of results
  // is larger than [ListDiskPlacementGroupOperationsRequest.page_size], use the [next_page_token] as the value
  // for the [ListDiskPlacementGroupOperationsRequest.page_token] query parameter in the next list request.
  // Each subsequent list request will have its own [next_page_token] to continue paging through the results.
  string next_page_token = 2;
}

message UpdateDiskPlacementGroupReferencesRequest {
  string disk_placement_group_id = 1 [(valid) = "resource_id", (required) = true];
  repeated reference.Reference reference_additions = 2 [(required) = true];
  repeated reference.Reference reference_deletions = 3 [(required) = true];
}

message UpdateDiskPlacementGroupReferencesMetadata {
  string disk_placement_group_id = 1;
}

message UpdateDiskPlacementGroupReferencesResponse {
}

message ListDiskPlacementGroupReferencesRequest {
  string disk_placement_group_id = 1 [(valid) = "resource_id", (required) = true];
  int64 page_size = 2 [(valid) = "page_size"];
  string page_token = 3 [(valid) = "page_token"];
}

message ListDiskPlacementGroupReferencesResponse {
  repeated reference.Reference references = 1;
  string next_page_token = 2;
}
