syntax = "proto3";

package yandex.cloud.priv.compute.v1;

import "google/protobuf/field_mask.proto";
import "yandex/cloud/api/operation.proto";
import "yandex/cloud/priv/compute/v1/filesystem.proto";
import "yandex/cloud/priv/compute/v1/validation.proto";
import "yandex/cloud/priv/operation/operation.proto";
import "yandex/cloud/priv/reference/reference.proto";

option go_package = "a.yandex-team.ru/cloud/bitbucket/private-api/yandex/cloud/priv/compute/v1;compute";
option java_outer_classname = "PFSS";

service FilesystemService {

  rpc Get (GetFilesystemRequest) returns (Filesystem);

  rpc List (ListFilesystemsRequest) returns (ListFilesystemsResponse);

  rpc Create (CreateFilesystemRequest) returns (operation.Operation) {
    option (yandex.cloud.api.operation) = {
      metadata: "CreateFilesystemMetadata"
      response: "Filesystem"
    };
  }

  rpc Update (UpdateFilesystemRequest) returns (operation.Operation) {
    option (yandex.cloud.api.operation) = {
      metadata: "UpdateFilesystemMetadata"
      response: "Filesystem"
    };
  }

  rpc Delete (DeleteFilesystemRequest) returns (operation.Operation) {
    option (yandex.cloud.api.operation) = {
      metadata: "DeleteFilesystemMetadata"
      response: "google.protobuf.Empty"
    };
  }

  rpc ListOperations (ListFilesystemOperationsRequest) returns (ListFilesystemOperationsResponse);

  rpc UpdateReferences (UpdateFilesystemReferencesRequest) returns (operation.Operation) {
    option (yandex.cloud.api.operation) = {
      metadata: "UpdateFilesystemReferencesMetadata"
      response: "UpdateFilesystemReferencesResponse"
    };
  }

  rpc ListReferences (ListFilesystemReferencesRequest) returns (ListFilesystemReferencesResponse);
}

message GetFilesystemRequest {
  string filesystem_id = 1 [(valid) = "resource_id", (required) = true];
}

message ListFilesystemsRequest {
  string folder_id = 1 [(valid) = "resource_id", (required) = true];
  int64 page_size = 2 [(valid) = "page_size"];
  string page_token = 3 [(valid) = "page_token"];
  string filter = 4;

  // By which column the listing should be ordered and in which direction,
  // format is "createdAt desc". "id asc" if omitted.
  string order_by = 5 [(valid) = "order_by"];
}

message ListFilesystemsResponse {
  repeated Filesystem filesystems = 1;
  string next_page_token = 2;
}

message CreateFilesystemRequest {
  string folder_id = 1 [(valid) = "resource_id", (required) = true];
  string name = 2 [(valid) = "resource_name"];
  string description = 3 [(valid) = "description"];
  map<string, string> labels = 4 [(valid) = "labels"];
  string type_id = 5 [(valid) = "filesystem_type"];
  string zone_id = 6 [(valid) = "zone_id", (required) = true];
  int64 size = 7 [(required) = true];
  int64 block_size = 8;

  // private fields
  repeated reference.Reference references = 100 [(required) = true];
}

message CreateFilesystemMetadata {
  string filesystem_id = 1;
}

message UpdateFilesystemRequest {
  string filesystem_id = 1 [(valid) = "resource_id", (required) = true];
  google.protobuf.FieldMask update_mask = 2;

  string name = 3 [(valid) = "resource_name"];
  string description = 4 [(valid) = "description"];
  map<string, string> labels = 5 [(valid) = "labels"];
  int64 size = 6;
}

message UpdateFilesystemMetadata {
  string filesystem_id = 1;
}

message DeleteFilesystemRequest {
  string filesystem_id = 1 [(valid) = "resource_id", (required) = true];
}

message DeleteFilesystemMetadata {
  string filesystem_id = 1;
}

message ListFilesystemOperationsRequest {
  string filesystem_id = 1 [(valid) = "resource_id", (required) = true];
  int64 page_size = 2 [(valid) = "page_size"];
  string page_token = 3 [(valid) = "page_token"];
}

message ListFilesystemOperationsResponse {
  repeated operation.Operation operations = 1;
  string next_page_token = 2;
}

message UpdateFilesystemReferencesRequest {
  string filesystem_id = 1 [(valid) = "resource_id", (required) = true];
  repeated reference.Reference reference_additions = 2 [(required) = true];
  repeated reference.Reference reference_deletions = 3 [(required) = true];
}

message UpdateFilesystemReferencesMetadata {
  string filesystem_id = 1;
}

message UpdateFilesystemReferencesResponse {
}

message ListFilesystemReferencesRequest {
  string filesystem_id = 1 [(valid) = "resource_id", (required) = true];
  int64 page_size = 2 [(valid) = "page_size"];
  string page_token = 3 [(valid) = "page_token"];
}

message ListFilesystemReferencesResponse {
  repeated reference.Reference references = 1;
  string next_page_token = 2;
}
