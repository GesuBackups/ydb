syntax = "proto3";

package yandex.cloud.priv.compute.v1;

import "google/api/annotations.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/field_mask.proto";
import "yandex/cloud/api/operation.proto";
import "yandex/cloud/api/tools/options.proto";
import "yandex/cloud/priv/billing/v1/light_metric.proto";
import "yandex/cloud/priv/compute/v1/disk.proto";
import "yandex/cloud/priv/compute/v1/filesystem.proto";
import "yandex/cloud/priv/compute/v1/instance.proto";
import "yandex/cloud/priv/compute/v1/maintenance.proto";
import "yandex/cloud/priv/compute/v1/validation.proto";
import "yandex/cloud/priv/operation/operation.proto";
import "yandex/cloud/priv/reference/reference.proto";
import "yandex/cloud/priv/sensitive.proto";

option go_package = "a.yandex-team.ru/cloud/bitbucket/private-api/yandex/cloud/priv/compute/v1;compute";
option java_outer_classname = "PNS";

service InstanceService {
  rpc Get (GetInstanceRequest) returns (Instance) {
    option (google.api.http) = { get: "/compute/v1/instances/{instance_id}" };
  }

  rpc List (ListInstancesRequest) returns (ListInstancesResponse) {
    option (google.api.http) = { get: "/compute/v1/instances" };
  }

  rpc Create (CreateInstanceRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/compute/v1/instances" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "CreateInstanceMetadata"
      response: "Instance"
    };
  }

  rpc Update (UpdateInstanceRequest) returns (operation.Operation) {
    option (google.api.http) = { patch: "/compute/v1/instances/{instance_id}" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "UpdateInstanceMetadata"
      response: "Instance"
    };
  }

  rpc Delete (DeleteInstanceRequest) returns (operation.Operation) {
    option (google.api.http) = { delete: "/compute/v1/instances/{instance_id}" };
    option (yandex.cloud.api.operation) = {
      metadata: "DeleteInstanceMetadata"
      response: "google.protobuf.Empty"
    };
  }

  rpc UpdateMetadata (UpdateInstanceMetadataRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/compute/v1/instances/{instance_id}/updateMetadata" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "UpdateInstanceMetadataMetadata"
      response: "Instance"
    };
    option (yandex.cloud.api.tools.method).lint_skip.http_verb = true;
  }

  rpc GetSerialPortOutput (GetInstanceSerialPortOutputRequest) returns (GetInstanceSerialPortOutputResponse) {
    option (google.api.http) = { get: "/compute/v1/instances/{instance_id}/serialPortOutput" };
  }

  // state

  rpc Stop (StopInstanceRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/compute/v1/instances/{instance_id}/stop" body: "*"};
    option (yandex.cloud.api.operation) = {
      metadata: "StopInstanceMetadata"
      response: "google.protobuf.Empty"
    };
  }

  rpc Deallocate (DeallocateInstanceRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/compute/v1/instances/{instance_id}/forceDeallocate" body: "*"};
    option (yandex.cloud.api.operation) = {
      metadata: "DeallocateInstanceMetadata"
      response: "google.protobuf.Empty"
    };
  }

  rpc Start (StartInstanceRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/compute/v1/instances/{instance_id}/start" body: "*"};
    option (yandex.cloud.api.operation) = {
      metadata: "StartInstanceMetadata"
      response: "Instance"
    };
  }

  rpc Restart (RestartInstanceRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/compute/v1/instances/{instance_id}/restart" };
    option (yandex.cloud.api.operation) = {
      metadata: "RestartInstanceMetadata"
      response: "google.protobuf.Empty"
    };
  }

  // disks

  rpc AttachDisk (AttachInstanceDiskRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/compute/v1/instances/{instance_id}/attachDisk" body: "*"};
    option (yandex.cloud.api.operation) = {
      metadata: "AttachInstanceDiskMetadata"
      response: "Instance"
    };
  }

  rpc DetachDisk (DetachInstanceDiskRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/compute/v1/instances/{instance_id}/detachDisk" body: "*"};
    option (yandex.cloud.api.operation) = {
      metadata: "DetachInstanceDiskMetadata"
      response: "Instance"
    };
  }

  rpc ListDisks (ListInstanceDiskRequest) returns (ListInstanceDisksResponse);

  // filesystems

  rpc AttachFilesystem (AttachInstanceFilesystemRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/compute/v1/instances/{instance_id}/attachFilesystem" body: "*"};
    option (yandex.cloud.api.operation) = {
      metadata: "AttachInstanceFilesystemMetadata"
      response: "Instance"
    };
  }

  rpc DetachFilesystem (DetachInstanceFilesystemRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/compute/v1/instances/{instance_id}/detachFilesystem" body: "*"};
    option (yandex.cloud.api.operation) = {
      metadata: "DetachInstanceFilesystemMetadata"
      response: "Instance"
    };
  }

  rpc ListFilesystems (ListInstanceFilesystemRequest) returns (ListInstanceFilesystemsResponse);

  // net

  rpc AddOneToOneNat (AddInstanceOneToOneNatRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/compute/v1/instances/{instance_id}/addOneToOneNat" body: "*"};
    option (yandex.cloud.api.operation) = {
      metadata: "AddInstanceOneToOneNatMetadata"
      response: "Instance"
    };
  }

  rpc RemoveOneToOneNat (RemoveInstanceOneToOneNatRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/compute/v1/instances/{instance_id}/removeOneToOneNat" body: "*"};
    option (yandex.cloud.api.operation) = {
      metadata: "RemoveInstanceOneToOneNatMetadata"
      response: "Instance"
    };
  }

  rpc UpdateNetworkInterface (UpdateInstanceNetworkInterfaceRequest) returns (operation.Operation) {
    option (google.api.http) = { patch: "/compute/v1/instances/{instance_id}/updateNetworkInterface" body: "*"};
    option (yandex.cloud.api.operation) = {
      metadata: "UpdateInstanceNetworkInterfaceMetadata"
      response: "Instance"
    };
  }

  rpc UpdateUnderlayInterface (UpdateInstanceUnderlayInterfaceRequest) returns (operation.Operation) {
    option (google.api.http) = { patch: "/compute/v1/instances/{instance_id}/updateUnderlayInterface" body: "*"};
    option (yandex.cloud.api.operation) = {
      metadata: "UpdateInstanceUnderlayInterfaceMetadata"
      response: "Instance"
    };
  }

  rpc ListOperations (ListInstanceOperationsRequest) returns (ListInstanceOperationsResponse) {
    option (google.api.http) = { get: "/compute/v1/instances/{instance_id}/operations" };
  }

  rpc UpdateReferences (UpdateInstanceReferencesRequest) returns (operation.Operation) {
    option (yandex.cloud.api.operation) = {
      metadata: "UpdateInstanceReferencesMetadata"
      response: "UpdateInstanceReferencesResponse"
    };
  }

  rpc ListReferences (ListInstanceReferencesRequest) returns (ListInstanceReferencesResponse);

  rpc SimulateBillingMetrics (CreateInstanceRequest) returns (billing.v1.ConsoleLightMetricsListResponse);

  rpc SimulateMaintenanceEvent (SimulateInstanceMaintenanceEventRequest) returns (operation.Operation) {
      option (yandex.cloud.api.operation) = {
          metadata: "SimulateInstanceMaintenanceEventMetadata"
          response: "google.protobuf.Empty"
      };
  }

  // Evacuate instance from dead node
  rpc Evacuate(EvacuateInstanceRequest) returns (operation.Operation) {
      option (yandex.cloud.api.operation) = {
          metadata: "EvacuateInstanceMetadata"
          response: "Instance"
      };
  }

  // Migrate instance from node
  rpc Migrate(MigrateInstanceRequest) returns (operation.Operation) {
      option (yandex.cloud.api.operation) = {
          metadata: "MigrateInstanceMetadata"
          response: "Instance"
      };
  }

  // Move instance between folders
  rpc Move(MoveInstanceRequest) returns (operation.Operation) {
      option (yandex.cloud.api.operation) = {
          metadata: "MoveInstanceMetadata"
          response: "Instance"
      };
  }
}

enum InstanceView {
  option (cloud.api.tools.enumeration).lint_skip.unspecified_value = true;
  // Server response don't include metadata field
  BASIC = 0;

  // Full representation of the instance is returned in server response, including metadata.
  FULL = 1;
}

message GetInstanceRequest {
  string instance_id = 1 [(valid) = "resource_id", (required) = true];
  InstanceView view = 2;

  // Private fields

  google.protobuf.FieldMask field_mask = 100;
}

message ListInstancesRequest {
  enum View {
    option (cloud.api.tools.enumeration).lint_skip.unspecified_value = true;

    // Standard representation for API
    BASIC = 0;

    // Extended representation for UI with total disk size for each instance
    UI = 1;
  }

  string folder_id = 1 [(valid) = "resource_id", (required) = true];
  int64 page_size = 2 [(valid) = "page_size"];
  string page_token = 3 [(valid) = "page_token"];
  string filter = 4;

  // Deprecated field for transition period from REST to GRPC
  string name = 5 [(valid) = "resource_name"];

  // By which column the listing should be ordered and in which direction,
  // format is "createdAt desc". "id asc" if omitted.
  string order_by = 6 [(valid) = "order_by"];

  // Private fields

  View view = 100;
  google.protobuf.FieldMask field_mask = 101;
}

message ListInstancesResponse {
  repeated Instance instances = 1;
  string next_page_token = 2;
}

message CreateInstanceRequest {
  message UnderlayNetwork {
    string network_name = 1 [(required) = true];

    repeated DnsRecordSpec ipv4_dns_record_specs = 2;
    repeated DnsRecordSpec ipv6_dns_record_specs = 3;
  }

  string folder_id = 1 [(valid) = "resource_id", (required) = true];
  string name = 2 [(valid) = "resource_name"];
  string description = 3 [(valid) = "description"];
  map<string, string> labels = 4 [(valid) = "labels"];
  string zone_id = 5 [(valid) = "zone_id", (required) = true];
  string platform_id = 6 [(required) = true];
  ResourcesSpec resources_spec = 7 [(required) = true];
  map<string, string> metadata = 8 [(valid) = "metadata", (sensitive) = true, (sensitive_type) = SENSITIVE_CRC];

  AttachedDiskSpec boot_disk_spec = 9;
  repeated AttachedDiskSpec secondary_disk_specs = 10 [(required) = true];
  repeated AttachedFilesystemSpec filesystem_specs = 17;
  repeated AttachedLocalDiskSpec local_disk_specs = 19;

  repeated NetworkInterfaceSpec network_interface_specs = 11 [(required) = true];
  string hostname = 12 [(valid) = "hostname_lenient"];

  SchedulingPolicy scheduling_policy = 13;

  string service_account_id = 14 [(valid) = "resource_id"];
  NetworkSettings network_settings = 15;
  PlacementPolicy placement_policy = 16;

  // Action to take on guest panic (not public yet, but will be when we fully switch to Go Compute Node).
  GuestPanicPolicy guest_panic_policy = 18;

  GPUSettings gpu_settings = 20;

  // Behaviour on maintenance events
  MaintenancePolicy maintenance_policy = 21;
  // Time between notification via metadata service and maintenance
  google.protobuf.Duration maintenance_grace_period = 22 [(valid) = "seconds:1"];

  // Metadata access options
  MetadataOptions metadata_options = 23;

  // Private fields

  bool cauth = 100;
  repeated UnderlayNetwork underlay_networks = 101 [(required) = true];
  string fqdn = 102 [(valid) = "hostname"];
  HypervisorType hypervisor_type = 104;
  string internal_data_disk_id = 107 [(valid) = "internal_data_disk_id"];
  bool dry_run = 108;
  bool nested_virtualization = 109;
  bool disable_seccomp = 110;
  PciTopologyId pci_topology_id = 111;
  repeated reference.Reference references = 112 [(required) = true];

  // deprecated
  // string instance_group_id = 103;
  // int64 nvme_disks = 105;
  // InstancePlacementRestrictions placement = 106;
}

message CreateInstanceMetadata {
  string instance_id = 1;
  double progress_percentage = 2;
}

message UpdateInstanceRequest {
  string instance_id = 1 [(valid) = "resource_id", (required) = true];
  google.protobuf.FieldMask update_mask = 2;

  string name = 3 [(valid) = "resource_name"];
  string description = 4 [(valid) = "description"];
  map<string, string> labels = 5 [(valid) = "labels"];
  string platform_id = 6;
  ResourcesSpec resources_spec = 7;
  map<string, string> metadata = 8 [(valid) = "metadata", (sensitive) = true, (sensitive_type) = SENSITIVE_CRC];
  SchedulingPolicy scheduling_policy = 15;

  AttachedDiskSpec boot_disk_spec = 9;
  bool keep_auto_deleted_boot_disk = 16;

  string service_account_id = 12 [(valid) = "resource_id"];
  NetworkSettings network_settings = 13;
  GPUSettings gpu_settings = 18;
  PlacementPolicy placement_policy = 14;

  // Action to take on guest panic (not public yet, but will be when we fully switch to Go Compute Node).
  GuestPanicPolicy guest_panic_policy = 17;

  // Behaviour on maintenance events
  MaintenancePolicy maintenance_policy = 19;
  // Time between notification via metadata service and maintenance
  google.protobuf.Duration maintenance_grace_period = 20 [(valid) = "seconds:1"];

  // Metadata access options
  MetadataOptions metadata_options = 21;

  // unused
  // repeated AttachedDiskSpec secondary_disk_specs = 10;
  // repeated NetworkInterfaceSpec network_interface_specs = 11;
}

message UpdateInstanceMetadata {
  string instance_id = 1;
}

message DeleteInstanceRequest {
  string instance_id = 1 [(valid) = "resource_id", (required) = true];
  bool safe_delete = 2;
}

message DeleteInstanceMetadata {
  string instance_id = 1;
}

message GetInstanceSerialPortOutputRequest {
  string instance_id = 1 [(valid) = "resource_id", (required) = true];
  int64 port = 2 [(value) = "1-4"];
  //  int64 offset = 3;
}

message GetInstanceSerialPortOutputResponse {
  string contents = 1 [(sensitive) = true];
  //  int64 offset = 2;
  //  int64 next_offset = 3;
}

message UpdateInstanceMetadataRequest {
  string instance_id = 1 [(valid) = "resource_id", (required) = true];
  repeated string delete = 2 [(valid) = "metadata_key", (yandex.cloud.api.tools.field).lint_skip.all = true];
  map<string, string> upsert = 3 [(valid) = "metadata", (sensitive) = true];
}

message UpdateInstanceMetadataMetadata {
  string instance_id = 1;
}

// state

message StopInstanceRequest {
  string instance_id = 1 [(valid) = "resource_id", (required) = true];
  bool force = 2;
  google.protobuf.Duration termination_grace_period = 3 [(valid) = "seconds:1,1800"];
  string compute_node = 4;
}

message StopInstanceMetadata {
  string instance_id = 1;
}

message DeallocateInstanceRequest {
  string instance_id = 1 [(valid) = "resource_id", (required) = true];
  bool force = 2;
  bool ignore_suspicions = 3;
}

message DeallocateInstanceMetadata {
  string instance_id = 1;
}

message StartInstanceRequest {
  string instance_id = 1 [(valid) = "resource_id", (required) = true];
  bool override_force_deallocated = 2;
}

message StartInstanceMetadata {
  string instance_id = 1;
}

message RestartInstanceRequest {
  string instance_id = 1 [(valid) = "resource_id", (required) = true];
}

message RestartInstanceMetadata {
  string instance_id = 1;
}

message GuestStopInstanceMetadata {
  string instance_id = 1;
}

message PreemptInstanceMetadata {
  string instance_id = 1;
}

message CrashInstanceMetadata {
  string instance_id = 1;
}

// disks

message AttachInstanceDiskRequest {
  string instance_id = 1 [(valid) = "resource_id", (required) = true];
  AttachedDiskSpec attached_disk_spec = 2 [(required) = true];
}

message AttachInstanceDiskMetadata {
  string instance_id = 1;
  string disk_id = 2;
}

message DetachInstanceDiskRequest {
  string instance_id = 1 [(valid) = "resource_id", (required) = true];
  oneof disk {
    option (exactly_one) = true;
    string disk_id = 2 [(valid) = "resource_id"];
    string device_name = 3 [(valid) = "device_name"];
  }
}

message DetachInstanceDiskMetadata {
  string instance_id = 1;
  string disk_id = 2;
}

message ListInstanceDiskRequest {
  string instance_id = 1 [(valid) = "resource_id", (required) = true];
  int64 page_size = 2 [(valid) = "page_size"];
  string page_token = 3 [(valid) = "page_token"];
}

message ListInstanceDisksResponse {
  repeated Disk disks = 1;
  string next_page_token = 2;
}

// filesystems

message AttachInstanceFilesystemRequest {
  string instance_id = 1 [(valid) = "resource_id", (required) = true];
  AttachedFilesystemSpec attached_filesystem_spec = 2 [(required) = true];
}

message AttachInstanceFilesystemMetadata {
  string instance_id = 1;
  string filesystem_id = 2;
}

message DetachInstanceFilesystemRequest {
  string instance_id = 1 [(valid) = "resource_id", (required) = true];
  oneof filesystem {
    option (exactly_one) = true;
    string filesystem_id = 2 [(valid) = "resource_id"];
    string device_name = 3 [(valid) = "device_name"];
  }
}

message DetachInstanceFilesystemMetadata {
  string instance_id = 1;
  string filesystem_id = 2;
}

message ListInstanceFilesystemRequest {
  string instance_id = 1 [(valid) = "resource_id", (required) = true];
  int64 page_size = 2 [(valid) = "page_size"];
  string page_token = 3 [(valid) = "page_token"];
}

message ListInstanceFilesystemsResponse {
  repeated Filesystem filesystems = 1;
  string next_page_token = 2;
}

// net

message AddInstanceOneToOneNatRequest {
  string instance_id = 1 [(valid) = "resource_id", (required) = true];
  string network_interface_index = 2 [(required) = true];
  string internal_address = 3 [(valid) = "ip_address"];
  OneToOneNatSpec one_to_one_nat_spec = 4 [(required) = true];
}

message AddInstanceOneToOneNatMetadata {
  string instance_id = 1;
}

message RemoveInstanceOneToOneNatRequest {
  string instance_id = 1 [(valid) = "resource_id", (required) = true];
  string network_interface_index = 2 [(required) = true];
  string internal_address = 3 [(valid) = "ip_address"];
}

message RemoveInstanceOneToOneNatMetadata {
  string instance_id = 1;
}

message UpdateInstanceNetworkInterfaceRequest {
  string instance_id = 1 [(valid) = "resource_id", (required) = true];
  string network_interface_index = 2 [(required) = true];
  google.protobuf.FieldMask update_mask = 3;

  string subnet_id = 4 [(valid) = "resource_id"];
  PrimaryAddressSpec primary_v4_address_spec = 5;
  PrimaryAddressSpec primary_v6_address_spec = 6;
  repeated string security_group_ids = 7 [(valid) = "resource_id", (required) = true];
}

message UpdateInstanceNetworkInterfaceMetadata {
  string instance_id = 1;
  string network_interface_index = 2;
}

message UpdateInstanceUnderlayInterfaceRequest {
  string instance_id = 1 [(valid) = "resource_id", (required) = true];
  int64 underlay_interface_index = 2 [(value) = ">=0"];
  google.protobuf.FieldMask update_mask = 3;

  repeated DnsRecordSpec ipv4_dns_record_specs = 4;
  repeated DnsRecordSpec ipv6_dns_record_specs = 5;
}

message UpdateInstanceUnderlayInterfaceMetadata {
  string instance_id = 1;
  int64 underlay_interface_index = 2;
}

// maintenance

message SimulateInstanceMaintenanceEventRequest{
  string instance_id = 1 [(valid) = "resource_id", (required) = true];
}

message SimulateInstanceMaintenanceEventMetadata {
  string instance_id = 1;
}


//

message ListInstanceOperationsRequest {
  string instance_id = 1 [(valid) = "resource_id", (required) = true];
  int64 page_size = 2 [(valid) = "page_size"];
  string page_token = 3 [(valid) = "page_token"];
}

message ListInstanceOperationsResponse {
  repeated operation.Operation operations = 1;
  string next_page_token = 2;
}

message UpdateInstanceReferencesRequest {
  string instance_id = 1 [(valid) = "resource_id", (required) = true];
  repeated reference.Reference reference_additions = 2 [(required) = true];
  repeated reference.Reference reference_deletions = 3 [(required) = true];
}

message UpdateInstanceReferencesMetadata {
  string instance_id = 1;
}

message UpdateInstanceReferencesResponse {
}

message ListInstanceReferencesRequest {
  string instance_id = 1 [(valid) = "resource_id", (required) = true];
  int64 page_size = 2 [(valid) = "page_size"];
  string page_token = 3 [(valid) = "page_token"];
}

message ListInstanceReferencesResponse {
  repeated reference.Reference references = 1;
  string next_page_token = 2;
}

// specs

message ResourcesSpec {
  int64 memory = 1 [(required) = true, (value) = ">=1"];
  int64 cores = 2 [(required) = true, (value) = ">=1"];
  int64 core_fraction = 3 [(value) = "1-100"];
  int64 gpus = 4 [(value) = ">=1"];
  int64 nvme_disks = 5 [(value) = ">=1"];
}

message AttachedDiskSpec {
  enum Mode {
    MODE_UNSPECIFIED = 0;
    READ_ONLY = 1;
    READ_WRITE = 2;
  }

  message DiskSpec {
    string name = 1 [(valid) = "resource_name"];
    string description = 2 [(valid) = "description"];
    map<string, string> labels = 7 [(valid) = "labels"];
    string type_id = 3 [(valid) = "disk_type"];
    int64 size = 4 [(required) = true];
    int64 block_size = 8;
    DiskPlacementPolicy disk_placement_policy = 9;
    oneof source {
      string image_id = 5 [(valid) = "resource_id"];
      string snapshot_id = 6 [(valid) = "resource_id"];
    }
  }

  message LinearIoRetryPolicy {
    // Whole request timeout
    google.protobuf.Duration request_timeout = 1;
    // Timeout on each retry within request
    google.protobuf.Duration attempt_timeout = 2;
    // Value to increment attempt_timeout on each retry
    google.protobuf.Duration attempt_timeout_increment = 3;
  }

  Mode mode = 1;
  string device_name = 2 [(valid) = "device_name"];
  bool auto_delete = 3;

  oneof disk {
    option (exactly_one) = true;
    DiskSpec disk_spec = 4;
    string disk_id = 5 [(valid) = "resource_id"];
  }

  oneof io_retry_policy {
    LinearIoRetryPolicy linear_io_retry_policy = 6;
  }

}

message AttachedLocalDiskSpec {
  int64 size = 1 [(required) = true];
}

message AttachedFilesystemSpec {
  enum Mode {
    MODE_UNSPECIFIED = 0;
    READ_ONLY = 1;
    READ_WRITE = 2;
  }

  Mode mode = 1;
  string device_name = 2 [(valid) = "device_name"];

  string filesystem_id = 3 [(valid) = "resource_id"];
}

message NetworkInterfaceSpec {
  string subnet_id = 1 [(valid) = "resource_id"];
  PrimaryAddressSpec primary_v4_address_spec = 2;
  PrimaryAddressSpec primary_v6_address_spec = 3;
  repeated string security_group_ids = 4 [(valid) = "resource_id", (required) = true];
}

message PrimaryAddressSpec {
  string address = 1 [(valid) = "ip_address"]; // optional, manual set static internal IP
  OneToOneNatSpec one_to_one_nat_spec = 2;
  string address_id = 3 [(valid) = "resource_id"]; // optional, manual set static internal IP
  repeated string additional_fqdns = 4 [(length) = "<=32"];
  repeated DnsRecordSpec dns_record_specs = 6 [(length) = "<=32"];
}

message OneToOneNatSpec {
  IpVersion ip_version = 1; //only if address_id and address unspecified
  string address_id = 2 [(valid) = "resource_id"]; //set static IP
  string address = 3 [(valid) = "ip_address"]; //set static IP by value
  string ddos_protection_provider = 4;
  string outgoing_smtp_capability = 5;
  repeated DnsRecordSpec dns_record_specs = 6 [(length) = "<=32"];
}

message DnsRecordSpec {
  string fqdn = 1 [(required) = true]; // required: DNS record name (absolute, or relative to the DNS zone used)
  string dns_zone_id = 2; // optional, if not set, private zone used
  int64 ttl = 3 [(value) = "0-86400"]; // optional, 0-86400
  bool ptr = 4; // optional, set if PTR record required
}

message EvacuateInstanceRequest {
  string source_node = 1 [(valid) = "hostname", (required) = true];
  string instance_id = 2 [(valid) = "resource_id", (required) = true];
  bool skip_node_check = 3;   // ignore if host is reachable
  bool force = 4;             // evacuate not deallocatable instance
}

message EvacuateInstanceMetadata {
  string source_node = 1;
  string instance_id = 2;
  bool recoverable =3;
}

message MigrateInstanceRequest {
  string source_node = 1 [(valid) = "hostname", (required) = true];
  string instance_id = 2 [(valid) = "resource_id", (required) = true];
  repeated string target_nodes = 3 [(valid) = "hostname"];

  // allow offline migrate instances (stop/start)
  // that are not migratable
  bool allow_offline = 4;

  // only for tests, works if 'test_mode' is enabled
  string emulate_failure = 100;
}

message MigrateInstanceMetadata {
  string source_node = 1;
  string instance_id = 2;
}

message MoveInstanceRequest {
  string instance_id = 1 [(valid) = "resource_id", (required) = true];
  string destination_folder_id = 2 [(valid) = "resource_id", (required) = true];
}

message MoveInstanceMetadata {
  string instance_id = 1;
  string source_folder_id = 2;
  string destination_folder_id = 3;
}
