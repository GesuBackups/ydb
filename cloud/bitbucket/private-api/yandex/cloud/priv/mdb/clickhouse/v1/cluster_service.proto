syntax = "proto3";

package yandex.cloud.priv.mdb.clickhouse.v1;

import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "google/type/timeofday.proto";
import "yandex/cloud/api/operation.proto";
import "yandex/cloud/api/tools/options.proto";
import "yandex/cloud/priv/operation/operation.proto";
import "yandex/cloud/priv/sensitive.proto";
import "yandex/cloud/priv/validation.proto";
import "yandex/cloud/priv/mdb/clickhouse/v1/backup.proto";
import "yandex/cloud/priv/mdb/clickhouse/v1/cluster.proto";
import "yandex/cloud/priv/mdb/clickhouse/v1/database.proto";
import "yandex/cloud/priv/mdb/clickhouse/v1/user.proto";
import "yandex/cloud/priv/mdb/clickhouse/v1/config/clickhouse.proto";
import "yandex/cloud/priv/mdb/clickhouse/v1/maintenance.proto";

option go_package = "a.yandex-team.ru/cloud/bitbucket/private-api/yandex/cloud/priv/mdb/clickhouse/v1;clickhouse";
option java_outer_classname = "PCCS";

// A set of methods for managing ClickHouse clusters.
service ClusterService {
  // Returns the specified ClickHouse cluster.
  rpc Get (GetClusterRequest) returns (Cluster) {
    option (google.api.http) = { get: "/mdb/clickhouse/v1/clusters/{cluster_id}" };
  }

  // Retrieves a list of ClickHouse clusters.
  rpc List (ListClustersRequest) returns (ListClustersResponse) {
    option (google.api.http) = { get: "/mdb/clickhouse/v1/clusters" };
  }

  // Creates a ClickHouse cluster.
  rpc Create (CreateClusterRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/mdb/clickhouse/v1/clusters" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "CreateClusterMetadata"
      response: "Cluster"
    };
  }

  // Modifies the specified ClickHouse cluster.
  rpc Update (UpdateClusterRequest) returns (operation.Operation) {
    option (google.api.http) = { patch: "/mdb/clickhouse/v1/clusters/{cluster_id}" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "UpdateClusterMetadata"
      response: "Cluster"
    };
  }

  // Deletes the specified ClickHouse cluster.
  rpc Delete (DeleteClusterRequest) returns (operation.Operation) {
    option (google.api.http) = { delete: "/mdb/clickhouse/v1/clusters/{cluster_id}" };
    option (yandex.cloud.api.operation) = {
      metadata: "DeleteClusterMetadata"
      response: "google.protobuf.Empty"
    };
  }

  // Add ZooKeeper subcluster to the specififes ClickHouse cluster.
  rpc AddZookeeper (AddClusterZookeeperRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/mdb/clickhouse/v1/clusters/{cluster_id}:addZookeeper" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "AddClusterZookeeperMetadata"
      response: "Cluster"
    };
  }

  // Start the specified ClickHouse cluster.
  rpc Start (StartClusterRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/mdb/clickhouse/v1/clusters/{cluster_id}:start" };
    option (yandex.cloud.api.operation) = {
      metadata: "StartClusterMetadata"
      response: "Cluster"
    };
  }

  // Stop the specified ClickHouse cluster.
  rpc Stop (StopClusterRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/mdb/clickhouse/v1/clusters/{cluster_id}:stop" };
    option (yandex.cloud.api.operation) = {
      metadata: "StopClusterMetadata"
      response: "Cluster"
    };
  }

  // Moves the specified ClickHouse cluster to the specified folder.
  rpc Move (MoveClusterRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/mdb/clickhouse/v1/clusters/{cluster_id}:move" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "MoveClusterMetadata"
      response: "Cluster"
    };
  }

  // Create a backup for the specified ClickHouse cluster.
  rpc Backup (BackupClusterRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/mdb/clickhouse/v1/clusters/{cluster_id}:backup" };
    option (yandex.cloud.api.operation) = {
      metadata: "BackupClusterMetadata"
      response: "Cluster"
    };
  }

  // Creates a new ClickHouse cluster from the specified backup.
  rpc Restore (RestoreClusterRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/mdb/clickhouse/v1/clusters:restore" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "RestoreClusterMetadata"
      response: "Cluster"
    };
  }

  // Reschedule planned maintenance operation.
  rpc RescheduleMaintenance (RescheduleMaintenanceRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/mdb/clickhouse/v1/clusters/{cluster_id}:rescheduleMaintenance" body: "*"};
    option (yandex.cloud.api.operation) = {
      metadata: "RescheduleMaintenanceMetadata"
      response: "Cluster"
    };
  }

  // Returns logs for the specified ClickHouse cluster.
  // See the [Logs](/yandex-mdb-guide/concepts/logs.html) section in the developers guide for detailed logs description.
  rpc ListLogs (ListClusterLogsRequest) returns (ListClusterLogsResponse) {
    option (google.api.http) = { get: "/mdb/clickhouse/v1/clusters/{cluster_id}:logs" };
  }

  // Same as ListLogs but using server-side streaming. Also allows for 'tail -f' semantics.
  rpc StreamLogs (StreamClusterLogsRequest) returns (stream StreamLogRecord) {
    option (google.api.http) = { get: "/mdb/clickhouse/v1/clusters/{cluster_id}:stream_logs" };
    option (yandex.cloud.api.tools.method).lint_skip.http_verb = true;
  }

  rpc ListOperations (ListClusterOperationsRequest) returns (ListClusterOperationsResponse) {
    option (google.api.http) = { get: "/mdb/clickhouse/v1/clusters/{cluster_id}/operations" };
  }

  // Returns the list of available backups for the specified ClickHouse cluster.
  rpc ListBackups (ListClusterBackupsRequest) returns (ListClusterBackupsResponse) {
    option (google.api.http) = { get: "/mdb/clickhouse/v1/clusters/{cluster_id}/backups" };
  }

  // Retrieves a list of hosts.
  rpc ListHosts (ListClusterHostsRequest) returns (ListClusterHostsResponse) {
    option (google.api.http) = { get: "/mdb/clickhouse/v1/clusters/{cluster_id}/hosts" };
  }

  // Creates new hosts.
  rpc AddHosts (AddClusterHostsRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/mdb/clickhouse/v1/clusters/{cluster_id}/hosts:batchCreate" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "AddClusterHostsMetadata"
      response: "google.protobuf.Empty"
    };
  }

  // Updates the specified hosts.
  rpc UpdateHosts (UpdateClusterHostsRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/mdb/clickhouse/v1/clusters/{cluster_id}/hosts:batchUpdate" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "UpdateClusterHostsMetadata"
      response: "google.protobuf.Empty"
    };
    option (yandex.cloud.api.tools.method).lint_skip.http_verb = true;
  }

  // Deletes the specified host.
  rpc DeleteHosts (DeleteClusterHostsRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/mdb/clickhouse/v1/clusters/{cluster_id}/hosts:batchDelete" body: "*"};
    option (yandex.cloud.api.operation) = {
      metadata: "DeleteClusterHostsMetadata"
      response: "google.protobuf.Empty"
    };
    option (yandex.cloud.api.tools.method).lint_skip.http_verb = true;
  }

  // Returns the specified shard.
  rpc GetShard (GetClusterShardRequest) returns (Shard) {
    option (google.api.http) = { get: "/mdb/clickhouse/v1/clusters/{cluster_id}/shards/{shard_name}" };
  }

  // Retrieves a list of shards.
  rpc ListShards (ListClusterShardsRequest) returns (ListClusterShardsResponse) {
    option (google.api.http) = { get: "/mdb/clickhouse/v1/clusters/{cluster_id}/shards" };
  }

  // Creates a new shard.
  rpc AddShard (AddClusterShardRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/mdb/clickhouse/v1/clusters/{cluster_id}/shards" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "AddClusterShardMetadata"
      response: "Shard"
    };
  }

  // Modifies the specified shard.
  rpc UpdateShard (UpdateClusterShardRequest) returns (operation.Operation) {
    option (google.api.http) = { patch: "/mdb/clickhouse/v1/clusters/{cluster_id}/shards/{shard_name}" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "UpdateClusterShardMetadata"
      response: "Shard"
    };
  }

  // Modifies all shards in the specified shard group.
  rpc UpdateShards (UpdateClusterShardsRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/managed-clickhouse/v1/clusters/{cluster_id}/shards:batchUpdate" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "UpdateClusterShardsMetadata"
      response: "google.protobuf.Empty"
    };
    option (yandex.cloud.api.tools.method).lint_skip.http_verb = true;
  }

  // Deletes the specified shard.
  rpc DeleteShard (DeleteClusterShardRequest) returns (operation.Operation) {
    option (google.api.http) = { delete: "/mdb/clickhouse/v1/clusters/{cluster_id}/shards/{shard_name}" };
    option (yandex.cloud.api.operation) = {
      metadata: "DeleteClusterShardMetadata"
      response: "google.protobuf.Empty"
    };
  }

  // Returns the specified shard group.
  rpc GetShardGroup (GetClusterShardGroupRequest) returns (ShardGroup) {
    option (google.api.http) = { get: "/managed-clickhouse/v1/clusters/{cluster_id}/shardGroups/{shard_group_name}" };
  }

  // Retrieves a list of shard groups that belong to specified cluster.
  rpc ListShardGroups (ListClusterShardGroupsRequest) returns (ListClusterShardGroupsResponse) {
    option (google.api.http) = { get: "/managed-clickhouse/v1/clusters/{cluster_id}/shardGroups" };
  }

  // Creates a new shard group in the specified cluster.
  rpc CreateShardGroup (CreateClusterShardGroupRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/managed-clickhouse/v1/clusters/{cluster_id}/shardGroups" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "CreateClusterShardGroupMetadata"
      response: "ShardGroup"
    };
  }

  // Modifies the specified shard group.
  rpc UpdateShardGroup (UpdateClusterShardGroupRequest) returns (operation.Operation) {
    option (google.api.http) = { patch: "/managed-clickhouse/v1/clusters/{cluster_id}/shardGroups/{shard_group_name}" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "UpdateClusterShardGroupMetadata"
      response: "ShardGroup"
    };
  }

  // Deletes the specified shard group.
  rpc DeleteShardGroup (DeleteClusterShardGroupRequest) returns (operation.Operation) {
    option (google.api.http) = { delete: "/managed-clickhouse/v1/clusters/{cluster_id}/shardGroups/{shard_group_name}" };
    option (yandex.cloud.api.operation) = {
      metadata: "DeleteClusterShardGroupMetadata"
      response: "google.protobuf.Empty"
    };
  }

  rpc CreateExternalDictionary (CreateClusterExternalDictionaryRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/mdb/clickhouse/v1/clusters/{cluster_id}:createExternalDictionary" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "CreateClusterExternalDictionaryMetadata"
      response: "Cluster"
    };
  }

  rpc UpdateExternalDictionary (UpdateClusterExternalDictionaryRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/mdb/clickhouse/v1/clusters/{cluster_id}:updateExternalDictionary" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "UpdateClusterExternalDictionaryMetadata"
      response: "Cluster"
    };
    option (yandex.cloud.api.tools.method).lint_skip.http_verb = true;
  }

  rpc DeleteExternalDictionary (DeleteClusterExternalDictionaryRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/mdb/clickhouse/v1/clusters/{cluster_id}:deleteExternalDictionary" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "DeleteClusterExternalDictionaryMetadata"
      response: "Cluster"
    };
    option (yandex.cloud.api.tools.method).lint_skip.http_verb = true;
  }
}

message GetClusterRequest {
  // Required. ID of the ClickHouse cluster to return.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];
}

message ListClustersRequest {
  // Required. ID of the folder to list ClickHouse clusters in.
  string folder_id = 1 [(required) = true, (length) = "<=50"];

  // The maximum number of results per page that should be returned. If the number of available
  // results is larger than `page_size`, the service returns a `next_page_token` that can be used
  // to get the next page of results in subsequent ListClusters requests.
  // Acceptable values are 0 to 1000, inclusive. Default value: 100.
  int64 page_size = 2 [(value) = "0-1000"];

  // Page token. Set `page_token` to the `next_page_token` returned by a previous ListClusters
  // request to get the next page of results.
  string page_token = 3 [(length) = "<=100"];

  // String that describes a display filter.
  string filter = 4 [(length) = "<=1000"];
}

message ListClustersResponse {
  // Requested list of ClickHouse clusters.
  repeated Cluster clusters = 1;

  // This token allows you to get the next page of results for ListClusters requests,
  // if the number of results is larger than `page_size` specified in the request.
  // To get the next page, specify the value of `next_page_token` as a value for
  // the `page_token` parameter in the next ListClusters request. Subsequent ListClusters
  // requests will have their own `next_page_token` to continue paging through the results.
  string next_page_token = 2;
}

message CreateClusterRequest {
  // Required. ID of the folder to create ClickHouse cluster in.
  string folder_id = 1 [(required) = true, (length) = "<=50"];

  // Required. Name of the ClickHouse cluster. The name must be unique within the folder.
  // The name must be 1-63 characters long and match the regular expression `^[a-zA-Z0-9_-]+$`.
  string name = 2 [(required) = true, (length) = "<=63", (pattern) = "[a-zA-Z0-9_-]*"];

  // Description of the ClickHouse cluster. 0-256 characters long.
  string description = 3 [(length) = "<=256"];

  map<string, string> labels = 4 [(priv.size) = "<=64", (length) = "<=63", (pattern) = "[-_0-9a-z]*", (map_key).length = "1-63", (map_key).pattern = "[a-z][-_0-9a-z]*"];

  // Required. Deployment environment.
  Cluster.Environment environment = 5 [(required) = true];

  // Required.
  ConfigSpec config_spec = 6 [(required) = true];

  repeated DatabaseSpec database_specs = 7;

  repeated UserSpec user_specs = 8;

  // Required. Configuration of ClickHouse hosts.
  repeated HostSpec host_specs = 9 [(size) = ">0"];

  string network_id = 10 [(required) = true, (length) = "<=50"];

  // Name of the first shard in cluster. If not set, it defaults to the value 'shard1'.
  string shard_name = 11 [(length) = "<=63", (pattern) = "[a-zA-Z0-9_-]*"];

  // ID of the service account used for access to Yandex Object Storage.
  string service_account_id = 12;

  // User security groups
  repeated string security_group_ids = 13;

  // Deletion Protection inhibits deletion of the cluster
  bool deletion_protection = 14;

  // Window of maintenance operations.
  MaintenanceWindow maintenance_window = 15;
}

message CreateClusterMetadata {
  // Required. ID of the creating ClickHouse cluster.
  string cluster_id = 1;
}

message UpdateClusterRequest {
  // Required. ID of the ClickHouse cluster to modify.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  google.protobuf.FieldMask update_mask = 2;

  // Description of the ClickHouse cluster. 0-256 characters long.
  string description = 3 [(length) = "<=256"];

  map<string, string> labels = 4 [(priv.size) = "<=64", (length) = "<=63", (pattern) = "[-_0-9a-z]*", (map_key).length = "1-63", (map_key).pattern = "[a-z][-_0-9a-z]*"];

  ConfigSpec config_spec = 5;

  string name = 6 [(length) = "<=63", (pattern) = "[a-zA-Z0-9_-]*"];

  // ID of the service account used for access to Yandex Object Storage.
  string service_account_id = 7;

  // Window of maintenance operations.
  MaintenanceWindow maintenance_window = 8;

  // User security groups
  repeated string security_group_ids = 9;

  // Deletion Protection inhibits deletion of the cluster
  bool deletion_protection = 10;
}

message UpdateClusterMetadata {
  // Required. ID of the ClickHouse cluster.
  string cluster_id = 1;
}

message DeleteClusterRequest {
  // Required. ID of the ClickHouse cluster to delete.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];
}

message DeleteClusterMetadata {
  // Required. ID of the deleting ClickHouse cluster.
  string cluster_id = 1;
}

message AddClusterZookeeperRequest {
  // Required. ID of the ClickHouse cluster to modify.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // Resources allocated to Zookeeper hosts.
  Resources resources = 2;

  // Configuration of ZooKeeper hosts.
  repeated HostSpec host_specs = 3;
}

message AddClusterZookeeperMetadata {
  // Required. ID of the ClickHouse cluster.
  string cluster_id = 1;
}

message StartClusterRequest {
  // Required. ID of the ClickHouse cluster to start.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];
}

message StartClusterMetadata {
  // Required. ID of the ClickHouse cluster.
  string cluster_id = 1;
}

message StopClusterRequest {
  // Required. ID of the ClickHouse cluster to stop.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];
}

message StopClusterMetadata {
  // Required. ID of the ClickHouse cluster.
  string cluster_id = 1;
}

message MoveClusterRequest {
  // ID of the ClickHouse cluster to move.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];
  // ID of the destination folder.
  string destination_folder_id = 2 [(required) = true, (length) = "<=50"];
}

message MoveClusterMetadata {
  // ID of the ClickHouse cluster being moved.
  string cluster_id = 1;
  // ID of the source folder.
  string source_folder_id = 2;
  // ID of the destnation folder.
  string destination_folder_id = 3;
}

message BackupClusterRequest {
  // Required. ID of the ClickHouse cluster to back up.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];
}

message BackupClusterMetadata {
  // Required. ID of the ClickHouse cluster.
  string cluster_id = 1;
}

message RestoreClusterRequest {
  // ID of the backup to restore from. This backup will be used to create one cluster shard.
  string backup_id = 1 [(required) = true];

  // Additional IDs of the backups to restore from.
  // Each additional backup is responsible for restoring separate shard.
  // Restored cluster will have len(additional_backup_ids)+1 shards in total.
  repeated string additional_backup_ids = 13;

  // Required. Name of the new ClickHouse cluster. The name must be unique within the folder.
  // The name must be 1-63 characters long and match the regular expression `^[a-zA-Z0-9_-]+$`.
  string name = 2 [(required) = true, (length) = "<=63", (pattern) = "[a-zA-Z0-9_-]*"];

  // Description of the new ClickHouse cluster. 0-256 characters long.
  string description = 3 [(length) = "<=256"];

  map<string, string> labels = 4 [(priv.size) = "<=64", (length) = "<=63", (pattern) = "[-_0-9a-z]*", (map_key).length = "1-63", (map_key).pattern = "[a-z][-_0-9a-z]*"];

  // Deployment environment of the new ClickHouse cluster.
  Cluster.Environment environment = 5 [(required) = true];

  ConfigSpec config_spec = 6 [(required) = true];

  repeated HostSpec host_specs = 7 [(size) = ">0"];

  string network_id = 8 [(required) = true, (length) = "<=50"];

  string folder_id = 9 [(length) = "<=50"];

  // ID of the service account used for access to Yandex Object Storage.
  string service_account_id = 10;

  // User security groups
  repeated string security_group_ids = 11;

  // Window of maintenance operations.
  MaintenanceWindow maintenance_window = 12;

  // Deletion Protection inhibits deletion of the cluster
  bool deletion_protection = 14;
}

message RestoreClusterMetadata {
  // Required. ID of the new ClickHouse cluster.
  string cluster_id = 1;

  // Required. ID of the backup used for recovery.
  string backup_id = 2;
}

message RescheduleMaintenanceRequest {
  // Required. ID of the ClickHouse cluster to maintenance reschedule.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  enum RescheduleType {
    RESCHEDULE_TYPE_UNSPECIFIED = 0;
    IMMEDIATE = 1;
    NEXT_AVAILABLE_WINDOW = 2;
    SPECIFIC_TIME = 3;
  }
  // Required. The type of reschedule request.
  RescheduleType reschedule_type = 2[(required) = true];

  // The time for SPECIFIC_TIME reschedule. Limited by two weeks since first time scheduled.
  google.protobuf.Timestamp delayed_until = 3;
}

message RescheduleMaintenanceMetadata {
  // Required. ID of the ClickHouse cluster.
  string cluster_id = 1;

  // Required. New time of the planned maintenance. Can be in the past for rescheduled to "IMMEDIATE".
  google.protobuf.Timestamp delayed_until = 4;
}

message LogRecord {
  google.protobuf.Timestamp timestamp = 1;

  map<string, string> message = 2;
}

message ListClusterLogsRequest {
  // Required. ID of the ClickHouse cluster.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // Columns from logs table to get in the response.
  repeated string column_filter = 2;

  ServiceType service_type = 3;

  enum ServiceType {
    SERVICE_TYPE_UNSPECIFIED = 0;
    CLICKHOUSE = 1;
  }

  // Start timestamp for the logs request.
  google.protobuf.Timestamp from_time = 4;

  // End timestamp for the logs request.
  google.protobuf.Timestamp to_time = 5;

  // The maximum number of results per page that should be returned. If the number of available
  // results is larger than `page_size`, the service returns a `next_page_token` that can be used
  // to get the next page of results in subsequent ListLogs requests.
  // Acceptable values are 0 to 1000, inclusive. Default value: 100.
  int64 page_size = 6 [(value) = "0-1000"];

  // Page token. Set `page_token` to the `next_page_token` returned by a previous ListLogs
  // request to get the next page of results.
  string page_token = 7 [(length) = "<=100"];

  // Always return `next_page_token`, even if current page is empty.
  bool always_next_page_token = 8;

  // A filter expression that filters resources listed in the response.
  // The expression must specify:
  // 1. The field name. Currently filtering can be applied to the [LogRecord.logs.message.hostname], [LogRecord.logs.message.severity] fields.
  // 2. A conditional operator. Can be either `=` or `!=` for single values, `IN` or `NOT IN` for lists of values.
  // 3. The value. Must be 1-63 characters long and match the regular expression `^[a-z0-9.-]{1,61}$`.
  // Examples of a filter:
  // - `message.hostname='node1.db.cloud.yandex.net'`
  // - `message.severity IN ('Error', 'Fatal') AND message.hostname != 'node2.db.cloud.yandex.net'`.
  string filter = 9 [(length) = "<=1000"];
}

message ListClusterLogsResponse {
  // Requested log records.
  repeated LogRecord logs = 1;

  // This token allows you to get the next page of results for ListLogs requests,
  // if the number of results is larger than `page_size` specified in the request.
  // To get the next page, specify the value of `next_page_token` as a value for
  // the `page_token` parameter in the next ListLogs request. Subsequent ListLogs
  // requests will have their own `next_page_token` to continue paging through the results.
  // This value is interchangeable with `next_record_token` from StreamLogs method.
  string next_page_token = 2;
}

message StreamLogRecord {
  // One of the requested log records.
  LogRecord record = 1;

  // This token allows you to continue streaming logs starting from the exact
  // same record. To continue streaming, specify value of `next_record_token`
  // as value for `record_token` parameter in the next StreamLogs request.
  // This value is interchangeable with `next_page_token` from ListLogs method.
  string next_record_token = 2 [(sensitive) = false];
}

message StreamClusterLogsRequest {
  // Required. ID of the ClickHouse cluster.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // Columns from logs table to get in the response.
  repeated string column_filter = 2;

  ServiceType service_type = 3;

  enum ServiceType {
    SERVICE_TYPE_UNSPECIFIED = 0;
    CLICKHOUSE = 1;
  }

  // Start timestamp for the logs request.
  google.protobuf.Timestamp from_time = 4;

  // End timestamp for the logs request.
  // If this field is not set, all existing logs will be sent and then the new ones as
  // they appear. In essence it has 'tail -f' semantics.
  google.protobuf.Timestamp to_time = 5;

  // Record token. Set `record_token` to the `next_record_token` returned by a previous StreamLogs
  // request to start streaming from next log record.
  string record_token = 6 [(length) = "<=100", (sensitive) = false];

  // A filter expression that filters resources listed in the response.
  // The expression must specify:
  // 1. The field name. Currently filtering can be applied to the [LogRecord.logs.message.hostname], [LogRecord.logs.message.severity] fields.
  // 2. A conditional operator. Can be either `=` or `!=` for single values, `IN` or `NOT IN` for lists of values.
  // 3. The value. Must be 1-63 characters long and match the regular expression `^[a-z0-9.-]{1,61}$`.
  // Examples of a filter:
  // - `message.hostname='node1.db.cloud.yandex.net'`
  // - `message.severity IN ('Error', 'Fatal') AND message.hostname != 'node2.db.cloud.yandex.net'`.
  string filter = 7 [(length) = "<=1000"];
}

message ListClusterOperationsRequest {
  // Required. ID of the ClickHouse cluster.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // The maximum number of results per page that should be returned. If the number of available
  // results is larger than `page_size`, the service returns a `next_page_token` that can be used
  // to get the next page of results in subsequent ListOperations requests.
  // Acceptable values are 0 to 1000, inclusive. Default value: 100.
  int64 page_size = 2 [(value) = "0-1000"];

  // Page token. Set `page_token` to the `next_page_token` returned by a previous ListOperations
  // request to get the next page of results.
  string page_token = 3 [(length) = "<=100"];
}

message ListClusterOperationsResponse {
  repeated operation.Operation operations = 1;

  // This token allows you to get the next page of results for ListOperations requests,
  // if the number of results is larger than `page_size` specified in the request.
  // To get the next page, specify the value of `next_page_token` as a value for
  // the `page_token` parameter in the next ListOperations request. Subsequent ListOperations
  // requests will have their own `next_page_token` to continue paging through the results.
  string next_page_token = 2;
}

message ListClusterBackupsRequest {
  // Required. ID of the ClickHouse cluster.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // The maximum number of results per page that should be returned. If the number of available
  // results is larger than `page_size`, the service returns a `next_page_token` that can be used
  // to get the next page of results in subsequent ListClusterBackups requests.
  // Acceptable values are 0 to 1000, inclusive. Default value: 100.
  int64 page_size = 2 [(value) = "0-1000"];

  // Page token. Set `page_token` to the `next_page_token` returned by a previous ListClusterBackups
  // request to get the next page of results.
  string page_token = 3 [(length) = "<=100"];
}

message ListClusterBackupsResponse {
  // Requested list of backups.
  repeated Backup backups = 1;

  // This token allows you to get the next page of results for ListClusterBackups requests,
  // if the number of results is larger than `page_size` specified in the request.
  // To get the next page, specify the value of `next_page_token` as a value for
  // the `page_token` parameter in the next ListClusterBackups request. Subsequent ListClusterBackups
  // requests will have their own `next_page_token` to continue paging through the results.
  string next_page_token = 2;
}

message ListClusterHostsRequest {
  // Required. ID of the ClickHouse cluster.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // The maximum number of results per page that should be returned. If the number of available
  // results is larger than `page_size`, the service returns a `next_page_token` that can be used
  // to get the next page of results in subsequent ListClusterHosts requests.
  // Acceptable values are 0 to 1000, inclusive. Default value: 100.
  int64 page_size = 2 [(value) = "0-1000"];

  // Page token. Set `page_token` to the `next_page_token` returned by a previous ListClusterHosts
  // request to get the next page of results.
  string page_token = 3 [(length) = "<=100"];
}

message ListClusterHostsResponse {
  // Requested list of hosts.
  repeated Host hosts = 1;

  // This token allows you to get the next page of results for ListClusterHosts requests,
  // if the number of results is larger than `page_size` specified in the request.
  // To get the next page, specify the value of `next_page_token` as a value for
  // the `page_token` parameter in the next ListClusterHosts request. Subsequent ListClusterHosts
  // requests will have their own `next_page_token` to continue paging through the results.
  string next_page_token = 2;
}

message AddClusterHostsRequest {
  // Required. ID of the ClickHouse cluster.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // Required.
  repeated HostSpec host_specs = 2 [(size) = ">0"];

  // Whether to copy schema to new ClickHouse hosts from replicas.
  google.protobuf.BoolValue copy_schema = 3;
}

message AddClusterHostsMetadata {
  // Required. ID of the ClickHouse cluster.
  string cluster_id = 1;

  // Required. The name of adding host.
  repeated string host_names = 2;
}

message UpdateHostSpec {
  // Name of the host to update.
  // To get the ClickHouse host name, use a [ClusterService.ListHosts] request.
  string host_name = 1 [(required) = true];

  // Field mask that specifies which fields of the ClickHouse host should be updated.
  google.protobuf.FieldMask update_mask = 2;

  // Whether the host should get a public IP address on creation.
  google.protobuf.BoolValue assign_public_ip = 3;
}

message UpdateClusterHostsRequest {
  // ID of the ClickHouse cluster to update hosts in.
  // To get the ClickHouse cluster ID, use a [ClusterService.List] request.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // New configurations to apply to hosts.
  repeated UpdateHostSpec update_host_specs = 2 [(size) = ">0"];
}

message UpdateClusterHostsMetadata {
  // ID of the ClickHouse cluster to modify hosts in.
  string cluster_id = 1;

  // Names of hosts that are being modified.
  repeated string host_names = 2;
}

message DeleteClusterHostsRequest {
  // Required. ID of the ClickHouse cluster.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // Required. Name of the host to delete.
  repeated string host_names = 2 [(size) = ">0", (length) = "<=253"];
}

message DeleteClusterHostsMetadata {
  // Required. ID of the ClickHouse cluster.
  string cluster_id = 1;

  // Required. The name of deleting host.
  repeated string host_names = 2;
}

message GetClusterShardRequest {
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  string shard_name = 2 [(required) = true, (length) = "<=63", (pattern) = "[a-zA-Z0-9_-]*"];
}

message ListClusterShardsRequest {
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  int64 page_size = 2 [(value) = "0-1000"];

  string page_token = 3 [(length) = "<=100"];
}

message ListClusterShardsResponse {
  repeated Shard shards = 1;

  string next_page_token = 2;
}

message AddClusterShardRequest {
  // ID of the ClickHouse cluster to add shard to.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // Name of the shard to be created.
  string shard_name = 2 [(required) = true, (length) = "<=63", (pattern) = "[a-zA-Z0-9_-]*"];

  // Configuration of the shard to be created.
  // If not specified, it defaults to the configuration of the first shard.
  ShardConfigSpec config_spec = 3;

  // Individual configurations for hosts that should be created for the shard.
  // If not specified, it defaults to the configuration of the first shard.
  repeated HostSpec host_specs = 4;

  // List of shard group names that should contain new shard.
  repeated string shard_group_names = 5;

  // Whether to copy schema to hosts of the shard to be created. The schema is copied from hosts of an existing shard.
  google.protobuf.BoolValue copy_schema = 6;
}

message AddClusterShardMetadata {
  string cluster_id = 1;

  string shard_name = 2;
}

message UpdateClusterShardRequest {
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  string shard_name = 2 [(required) = true, (length) = "<=63", (pattern) = "[a-zA-Z0-9_-]*"];

  google.protobuf.FieldMask update_mask = 3;

  ShardConfigSpec config_spec = 5;
}

message UpdateClusterShardMetadata {
  string cluster_id = 1;

  string shard_name = 2;
}

message UpdateClusterShardsRequest {
  // ID of the cluster that contains the shard group being updated.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // Name of the shard group that should be updated.
  string shard_group_name = 2 [(required) = true, (length) = "<=63", (pattern) = "[a-zA-Z0-9_-]*"];

  // Field mask that specifies which attributes of the ClickHouse shard should be updated.
  google.protobuf.FieldMask update_mask = 3;

  // New configuration for the shards.
  ShardConfigSpec config_spec = 4;
}

message UpdateClusterShardsMetadata {
  // ID of the cluster that contains the shard group being updated.
  string cluster_id = 1;

  // Name of the shard group that should be updated.
  string shard_group_name = 2;
}

message DeleteClusterShardRequest {
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  string shard_name = 2 [(required) = true, (length) = "<=63", (pattern) = "[a-zA-Z0-9_-]*"];
}

message DeleteClusterShardMetadata {
  string cluster_id = 1;

  string shard_name = 2;
}

message GetClusterShardGroupRequest {
  // ID of the cluster that the shard group belongs to.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // Name of the shard group to request information about.
  // To get the name of a shard group , use a [ClusterService.ListShardGroups] request.
  string shard_group_name = 2 [(required) = true, (length) = "<=63", (pattern) = "[a-zA-Z0-9_-]*"];
}

message ListClusterShardGroupsRequest {
  // ID of the cluster that the shard group belongs to.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // The maximum number of results per page to return. If the number of available
  // results is larger than [page_size], the service returns a [ListClusterShardGroupsResponse.next_page_token]
  // that can be used to get the next page of results in subsequent list requests.
  int64 page_size = 2 [(value) = "0-1000"];

  // Page token. To get the next page of results, set [page_token] to the [ListClusterShardGroupsResponse.next_page_token]
  // returned by a previous list request.
  string page_token = 3 [(length) = "<=100"];
}

message ListClusterShardGroupsResponse {
  // List of ClickHouse Cluster shard groups.
  repeated ShardGroup shard_groups = 1;

  // This token allows you to get the next page of results for list requests. If the number of results
  // is larger than [ListClusterShardGroupsRequest.page_size], use the [next_page_token] as the value
  // for the [ListClusterShardGroupsRequest.page_token] parameter in the next list request. Each subsequent
  // list request will have its own [next_page_token] to continue paging through the results.
  string next_page_token = 2;
}

message CreateClusterShardGroupRequest {
  // ID of the ClickHouse cluster to add a shard group to.
  // To get the ClickHouse cluster ID, use a [ClusterService.List] request.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // Name for the new shard group.
  string shard_group_name = 2 [(required) = true, (length) = "<=63", (pattern) = "[a-zA-Z0-9_-]*"];

  // Description of the ClickHouse cluster shard group. 0-256 characters long.
  string description = 3;

  // List of shard names that belongs to the new group.
  repeated string shard_names = 4;
}

message CreateClusterShardGroupMetadata {
  // ID of the ClickHouse cluster to add a shard group to.
  string cluster_id = 1;

  // Name for the new shard group.
  string shard_group_name = 2;
}

message UpdateClusterShardGroupRequest {
  // ID of the cluster that contains the shard group being updated.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // Name of the shard group that should be updated.
  string shard_group_name = 2 [(required) = true, (length) = "<=63", (pattern) = "[a-zA-Z0-9_-]*"];

  // Field mask that specifies which attributes of the ClickHouse shard group should be updated.
  google.protobuf.FieldMask update_mask = 3;

  // Description of the ClickHouse cluster shard group. 0-256 characters long.
  string description = 4;

  // Updated list of shard names that belongs to the new group.
  repeated string shard_names = 5;
}

message UpdateClusterShardGroupMetadata {
  // ID of the cluster that contains the shard group being updated.
  string cluster_id = 1;

  // Name of the shard group that should be updated.
  string shard_group_name = 2;
}

message DeleteClusterShardGroupRequest {
  // ID of the ClickHouse cluster the shard group belongs to.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // Name of the shard group that should be deleted.
  string shard_group_name = 2 [(required) = true, (length) = "<=63", (pattern) = "[a-zA-Z0-9_-]*"];
}

message DeleteClusterShardGroupMetadata {
  // ID of the ClickHouse cluster the shard group belongs to.
  string cluster_id = 1;

  // Name of the shard group that should be deleted.
  string shard_group_name = 2;
}

message CreateClusterExternalDictionaryRequest {
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  config.ClickhouseConfig.ExternalDictionary external_dictionary = 2;
}

message CreateClusterExternalDictionaryMetadata {
  string cluster_id = 1;
}

message UpdateClusterExternalDictionaryRequest {
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  config.ClickhouseConfig.ExternalDictionary external_dictionary = 2;

  google.protobuf.FieldMask update_mask = 3;
}

message UpdateClusterExternalDictionaryMetadata {
  string cluster_id = 1;
}

message DeleteClusterExternalDictionaryRequest {
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  string external_dictionary_name = 2;
}

message DeleteClusterExternalDictionaryMetadata {
  string cluster_id = 1;
}

message HostSpec {
  // ID of the availability zone.
  string zone_id = 1 [(length) = "<=50"];

  // Type of component to deploy on this host.
  Host.Type type = 2 [(required) = true];

  string subnet_id = 3 [(length) = "<=50"];

  bool assign_public_ip = 4;

  string shard_name = 5 [(length) = "<=63", (pattern) = "[a-zA-Z0-9_-]*"];
}

message ConfigSpec {
  message Clickhouse {
    // Configuration settings of ClickHouse DBMS.
    config.ClickhouseConfig config = 1;

    // Resources allocated to ClickHouse hosts.
    Resources resources = 2;
  }

  message Zookeeper {
    // Resources allocated to Zookeeper hosts.
    Resources resources = 1;
  }

  string version = 3;

  Clickhouse clickhouse = 1;

  Zookeeper zookeeper = 2;

  // Start time for the daily backup in UTC timezone
  google.type.TimeOfDay backup_window_start = 4;

  // Access policy to DB
  Access access = 5;

  CloudStorage cloud_storage = 6;

  google.protobuf.BoolValue sql_database_management = 7;

  google.protobuf.BoolValue sql_user_management = 8;

  string admin_password = 9 [(sensitive) = true];

  google.protobuf.BoolValue embedded_keeper = 10;
}

message ShardConfigSpec {
  message Clickhouse {
    config.ClickhouseConfig config = 1;

    Resources resources = 2;

    google.protobuf.Int64Value weight = 3;
  }

  Clickhouse clickhouse = 1;
}
