syntax = "proto3";

package yandex.cloud.priv.mdb.redis.v1;

import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "google/type/timeofday.proto";
import "yandex/cloud/api/operation.proto";
import "yandex/cloud/api/tools/options.proto";
import "yandex/cloud/priv/operation/operation.proto";
import "yandex/cloud/priv/sensitive.proto";
import "yandex/cloud/priv/validation.proto";
import "yandex/cloud/priv/mdb/redis/v1/backup.proto";
import "yandex/cloud/priv/mdb/redis/v1/cluster.proto";
import "yandex/cloud/priv/mdb/redis/v1/config/redis5_0.proto";
import "yandex/cloud/priv/mdb/redis/v1/config/redis6_0.proto";
import "yandex/cloud/priv/mdb/redis/v1/config/redis6_2.proto";
import "yandex/cloud/priv/mdb/redis/v1/maintenance.proto";

option go_package = "a.yandex-team.ru/cloud/bitbucket/private-api/yandex/cloud/priv/mdb/redis/v1;redis";
option java_outer_classname = "PRCS";

// A set of methods for managing Redis clusters.
service ClusterService {
  // Returns the specified Redis cluster.
  rpc Get (GetClusterRequest) returns (Cluster) {
    option (google.api.http) = { get: "/mdb/redis/v1/clusters/{cluster_id}" };
  }

  // Retrieves a list of Redis clusters.
  rpc List (ListClustersRequest) returns (ListClustersResponse) {
    option (google.api.http) = { get: "/mdb/redis/v1/clusters" };
  }

  // Creates a Redis cluster.
  rpc Create (CreateClusterRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/mdb/redis/v1/clusters" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "CreateClusterMetadata"
      response: "Cluster"
    };
  }

  // Updates configuration of the specified Redis cluster.
  rpc Update (UpdateClusterRequest) returns (operation.Operation) {
    option (google.api.http) = { patch: "/mdb/redis/v1/clusters/{cluster_id}" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "UpdateClusterMetadata"
      response: "Cluster"
    };
  }

  // Deletes the specified Redis cluster.
  rpc Delete (DeleteClusterRequest) returns (operation.Operation) {
    option (google.api.http) = { delete: "/mdb/redis/v1/clusters/{cluster_id}" };
    option (yandex.cloud.api.operation) = {
      metadata: "DeleteClusterMetadata"
      response: "google.protobuf.Empty"
    };
  }

  // Start the specified Redis cluster.
  rpc Start (StartClusterRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/mdb/redis/v1/clusters/{cluster_id}:start" };
    option (yandex.cloud.api.operation) = {
      metadata: "StartClusterMetadata"
      response: "Cluster"
    };
  }

  // Stop the specified Redis cluster.
  rpc Stop (StopClusterRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/mdb/redis/v1/clusters/{cluster_id}:stop" };
    option (yandex.cloud.api.operation) = {
      metadata: "StopClusterMetadata"
      response: "Cluster"
    };
  }

  // Moves the specified Redis cluster to the specified folder.
  rpc Move (MoveClusterRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/mdb/redis/v1/clusters/{cluster_id}:move" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "MoveClusterMetadata"
      response: "Cluster"
    };
  }

  // Creates a backup of the specified Redis cluster.
  rpc Backup (BackupClusterRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/mdb/redis/v1/clusters/{cluster_id}:backup" };
    option (yandex.cloud.api.operation) = {
      metadata: "BackupClusterMetadata"
      response: "Cluster"
    };
  }

  // Creates a new Redis cluster from the specified backup.
  rpc Restore (RestoreClusterRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/mdb/redis/v1/clusters:restore" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "RestoreClusterMetadata"
      response: "Cluster"
    };
  }

  // Reschedule planned maintenance operation.
  rpc RescheduleMaintenance (RescheduleMaintenanceRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/mdb/redis/v1/clusters/{cluster_id}:rescheduleMaintenance" body: "*"};
    option (yandex.cloud.api.operation) = {
      metadata: "RescheduleMaintenanceMetadata"
      response: "Cluster"
    };
  }

  // Start a manual failover on the specified Redis cluster.
  rpc StartFailover (StartClusterFailoverRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/mdb/redis/v1/clusters/{cluster_id}:startFailover" body: "*"};
    option (yandex.cloud.api.operation) = {
      metadata: "StartClusterFailoverMetadata"
      response: "Cluster"
    };
  }

  // Returns logs for the specified Redis cluster.
  // See the [Logs](/yandex-mdb-guide/concepts/logs.html) section in the developers guide for detailed logs description.
  rpc ListLogs (ListClusterLogsRequest) returns (ListClusterLogsResponse) {
    option (google.api.http) = { get: "/mdb/redis/v1/clusters/{cluster_id}:logs" };
  }

  // Same as ListLogs but using server-side streaming. Also allows for 'tail -f' semantics.
  rpc StreamLogs (StreamClusterLogsRequest) returns (stream StreamLogRecord) {
    option (google.api.http) = { get: "/mdb/redis/v1/clusters/{cluster_id}:stream_logs" };
    option (yandex.cloud.api.tools.method).lint_skip.http_verb = true;
  }

  rpc ListOperations (ListClusterOperationsRequest) returns (ListClusterOperationsResponse) {
    option (google.api.http) = { get: "/mdb/redis/v1/clusters/{cluster_id}/operations" };
  }

  // Returns the list of available backups for the specified Redis cluster.
  rpc ListBackups (ListClusterBackupsRequest) returns (ListClusterBackupsResponse) {
    option (google.api.http) = { get: "/mdb/redis/v1/clusters/{cluster_id}/backups" };
  }

  // Retrieves a list of hosts.
  rpc ListHosts (ListClusterHostsRequest) returns (ListClusterHostsResponse) {
    option (google.api.http) = { get: "/mdb/redis/v1/clusters/{cluster_id}/hosts" };
  }

  // Creates a new hosts.
  rpc AddHosts (AddClusterHostsRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/mdb/redis/v1/clusters/{cluster_id}/hosts:batchCreate" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "AddClusterHostsMetadata"
      response: "google.protobuf.Empty"
    };
  }

  // Deletes the specified host.
  rpc DeleteHosts (DeleteClusterHostsRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/mdb/redis/v1/clusters/{cluster_id}/hosts:batchDelete" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "DeleteClusterHostsMetadata"
      response: "google.protobuf.Empty"
    };
    option (yandex.cloud.api.tools.method).lint_skip.http_verb = true;
  }

  // Updates the specified hosts.
  rpc UpdateHosts (UpdateClusterHostsRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/mdb/redis/v1/clusters/{cluster_id}/hosts:batchUpdate" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "UpdateClusterHostsMetadata"
      response: "google.protobuf.Empty"
    };
    option (yandex.cloud.api.tools.method).lint_skip.http_verb = true;
  }

  // Returns the specified shard.
  rpc GetShard (GetClusterShardRequest) returns (Shard) {
    option (google.api.http) = { get: "/mdb/redis/v1/clusters/{cluster_id}/shards/{shard_name}" };
  }

  // Retrieves a list of shards.
  rpc ListShards (ListClusterShardsRequest) returns (ListClusterShardsResponse) {
    option (google.api.http) = { get: "/mdb/redis/v1/clusters/{cluster_id}/shards" };
  }

  // Creates a new shard.
  rpc AddShard (AddClusterShardRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/mdb/redis/v1/clusters/{cluster_id}/shards" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "AddClusterShardMetadata"
      response: "Shard"
    };
  }

  // Deletes the specified shard.
  rpc DeleteShard (DeleteClusterShardRequest) returns (operation.Operation) {
    option (google.api.http) = { delete: "/mdb/redis/v1/clusters/{cluster_id}/shards/{shard_name}" };
    option (yandex.cloud.api.operation) = {
      metadata: "DeleteClusterShardMetadata"
      response: "google.protobuf.Empty"
    };
  }

  // Rebalances the cluster. Evenly distributes all the hash slots between the shards.
  rpc Rebalance (RebalanceClusterRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/mdb/redis/v1/clusters/{cluster_id}:rebalance" };
    option (yandex.cloud.api.operation) = {
      metadata: "RebalanceClusterMetadata"
      response: "Cluster"
    };
  }
}

message GetClusterRequest {
  // Required. ID of the Redis cluster to return.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];
}

message ListClustersRequest {
  // Required. ID of the folder to list Redis clusters in.
  string folder_id = 1 [(required) = true, (length) = "<=50"];

  // The maximum number of results per page that should be returned. If the number of available
  // results is larger than `page_size`, the service returns a `next_page_token` that can be used
  // to get the next page of results in subsequent ListClusters requests.
  // Acceptable values are 0 to 1000, inclusive. Default value: 100.
  int64 page_size = 2 [(value) = "0-1000"];

  // Page token. Set `page_token` to the `next_page_token` returned by a previous ListClusters
  // request to get the next page of results.
  string page_token = 3 [(length) = "<=100"];

  // String that describes a display filter.
  string filter = 4 [(length) = "<=1000"];
}

message ListClustersResponse {
  // Requested list of Redis clusters.
  repeated Cluster clusters = 1;

  // This token allows you to get the next page of results for ListClusters requests,
  // if the number of results is larger than `page_size` specified in the request.
  // To get the next page, specify the value of `next_page_token` as a value for
  // the `page_token` parameter in the next ListClusters request. Subsequent ListClusters
  // requests will have their own `next_page_token` to continue paging through the results.
  string next_page_token = 2;
}

message CreateClusterRequest {
  // Required. ID of the folder to create Redis cluster in.
  string folder_id = 1 [(required) = true, (length) = "<=50"];

  // Required. Name of the Redis cluster. The name must be unique within the folder.
  // The name must be 1-63 characters long and match the regular expression `^[a-zA-Z0-9_-]+$`.
  string name = 2 [(required) = true, (length) = "<=63", (pattern) = "[a-zA-Z0-9_-]*"];

  // Description of the Redis cluster. 0-256 characters long.
  string description = 3 [(length) = "<=256"];

  map<string, string> labels = 4 [(priv.size) = "<=64", (length) = "<=63", (pattern) = "[-_0-9a-z]*", (map_key).length = "1-63", (map_key).pattern = "[a-z][-_0-9a-z]*"];

  // Required. Deployment environment.
  Cluster.Environment environment = 5 [(required) = true];

  // Required.
  ConfigSpec config_spec = 6 [(required) = true];

  repeated HostSpec host_specs = 7 [(size) = ">0"];

  string network_id = 10 [(required) = true, (length) = "<=50"];

  // Redis cluster mode on/off.
  bool sharded = 11;

  // User security groups
  repeated string security_group_ids = 12;

  // TLS port and functionality on\off
  google.protobuf.BoolValue tls_enabled = 13;

  // Deletion Protection inhibits deletion of the cluster
  bool deletion_protection = 14;

  // Persistence mode
  Cluster.PersistenceMode persistence_mode = 15;
}

message CreateClusterMetadata {
  // Required. ID of the creating Redis cluster.
  string cluster_id = 1;
}

message UpdateClusterRequest {
  // Required. ID of the Redis cluster.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  google.protobuf.FieldMask update_mask = 2;

  // Description of the Redis cluster. 0-256 characters long.
  string description = 3 [(length) = "<=256"];

  map<string, string> labels = 4 [(priv.size) = "<=64", (length) = "<=63", (pattern) = "[-_0-9a-z]*", (map_key).length = "1-63", (map_key).pattern = "[a-z][-_0-9a-z]*"];

  ConfigSpec config_spec = 5;

  string name = 6 [(length) = "<=63", (pattern) = "[a-zA-Z0-9_-]*"];

  // Window of maintenance operations.
  MaintenanceWindow maintenance_window = 7;

  // User security groups
  repeated string security_group_ids = 8;

  // Deletion Protection inhibits deletion of the cluster
  bool deletion_protection = 9;

  // Persistence mode
  Cluster.PersistenceMode persistence_mode = 10;
}

message UpdateClusterMetadata {
  // Required. ID of the Redis cluster.
  string cluster_id = 1;
}

message DeleteClusterRequest {
  // Required. ID of the Redis cluster to delete.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];
}

message DeleteClusterMetadata {
  // Required. ID of the deleting Redis cluster.
  string cluster_id = 1;
}

message StartClusterRequest {
  // Required. ID of the Redis cluster to start.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];
}

message StartClusterMetadata {
  // Required. ID of the Redis cluster.
  string cluster_id = 1;
}

message StopClusterRequest {
  // Required. ID of the Redis cluster to stop.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];
}

message StopClusterMetadata {
  // Required. ID of the Redis cluster.
  string cluster_id = 1;
}

message MoveClusterRequest {
  // ID of the Redis cluster to move.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];
  // ID of the destination folder.
  string destination_folder_id = 2 [(required) = true, (length) = "<=50"];
}

message MoveClusterMetadata {
  // ID of the Redis cluster being moved.
  string cluster_id = 1;
  // ID of the source folder.
  string source_folder_id = 2;
  // ID of the destnation folder.
  string destination_folder_id = 3;
}

message UpdateClusterHostsRequest {
  // ID of the Redis cluster to update hosts in.
  // To get the Redis cluster ID, use a [ClusterService.List] request.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // New configurations to apply to hosts.
  repeated UpdateHostSpec update_host_specs = 2 [(size) = ">0"];
}

message UpdateClusterHostsMetadata {
  // ID of the Redis cluster to update hosts in.
  string cluster_id = 1;

  // Names of hosts that are being updated.
  repeated string host_names = 2;
}

message BackupClusterRequest {
  // Required. ID of the Redis cluster to back up.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];
}

message BackupClusterMetadata {
  // Required. ID of the Redis cluster.
  string cluster_id = 1;
}

message RestoreClusterRequest {
  // Required. ID of the backup to restore from.
  string backup_id = 1 [(required) = true];

  // Required. Name of the new Redis cluster. The name must be unique within the folder.
  // The name can't be changed after the Redis cluster is created.
  string name = 2 [(required) = true, (length) = "<=63", (pattern) = "[a-zA-Z0-9_-]*"];

  // Description of the new Redis cluster. 0-256 characters long.
  string description = 3 [(length) = "<=256"];

  map<string, string> labels = 4 [(priv.size) = "<=64", (length) = "<=63", (pattern) = "[-_0-9a-z]*", (map_key).length = "1-63", (map_key).pattern = "[a-z][-_0-9a-z]*"];

  // Deployment environment of the new Redis cluster.
  Cluster.Environment environment = 5 [(required) = true];

  ConfigSpec config_spec = 6 [(required) = true];

  repeated HostSpec host_specs = 7 [(size) = ">0"];

  string network_id = 8 [(required) = true, (length) = "<=50"];

  string folder_id = 9 [(length) = "<=50"];

  // User security groups
  repeated string security_group_ids = 10;

  // TLS port and functionality on\off
  google.protobuf.BoolValue tls_enabled = 11;

  // Persistence mode
  Cluster.PersistenceMode persistence_mode = 12;

  // Deletion Protection inhibits deletion of the cluster
  bool deletion_protection = 13;
}

message RestoreClusterMetadata {
  // Required. ID of the new Redis cluster.
  string cluster_id = 1;

  // Required. ID of the backup used for recovery.
  string backup_id = 2;
}

message RescheduleMaintenanceRequest {
  // Required. ID of the Redis cluster to maintenance reschedule.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  enum RescheduleType {
    RESCHEDULE_TYPE_UNSPECIFIED = 0;
    IMMEDIATE = 1;
    NEXT_AVAILABLE_WINDOW = 2;
    SPECIFIC_TIME = 3;
  }
  // Required. The type of reschedule request.
  RescheduleType reschedule_type = 2[(required) = true];

  // The time for SPECIFIC_TIME reschedule. Limited by two weeks since first time scheduled.
  google.protobuf.Timestamp delayed_until = 3;
}

message RescheduleMaintenanceMetadata {
  // Required. ID of the Redis cluster.
  string cluster_id = 1;

  // Required. New time of the planned maintenance. Can be in the past for rescheduled to "IMMEDIATE".
  google.protobuf.Timestamp delayed_until = 4;
}

message StartClusterFailoverRequest {
  // Required. ID of the Redis cluster.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];
  // List of hostnames which should not be masters. Can be empty for sentinel clusters or can contain multiple hosts for sharded clusters.
  repeated string host_names = 2 [(length) = "<=253"];
}

message StartClusterFailoverMetadata {
  // Required. ID of the Redis cluster.
  string cluster_id = 1;
  // List of hostnames which should not be masters. Can be empty for sentinel clusters or can contain multiple hosts for sharded clusters.
  repeated string host_names = 2;
}

message LogRecord {
  google.protobuf.Timestamp timestamp = 1;

  map<string, string> message = 2;
}

message ListClusterLogsRequest {
  // Required. ID of the Redis cluster.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // Columns from logs table to get in the response.
  repeated string column_filter = 2;

  ServiceType service_type = 3;

  enum ServiceType {
    SERVICE_TYPE_UNSPECIFIED = 0;
    REDIS = 1;
  }

  // Start timestamp for the logs request.
  google.protobuf.Timestamp from_time = 4;

  // End timestamp for the logs request.
  google.protobuf.Timestamp to_time = 5;

  // The maximum number of results per page that should be returned. If the number of available
  // results is larger than `page_size`, the service returns a `next_page_token` that can be used
  // to get the next page of results in subsequent ListLogs requests.
  // Acceptable values are 0 to 1000, inclusive. Default value: 100.
  int64 page_size = 6 [(value) = "0-1000"];

  // Page token. Set `page_token` to the `next_page_token` returned by a previous ListLogs
  // request to get the next page of results.
  string page_token = 7 [(length) = "<=100"];

  // Always return `next_page_token`, even if current page is empty.
  bool always_next_page_token = 8;

  // A filter expression that filters resources listed in the response.
  // The expression must specify:
  // 1. The field name. Currently filtering can be applied to the [LogRecord.logs.message.hostname] field.
  // 2. A conditional operator. Can be either `=` or `!=` for single values, `IN` or `NOT IN` for lists of values.
  // 3. The value. Must be 1-63 characters long and match the regular expression `^[a-z0-9.-]{1,61}$`.
  // Examples of a filter `message.hostname='node1.db.cloud.yandex.net'`.
  string filter = 9 [(length) = "<=1000"];
}

message ListClusterLogsResponse {
  // Requested log records.
  repeated LogRecord logs = 1;

  // This token allows you to get the next page of results for ListLogs requests,
  // if the number of results is larger than `page_size` specified in the request.
  // To get the next page, specify the value of `next_page_token` as a value for
  // the `page_token` parameter in the next ListLogs request. Subsequent ListLogs
  // requests will have their own `next_page_token` to continue paging through the results.
  // This value is interchangeable with `next_record_token` from StreamLogs method.
  string next_page_token = 2;
}

message StreamLogRecord {
  // One of the requested log records.
  LogRecord record = 1;

  // This token allows you to continue streaming logs starting from the exact
  // same record. To continue streaming, specify value of `next_record_token`
  // as value for `record_token` parameter in the next StreamLogs request.
  // This value is interchangeable with `next_page_token` from ListLogs method.
  string next_record_token = 2 [(sensitive) = false];
}

message StreamClusterLogsRequest {
  // Required. ID of the Redis cluster.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // Columns from logs table to get in the response.
  repeated string column_filter = 2;

  ServiceType service_type = 3;

  enum ServiceType {
    SERVICE_TYPE_UNSPECIFIED = 0;
    REDIS = 1;
  }

  // Start timestamp for the logs request.
  google.protobuf.Timestamp from_time = 4;

  // End timestamp for the logs request.
  // If this field is not set, all existing logs will be sent and then the new ones as
  // they appear. In essence it has 'tail -f' semantics.
  google.protobuf.Timestamp to_time = 5;

  // Record token. Set `record_token` to the `next_record_token` returned by a previous StreamLogs
  // request to start streaming from next log record.
  string record_token = 6 [(length) = "<=100", (sensitive) = false];

  // A filter expression that filters resources listed in the response.
  // The expression must specify:
  // 1. The field name. Currently filtering can be applied to the [LogRecord.logs.hostname] field
  // 2. A conditional operator. Can be either `=` or `!=` for single values, `IN` or `NOT IN` for lists of values.
  // 3. The value. Must be 3-63 characters long and match the regular expression `^[a-z][-a-z0-9]{1,61}[a-z0-9]$`.
  // Examples of a filter `message.hostname='node1.db.cloud.yandex.net'`.
  string filter = 7 [(length) = "<=1000"];
}

message ListClusterOperationsRequest {
  // Required. ID of the Redis cluster.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // The maximum number of results per page that should be returned. If the number of available
  // results is larger than `page_size`, the service returns a `next_page_token` that can be used
  // to get the next page of results in subsequent ListOperations requests.
  // Acceptable values are 0 to 1000, inclusive. Default value: 100.
  int64 page_size = 2 [(value) = "0-1000"];

  // Page token. Set `page_token` to the `next_page_token` returned by a previous ListOperations
  // request to get the next page of results.
  string page_token = 3 [(length) = "<=100"];
}

message ListClusterOperationsResponse {
  repeated operation.Operation operations = 1;

  // This token allows you to get the next page of results for ListOperations requests,
  // if the number of results is larger than `page_size` specified in the request.
  // To get the next page, specify the value of `next_page_token` as a value for
  // the `page_token` parameter in the next ListOperations request. Subsequent ListOperations
  // requests will have their own `next_page_token` to continue paging through the results.
  string next_page_token = 2;
}

message ListClusterBackupsRequest {
  // Required. ID of the Redis cluster.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // The maximum number of results per page that should be returned. If the number of available
  // results is larger than `page_size`, the service returns a `next_page_token` that can be used
  // to get the next page of results in subsequent ListClusterBackups requests.
  // Acceptable values are 0 to 1000, inclusive. Default value: 100.
  int64 page_size = 2 [(value) = "0-1000"];

  // Page token. Set `page_token` to the `next_page_token` returned by a previous ListClusterBackups
  // request to get the next page of results.
  string page_token = 3 [(length) = "<=100"];
}

message ListClusterBackupsResponse {
  // Requested list of backups.
  repeated Backup backups = 1;

  // This token allows you to get the next page of results for ListClusterBackups requests,
  // if the number of results is larger than `page_size` specified in the request.
  // To get the next page, specify the value of `next_page_token` as a value for
  // the `page_token` parameter in the next ListClusterBackups request. Subsequent ListClusterBackups
  // requests will have their own `next_page_token` to continue paging through the results.
  string next_page_token = 2;
}

message ListClusterHostsRequest {
  // Required. ID of the Redis cluster.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // The maximum number of results per page that should be returned. If the number of available
  // results is larger than `page_size`, the service returns a `next_page_token` that can be used
  // to get the next page of results in subsequent ListClusterHosts requests.
  // Acceptable values are 0 to 1000, inclusive. Default value: 100.
  int64 page_size = 2 [(value) = "0-1000"];

  // Page token. Set `page_token` to the `next_page_token` returned by a previous ListClusterHosts
  // request to get the next page of results.
  string page_token = 3 [(length) = "<=100"];
}

message ListClusterHostsResponse {
  // Requested list of hosts.
  repeated Host hosts = 1;

  // This token allows you to get the next page of results for ListClusterHosts requests,
  // if the number of results is larger than `page_size` specified in the request.
  // To get the next page, specify the value of `next_page_token` as a value for
  // the `page_token` parameter in the next ListClusterHosts request. Subsequent ListClusterHosts
  // requests will have their own `next_page_token` to continue paging through the results.
  string next_page_token = 2;
}

message AddClusterHostsRequest {
  // Required. ID of the Redis cluster.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // Required.
  repeated HostSpec host_specs = 2 [(size) = ">0"];
}

message AddClusterHostsMetadata {
  // Required. ID of the Redis cluster.
  string cluster_id = 1;

  // Required. The name of adding host.
  repeated string host_names = 2;
}

message DeleteClusterHostsRequest {
  // Required. ID of the Redis cluster.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // Required. Name of the host to delete.
  repeated string host_names = 2 [(size) = ">0", (length) = "<=253"];
}

message DeleteClusterHostsMetadata {
  // Required. ID of the Redis cluster.
  string cluster_id = 1;

  // Required. The name of deleting host.
  repeated string host_names = 2;
}

message GetClusterShardRequest {
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  string shard_name = 2 [(required) = true, (length) = "<=63", (pattern) = "[a-zA-Z0-9_-]*"];
}

message ListClusterShardsRequest {
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  int64 page_size = 2 [(value) = "<=1000"];

  string page_token = 3 [(length) = "<=100"];
}

message ListClusterShardsResponse {
  repeated Shard shards = 1;

  string next_page_token = 2;
}

message AddClusterShardRequest {
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  string shard_name = 2 [(required) = true, (length) = "<=63", (pattern) = "[a-zA-Z0-9_-]*"];

  repeated HostSpec host_specs = 4 [(size) = ">0"];
}

message AddClusterShardMetadata {
  string cluster_id = 1;

  string shard_name = 2;
}

message DeleteClusterShardRequest {
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  string shard_name = 2 [(required) = true, (length) = "<=63", (pattern) = "[a-zA-Z0-9_-]*"];
}

message DeleteClusterShardMetadata {
  string cluster_id = 1;

  string shard_name = 2;
}

message RebalanceClusterRequest {
  string cluster_id = 1 [(required) = true, (length) = "<=50"];
}

message RebalanceClusterMetadata {
  string cluster_id = 1;
}

message UpdateHostSpec {
  // Name of the host to update.
  // To get the Redis host name, use a [ClusterService.ListHosts] request.
  string host_name = 1 [(required) = true];

  // A replica with a low priority number is considered better for promotion.
  // A replica with priority of 0 will never be selected by Redis Sentinel for promotion.
  // Works only for non-sharded clusters. Default value is 100.
  google.protobuf.Int64Value replica_priority = 2;

  // Whether the host should get a public IP address on update.
  bool assign_public_ip = 3;

  // Field mask that specifies which fields of the Redis host should be updated.
  google.protobuf.FieldMask update_mask = 4;
}

message HostSpec {
  // ID of the availability zone.
  string zone_id = 1 [(length) = "<=50"];

  string subnet_id = 2 [(length) = "<=50"];

  string shard_name = 3 [(length) = "<=63", (pattern) = "[a-zA-Z0-9_-]*"];

  // A replica with a low priority number is considered better for promotion.
  // A replica with priority of 0 will never be selected by Redis Sentinel for promotion.
  // Works only for non-sharded clusters. Default value is 100.
  google.protobuf.Int64Value replica_priority = 4;

  // Whether the host should get a public IP address on creation.
  //
  // Possible values:
  // * false - don't assign a public IP to the host.
  // * true - the host should have a public IP address.
  bool assign_public_ip = 5;
}

message ConfigSpec {
  // Version of Redis.
  string version = 1;

  oneof redis_spec {
    config.RedisConfig5_0 redis_config_5_0 = 2 [json_name="redisConfig_5_0"];
    config.RedisConfig6_0 redis_config_6_0 = 6 [json_name="redisConfig_6_0"];
    config.RedisConfig6_2 redis_config_6_2 = 7 [json_name="redisConfig_6_2"];
  }

  // Resources allocated to Redis hosts.
  Resources resources = 3;

  // Start time for the daily backup in UTC timezone
  google.type.TimeOfDay backup_window_start = 4;

  // Access policy to DB
  Access access = 5;
}
