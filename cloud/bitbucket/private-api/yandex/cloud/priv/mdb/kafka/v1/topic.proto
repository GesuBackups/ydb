syntax = "proto3";

package yandex.cloud.priv.mdb.kafka.v1;

import "google/protobuf/wrappers.proto";
import "yandex/cloud/priv/validation.proto";
import "yandex/cloud/priv/mdb/kafka/v1/common.proto";

option go_package = "a.yandex-team.ru/cloud/bitbucket/private-api/yandex/cloud/priv/mdb/kafka/v1;kafka";
option java_outer_classname = "KFT";

// A Apache Kafka Topic resource. For more information, see
// the [Developer's Guide](/docs/mdb/kafka/concepts).
message Topic {
  // Name of the topic.
  string name = 1;

  // ID of the Apache Kafka cluster that the topic belongs to.
  string cluster_id = 2;

  // Number of topic partitions.
  google.protobuf.Int64Value partitions = 3;

  // Amount of copies of a topic data kept in a cluster.
  google.protobuf.Int64Value replication_factor = 4;

  // User-defined settings for a topic.
  oneof topic_config {
    TopicConfig2_1 topic_config_2_1 = 5 [json_name="topicConfig_2_1"];
    TopicConfig2_6 topic_config_2_6 = 6 [json_name="topicConfig_2_6"];
    TopicConfig2_8 topic_config_2_8 = 7 [json_name="topicConfig_2_8"];
    TopicConfig3_0 topic_config_3_0 = 8 [json_name="topicConfig_3_0"];
  }
}

message TopicSpec {
  // Name of the topic.
  string name = 1;

  // Number of topic partitions
  google.protobuf.Int64Value partitions = 2 [(value) = ">0"];

  // Amount of copies of a topic data kept in a cluster.
  google.protobuf.Int64Value replication_factor = 3 [(value) = ">0"];

  // User-defined settings for a topic.
  oneof topic_config {
    TopicConfig2_1 topic_config_2_1 = 4 [json_name="topicConfig_2_1"];
    TopicConfig2_6 topic_config_2_6 = 5 [json_name="topicConfig_2_6"];
    TopicConfig2_8 topic_config_2_8 = 6 [json_name="topicConfig_2_8"];
    TopicConfig3_0 topic_config_3_0 = 7 [json_name="topicConfig_3_0"];
  }
}

message TopicConfig2_1 {
  enum CleanupPolicy{
    CLEANUP_POLICY_UNSPECIFIED = 0;

    CLEANUP_POLICY_DELETE = 1;

    CLEANUP_POLICY_COMPACT = 2;

    CLEANUP_POLICY_COMPACT_AND_DELETE = 3;
  }

  // Retention policy to use on old log segments.
  CleanupPolicy cleanup_policy = 1;

  // Specify the final compression type for a given topic.
  CompressionType compression_type = 2;

  // The amount of time to retain delete tombstone markers for log compacted topics.
  google.protobuf.Int64Value delete_retention_ms = 3;

  // The time to wait before deleting a file from the filesystem
  google.protobuf.Int64Value file_delete_delay_ms = 4;

  // This setting allows specifying an interval at which we will force an fsync of data written to the log
  google.protobuf.Int64Value flush_messages = 5;

  // This setting allows specifying a time interval at which we will force an fsync of data written to the log
  google.protobuf.Int64Value flush_ms = 6;

  // The minimum time a message will remain uncompacted in the log.
  google.protobuf.Int64Value min_compaction_lag_ms = 7;

  // This configuration controls the maximum size a partition (which consists of log segments) can grow to before
  // we will discard old log segments to free up space if we are using the "delete" retention policy
  google.protobuf.Int64Value retention_bytes = 8;

  // This configuration controls the maximum time we will retain a log before we will discard old log segments
  // to free up space if we are using the "delete" retention policy.
  google.protobuf.Int64Value retention_ms = 9;

  // The largest record batch size allowed in topic.
  google.protobuf.Int64Value max_message_bytes = 10;

  // This configuration specifies the minimum number of replicas that must acknowledge a write to topic for the write
  // to be considered successful (when a producer sets acks to "all").
  google.protobuf.Int64Value min_insync_replicas = 11;

  // This configuration controls the segment file size for the log. Retention and cleaning is always done a file
  // at a time so a larger segment size means fewer files but less granular control over retention.
  google.protobuf.Int64Value segment_bytes = 12;

  // True if we should preallocate the file on disk when creating a new log segment.
  google.protobuf.BoolValue preallocate = 13;
}

message TopicConfig2_6 {
  enum CleanupPolicy{
    CLEANUP_POLICY_UNSPECIFIED = 0;

    CLEANUP_POLICY_DELETE = 1;

    CLEANUP_POLICY_COMPACT = 2;

    CLEANUP_POLICY_COMPACT_AND_DELETE = 3;
  }

  // Retention policy to use on old log segments.
  CleanupPolicy cleanup_policy = 1;

  // Specify the final compression type for a given topic.
  CompressionType compression_type = 2;

  // The amount of time to retain delete tombstone markers for log compacted topics.
  google.protobuf.Int64Value delete_retention_ms = 3;

  // The time to wait before deleting a file from the filesystem
  google.protobuf.Int64Value file_delete_delay_ms = 4;

  // This setting allows specifying an interval at which we will force an fsync of data written to the log
  google.protobuf.Int64Value flush_messages = 5;

  // This setting allows specifying a time interval at which we will force an fsync of data written to the log
  google.protobuf.Int64Value flush_ms = 6;

  // The minimum time a message will remain uncompacted in the log.
  google.protobuf.Int64Value min_compaction_lag_ms = 7;

  // This configuration controls the maximum size a partition (which consists of log segments) can grow to before
  // we will discard old log segments to free up space if we are using the "delete" retention policy
  google.protobuf.Int64Value retention_bytes = 8;

  // This configuration controls the maximum time we will retain a log before we will discard old log segments
  // to free up space if we are using the "delete" retention policy.
  google.protobuf.Int64Value retention_ms = 9;

  // The largest record batch size allowed in topic.
  google.protobuf.Int64Value max_message_bytes = 10;

  // This configuration specifies the minimum number of replicas that must acknowledge a write to topic for the write
  // to be considered successful (when a producer sets acks to "all").
  google.protobuf.Int64Value min_insync_replicas = 11;

  // This configuration controls the segment file size for the log. Retention and cleaning is always done a file
  // at a time so a larger segment size means fewer files but less granular control over retention.
  google.protobuf.Int64Value segment_bytes = 12;

  // True if we should preallocate the file on disk when creating a new log segment.
  google.protobuf.BoolValue preallocate = 13;
}

message TopicConfig2_8 {
  enum CleanupPolicy{
    CLEANUP_POLICY_UNSPECIFIED = 0;

    CLEANUP_POLICY_DELETE = 1;

    CLEANUP_POLICY_COMPACT = 2;

    CLEANUP_POLICY_COMPACT_AND_DELETE = 3;
  }

  // Retention policy to use on old log segments.
  CleanupPolicy cleanup_policy = 1;

  // Specify the final compression type for a given topic.
  CompressionType compression_type = 2;

  // The amount of time to retain delete tombstone markers for log compacted topics.
  google.protobuf.Int64Value delete_retention_ms = 3;

  // The time to wait before deleting a file from the filesystem
  google.protobuf.Int64Value file_delete_delay_ms = 4;

  // This setting allows specifying an interval at which we will force an fsync of data written to the log
  google.protobuf.Int64Value flush_messages = 5;

  // This setting allows specifying a time interval at which we will force an fsync of data written to the log
  google.protobuf.Int64Value flush_ms = 6;

  // The minimum time a message will remain uncompacted in the log.
  google.protobuf.Int64Value min_compaction_lag_ms = 7;

  // This configuration controls the maximum size a partition (which consists of log segments) can grow to before
  // we will discard old log segments to free up space if we are using the "delete" retention policy
  google.protobuf.Int64Value retention_bytes = 8;

  // This configuration controls the maximum time we will retain a log before we will discard old log segments
  // to free up space if we are using the "delete" retention policy.
  google.protobuf.Int64Value retention_ms = 9;

  // The largest record batch size allowed in topic.
  google.protobuf.Int64Value max_message_bytes = 10;

  // This configuration specifies the minimum number of replicas that must acknowledge a write to topic for the write
  // to be considered successful (when a producer sets acks to "all").
  google.protobuf.Int64Value min_insync_replicas = 11;

  // This configuration controls the segment file size for the log. Retention and cleaning is always done a file
  // at a time so a larger segment size means fewer files but less granular control over retention.
  google.protobuf.Int64Value segment_bytes = 12;

  // True if we should preallocate the file on disk when creating a new log segment.
  google.protobuf.BoolValue preallocate = 13;
}

message TopicConfig3_0 {
  enum CleanupPolicy{
    CLEANUP_POLICY_UNSPECIFIED = 0;

    CLEANUP_POLICY_DELETE = 1;

    CLEANUP_POLICY_COMPACT = 2;

    CLEANUP_POLICY_COMPACT_AND_DELETE = 3;
  }

  // Retention policy to use on old log segments.
  CleanupPolicy cleanup_policy = 1;

  // Specify the final compression type for a given topic.
  CompressionType compression_type = 2;

  // The amount of time to retain delete tombstone markers for log compacted topics.
  google.protobuf.Int64Value delete_retention_ms = 3;

  // The time to wait before deleting a file from the filesystem
  google.protobuf.Int64Value file_delete_delay_ms = 4;

  // This setting allows specifying an interval at which we will force an fsync of data written to the log
  google.protobuf.Int64Value flush_messages = 5;

  // This setting allows specifying a time interval at which we will force an fsync of data written to the log
  google.protobuf.Int64Value flush_ms = 6;

  // The minimum time a message will remain uncompacted in the log.
  google.protobuf.Int64Value min_compaction_lag_ms = 7;

  // This configuration controls the maximum size a partition (which consists of log segments) can grow to before
  // we will discard old log segments to free up space if we are using the "delete" retention policy
  google.protobuf.Int64Value retention_bytes = 8;

  // This configuration controls the maximum time we will retain a log before we will discard old log segments
  // to free up space if we are using the "delete" retention policy.
  google.protobuf.Int64Value retention_ms = 9;

  // The largest record batch size allowed in topic.
  google.protobuf.Int64Value max_message_bytes = 10;

  // This configuration specifies the minimum number of replicas that must acknowledge a write to topic for the write
  // to be considered successful (when a producer sets acks to "all").
  google.protobuf.Int64Value min_insync_replicas = 11;

  // This configuration controls the segment file size for the log. Retention and cleaning is always done a file
  // at a time so a larger segment size means fewer files but less granular control over retention.
  google.protobuf.Int64Value segment_bytes = 12;

  // True if we should preallocate the file on disk when creating a new log segment.
  google.protobuf.BoolValue preallocate = 13;
}
