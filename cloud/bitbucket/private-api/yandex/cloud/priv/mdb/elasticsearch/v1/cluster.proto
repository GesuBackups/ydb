syntax = "proto3";

package yandex.cloud.priv.mdb.elasticsearch.v1;

import "google/protobuf/timestamp.proto";
import "yandex/cloud/api/tools/options.proto";
import "yandex/cloud/priv/mdb/elasticsearch/v1/config/elasticsearch.proto";
import "yandex/cloud/priv/mdb/elasticsearch/v1/maintenance.proto";

option go_package = "a.yandex-team.ru/cloud/bitbucket/private-api/yandex/cloud/priv/mdb/elasticsearch/v1;elasticsearch";
option java_outer_classname = "PESC";

//  Elasticsearch cluster resource
message Cluster {
  enum Environment {
    ENVIRONMENT_UNSPECIFIED = 0;

    // Stable environment with a conservative update policy:
    // only hotfixes are applied during regular maintenance.
    PRODUCTION = 1;

    // Environment with more aggressive update policy: new versions
    // are rolled out irrespective of backward compatibility.
    PRESTABLE = 2;
  }

  enum Health {
    option (cloud.api.tools.enumeration).lint_skip.unspecified_value = true;

    // State of the cluster is unknown ([Host.health] for every host in the cluster is UNKNOWN).
    HEALTH_UNKNOWN = 0;

    // Cluster is alive and well ([Host.health] for every host in the cluster is ALIVE).
    ALIVE = 1;

    // Cluster is inoperable ([Host.health] for every host in the cluster is DEAD).
    DEAD = 2;

    // Cluster is working below capacity ([Host.health] for at least one host in the cluster is not ALIVE).
    DEGRADED = 3;
  }

  enum Status {
    option (cloud.api.tools.enumeration).lint_skip.unspecified_value = true;

    // Cluster state is unknown.
    STATUS_UNKNOWN = 0;

    // Cluster is being created.
    CREATING = 1;

    // Cluster is running normally.
    RUNNING = 2;

    // Cluster encountered a problem and cannot operate.
    ERROR = 3;

    // Cluster is being updated.
    UPDATING = 4;

    // Cluster is stopping.
    STOPPING = 5;

    // Cluster stopped.
    STOPPED = 6;

    // Cluster is starting.
    STARTING = 7;
  }

  // ID of the ElasticSearch cluster.
  // This ID is assigned by MDB at creation time.
  string id = 1;

  // ID of the folder that the ElasticSearch cluster belongs to.
  string folder_id = 2;

  // Creation timestamp in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
  google.protobuf.Timestamp created_at = 3;

  // Name of the ElasticSearch cluster.
  // The name is unique within the folder. 1-63 characters long.
  string name = 4;

  // Description of the ElasticSearch cluster. 0-256 characters long.
  string description = 5;

  // Custom labels for the ElasticSearch cluster as `` key:value `` pairs.
  // Maximum 64 per resource.
  map<string, string> labels = 6;

  // Deployment environment of the ElasticSearch cluster.
  Environment environment = 7;

  // Description of monitoring systems relevant to the ElasticSearch cluster.
  repeated Monitoring monitoring = 8;

  // Configuration of the ElasticSearch cluster.
  ClusterConfig config = 9;

  // ID of the network that the cluster belongs to.
  string network_id = 10;

  // Aggregated cluster health.
  Health health = 11;

  // Current state of the cluster.
  Status status = 12;

  // User security groups
  repeated string security_group_ids = 13;

  // ID of the service account used for access to Yandex Object Storage.
  string service_account_id = 14;

  // Deletion Protection inhibits deletion of the cluster
  bool deletion_protection = 15;

  // Window of maintenance operations
  MaintenanceWindow maintenance_window = 16;

  // Maintenance operation planned at nearest maintenance_window
  MaintenanceOperation planned_operation = 17;
}

// Monitoring system.
message Monitoring {
  // Name of the monitoring system.
  string name = 1;

  // Description of the monitoring system.
  string description = 2;

  // Link to the monitoring system charts.
  string link = 3;
}

message ClusterConfig {
  // ElasticSearch version.
  string version = 1;

  // ElasticSearch configuration.
  Elasticsearch elasticsearch = 2;

  // ElasticSearch edition.
  string edition = 3;

  // Access policy for external services.
  Access access = 4;
}

message Elasticsearch {
  message DataNode {
    oneof config {
      config.ElasticsearchConfigSet7 elasticsearch_config_set_7 = 1 [json_name="elasticsearchConfigSet_7"];
    }
    // Resources allocated to data node hosts.
    Resources resources = 2;
  }

  message MasterNode {
    // Resources allocated to master node hosts.
    Resources resources = 1;
  }

  DataNode data_node = 1;
  MasterNode master_node = 2;
  
  // Cluster wide plugins
  repeated string plugins = 3;
}

message Resources {
  // ID of the preset for computational resources available to a host (CPU, memory etc.).
  string resource_preset_id = 1;

  // Volume of the storage available to a host, in bytes.
  int64 disk_size = 2;

  // Type of the storage environment for the host.
  string disk_type_id = 3;
}

message Host {
  enum Type {
    TYPE_UNSPECIFIED = 0;
    DATA_NODE = 1;
    MASTER_NODE = 2;
  }

  enum Health {
    option (cloud.api.tools.enumeration).lint_skip.unspecified_value = true;
    UNKNOWN = 0; // Host is in unknown state (we have no data)
    ALIVE = 1; // Host is alive and well (all services are alive)
    DEAD = 2; // Host is inoperable (it cannot perform any of its essential functions)
    DEGRADED = 3; // Host is partially alive (it can perform some of its essential functions)
  }

  message CPUMetric {
      int64 timestamp = 1;
      double used = 2;
  }

  message MemoryMetric {
      int64 timestamp = 1;
      int64 used = 2;
      int64 total = 3;
  }

  message DiskMetric {
      int64 timestamp = 1;
      int64 used = 2;
      int64 total = 3;
  }

  message SystemMetrics {
      CPUMetric cpu = 1;
      MemoryMetric memory = 2;
      DiskMetric disk = 3;
  }

  // Required. Name of the host.
  string name = 1;

  // Required. ID of the ElasticSearch cluster.
  string cluster_id = 2;

  // ID of the availability zone.
  string zone_id = 3;

  // Host type.
  Type type = 4;

  // Resources allocated to the host.
  Resources resources = 5;

  // Aggregated host health
  Health health = 6;

  // Services provided by the host.
  repeated Service services = 7;

  string subnet_id = 8;

  bool assign_public_ip = 9;

  // System metrics
  SystemMetrics system = 10;
}

message Service {
  enum Type {
    TYPE_UNSPECIFIED = 0;
    ELASTICSEARCH = 1;
  }

  enum Health {
    option (cloud.api.tools.enumeration).lint_skip.unspecified_value = true;

    // Health of the server is unknown.
    UNKNOWN = 0;

    // The server is working normally.
    ALIVE = 1;

    // The server is dead or unresponsive.
    DEAD = 2;
  }

  // Type of the service provided by the host.
  Type type = 1;

  // Status code of server availability.
  Health health = 2;
}

message Access {
  // Allow access for Web SQL.
  bool web_sql = 1;

  // Allow access for DataTransfer.
  // NOTE: Do not propagate to public API until Data Transfer integration is required.
  bool data_transfer = 2;

  // Allow access for Serverless.
  // NOTE: Do not propagate to public API until Serverless integration is required.
  bool serverless = 3;

}
