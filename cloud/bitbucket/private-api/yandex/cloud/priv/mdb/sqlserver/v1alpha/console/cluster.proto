syntax = "proto3";

package yandex.cloud.priv.mdb.sqlserver.v1alpha.console;

import "google/protobuf/any.proto";
import "yandex/cloud/priv/mdb/sqlserver/v1alpha/config/sqlserver2016sp2.proto";

option go_package = "a.yandex-team.ru/cloud/bitbucket/private-api/yandex/cloud/priv/mdb/sqlserver/v1alpha/console;sqlserver_console";
option java_outer_classname = "PSCO";

message SQLServerClustersConfig {
  // Required
  NameValidator cluster_name = 1;

  // Required
  NameValidator db_name = 2;

  // Required
  NameValidator user_name = 3;

  // Required
  NameValidator password = 4;

  message HostCountLimits {
    // Required. Minimum number of hosts per cluster.
    int64 min_host_count = 1;
    // Required. Maximum number of hosts per cluster.
    int64 max_host_count = 2;
  }

  // Required
  HostCountLimits host_count_limits = 5;

  message ResourcePreset {

    message Zone {
      // Required. Zone location ID
      string zone_id = 1;

      message DiskType {
        // Required. Disk type ID
        string disk_type_id = 1;

        // Required. Min host count for disk type
        int64 min_hosts = 2;

        // Required. Max host count for disk type
        int64 max_hosts = 3;

        message DiskSizeRange {
          // Required. Minimum disk size in bytes
          int64 min = 1;
          // Required. Maximum disk size in bytes
          int64 max = 2;
        }

        message DiskSizes {
          // Required. List of disk sizes in bytes
          repeated int64 sizes = 1;
        }

        // Allowed disk sizes. Either in form of disk size range or list of disk sizes
        oneof DiskSize {
          DiskSizeRange disk_size_range = 4;
          DiskSizes disk_sizes = 5;
        }
      }

      // Required. Disk types for this preset
      repeated DiskType disk_types = 2;
    }

    // Required. Preset ID
    string preset_id = 1;
    // Required. CPU limit for this preset
    int64 cpu_limit = 2;
    // Required. Memory limit for this preset
    int64 memory_limit = 3;
    // Required. Available zones
    repeated Zone zones = 4;
    // Required. Generation of this preset
    int64 generation = 5;
    // Required. Generation name of this preset
    string generation_name = 6;
    // Required. Flavor type of this preset
    string type = 7;
    // Required. CPU fraction of this preset
    int64 cpu_fraction = 8;
    // Required. Is flavor decommissioned
    bool decomissioning = 9;
  }

  // Required. Available resource presets
  repeated ResourcePreset resource_presets = 6;

  message DefaultResources {
    // Required. Preset ID
    string resource_preset_id = 1;
    // Required. Disk type ID
    string disk_type_id = 2;
    // Required. Disk size
    int64 disk_size = 3;
    // Required. Generation of this preset
    int64 generation = 4;
    // Required. Generation name of this preset
    string generation_name = 5;
  }

  // Required. Default resources
  DefaultResources default_resources = 7;

  // Required. Available version numbers
  repeated string versions = 8;

  message VersionInfo {
    // Required. Version ID
    string id = 1;
    // Required. Version name
    string name = 2;
    // Required. Is version deprecated
    bool deprecated = 3;
    // Required. List of versions that can be updated from current
    repeated string updatable_to = 4;
  }

  // Required. Available versions
  repeated VersionInfo available_versions = 9;

  // Required. Default version
  string default_version = 10;


  message Config2016sp2 {
    Int64Range max_degree_of_parallelism = 1;
    Int64Range cost_threshold_for_parallelism = 2;
    // List of available values
    repeated string sqlcollation = 3;
    Int64Range audit_level = 4;
    Int64Range filestream_access_level = 5;
    Int64Range fill_factor_percent = 6;
    Int64Range in_doubt_xact_resolution = 7;
  }

  // Required. Available config values
  Config2016sp2 config_2016sp2 = 11 [json_name="config_2016sp2"];

  config.SQLServerConfig2016sp2 default_config_2016sp2 = 12 [json_name="sqlserverConfig_2016sp2"];
}

message NameValidator {
  // Required. Regex for valid name
  string regexp = 1;
  // Required. Minimum length in symbols
  int64 min = 2;
  // Required. Maximum length in symbols
  int64 max = 3;
  // List of banned values
  repeated string blacklist = 4;
}

message BillingMetric {
  // ID of the folder for metric
  string folder_id = 1;
  // Billing metric schema spec
  string schema = 2;
  // Billing tags
  map<string, google.protobuf.Any> tags = 3;
}

message BillingEstimateResponse {
  // List of billing metrics of estimation
  repeated BillingMetric metrics = 1;
}

message ClustersStats {
  // clusters count in folder
  int64 clusters_count = 1;
}

message Int64Range {
    // Minimum valid value
    int64 min = 1;
    // Maximum valid value
    int64 max = 2;
}
