syntax = "proto3";

package yandex.cloud.priv.mdb.sqlserver.v1;

import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "google/type/timeofday.proto";
import "yandex/cloud/api/operation.proto";
import "yandex/cloud/api/tools/options.proto";
import "yandex/cloud/priv/operation/operation.proto";
import "yandex/cloud/priv/validation.proto";
import "yandex/cloud/priv/mdb/sqlserver/v1/backup.proto";
import "yandex/cloud/priv/mdb/sqlserver/v1/cluster.proto";
import "yandex/cloud/priv/mdb/sqlserver/v1/database.proto";
import "yandex/cloud/priv/mdb/sqlserver/v1/user.proto";
import "yandex/cloud/priv/mdb/sqlserver/v1/config/sqlserver2016sp2.proto";
import "yandex/cloud/priv/mdb/sqlserver/v1/config/sqlserver2017.proto";
import "yandex/cloud/priv/mdb/sqlserver/v1/config/sqlserver2019.proto";

option go_package = "a.yandex-team.ru/cloud/bitbucket/private-api/yandex/cloud/priv/mdb/sqlserver/v1;sqlserver";
option java_outer_classname = "PSCS";

// A set of methods for managing sqlserver clusters.
service ClusterService {
  // Returns the specified sqlserver cluster.
  //
  // To get the list of available sqlserver clusters, make a [List] request.
  rpc Get (GetClusterRequest) returns (Cluster) {
    option (google.api.http) = {get: "/mdb/sqlserver/v1/clusters/{cluster_id}"};
  }

  // Retrieves the list of sqlserver clusters that belong to the specified folder.
  rpc List (ListClustersRequest) returns (ListClustersResponse) {
    option (google.api.http) = {get: "/mdb/sqlserver/v1/clusters"};
  }

  // Creates a sqlserver cluster in the specified folder.
  rpc Create (CreateClusterRequest) returns (operation.Operation) {
    option (google.api.http) = {post: "/mdb/sqlserver/v1/clusters" body: "*"};
    option (yandex.cloud.api.operation) = {
      metadata: "CreateClusterMetadata"
      response: "Cluster"
    };
  }

  // Modifies the specified sqlserver cluster.
  rpc Update (UpdateClusterRequest) returns (operation.Operation) {
    option (google.api.http) = {patch: "/mdb/sqlserver/v1/clusters/{cluster_id}" body: "*"};
    option (yandex.cloud.api.operation) = {
      metadata: "UpdateClusterMetadata"
      response: "Cluster"
    };
  }

  // Deletes the specified sqlserver cluster.
  rpc Delete (DeleteClusterRequest) returns (operation.Operation) {
    option (google.api.http) = {delete: "/mdb/sqlserver/v1/clusters/{cluster_id}"};
    option (yandex.cloud.api.operation) = {
      metadata: "DeleteClusterMetadata"
      response: "google.protobuf.Empty"
    };
  }

  // Starts the specified sqlserver cluster.
  rpc Start (StartClusterRequest) returns (operation.Operation) {
    option (google.api.http) = {post: "/mdb/sqlserver/v1/clusters/{cluster_id}:start"};
    option (yandex.cloud.api.operation) = {
      metadata: "StartClusterMetadata"
      response: "Cluster"
    };
  }

  // Stops the specified sqlserver cluster.
  rpc Stop (StopClusterRequest) returns (operation.Operation) {
    option (google.api.http) = {post: "/mdb/sqlserver/v1/clusters/{cluster_id}:stop"};
    option (yandex.cloud.api.operation) = {
      metadata: "StopClusterMetadata"
      response: "Cluster"
    };
  }

  // Moves the specified sqlserver cluster to the specified folder.
  rpc Move (MoveClusterRequest) returns (operation.Operation) {
    option (google.api.http) = {post: "/mdb/sqlserver/v1/clusters/{cluster_id}:move" body: "*"};
    option (yandex.cloud.api.operation) = {
      metadata: "MoveClusterMetadata"
      response: "Cluster"
    };
  }

  // Creates a backup for the specified sqlserver cluster.
  rpc Backup (BackupClusterRequest) returns (operation.Operation) {
    option (google.api.http) = {post: "/mdb/sqlserver/v1/clusters/{cluster_id}:backup"};
    option (yandex.cloud.api.operation) = {
      metadata: "BackupClusterMetadata"
      response: "Cluster"
    };
  }

  // Creates a new sqlserver cluster using the specified backup.
  rpc Restore (RestoreClusterRequest) returns (operation.Operation) {
    option (google.api.http) = {post: "/mdb/sqlserver/v1/clusters:restore" body: "*"};
    option (yandex.cloud.api.operation) = {
      metadata: "RestoreClusterMetadata"
      response: "Cluster"
    };
  }

  // Starts a manual failover for a cluster.
  rpc StartFailover (StartClusterFailoverRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/mdb/sqlserver/v1/clusters/{cluster_id}:startFailover" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "StartClusterFailoverMetadata"
      response: "Cluster"
    };
  }

  // Retrieves logs for the specified sqlserver cluster.
  // For more information about logs, see the [Logs](/docs/managed-sqlserver/concepts/logs) section in the documentation.
  rpc ListLogs (ListClusterLogsRequest) returns (ListClusterLogsResponse) {
    option (google.api.http) = {get: "/mdb/sqlserver/v1/clusters/{cluster_id}:logs"};
  }

  // Retrieves the list of operations for the specified sqlserver cluster.
  rpc ListOperations (ListClusterOperationsRequest) returns (ListClusterOperationsResponse) {
    option (google.api.http) = {get: "/mdb/sqlserver/v1/clusters/{cluster_id}/operations"};
  }

  // Retrieves the list of available backups for the specified sqlserver cluster.
  rpc ListBackups (ListClusterBackupsRequest) returns (ListClusterBackupsResponse) {
    option (google.api.http) = {get: "/mdb/sqlserver/v1/clusters/{cluster_id}/backups"};
  }

  // Retrieves a list of hosts for the specified sqlserver cluster.
  rpc ListHosts (ListClusterHostsRequest) returns (ListClusterHostsResponse) {
    option (google.api.http) = {get: "/mdb/sqlserver/v1/clusters/{cluster_id}/hosts"};
  }

  // Updates the specified hosts.
  rpc UpdateHosts (UpdateClusterHostsRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/mdb/sqlserver/v1/clusters/{cluster_id}/hosts:batchUpdate" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "UpdateClusterHostsMetadata"
      response: "google.protobuf.Empty"
    };
    option (yandex.cloud.api.tools.method).lint_skip.http_verb = true;
  }

}


message GetClusterRequest {
  // ID of the sqlserver cluster to return.
  // To get the cluster ID use a [ClusterService.List] request.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];
}

message ListClustersRequest {
  // ID of the folder to list sqlserver clusters in.
  // To get the folder ID, use a [yandex.cloud.resourcemanager.v1.FolderService.List] request.
  string folder_id = 1 [(required) = true, (length) = "<=50"];

  // The maximum number of results per page to return. If the number of available
  // results is larger than [page_size], the service returns a [ListClustersResponse.next_page_token]
  // that can be used to get the next page of results in subsequent list requests.
  int64 page_size = 2 [(value) = "0-1000"];

  // Page token. To get the next page of results, set [page_token] to the [ListClustersResponse.next_page_token]
  // returned by a previous list request.
  string page_token = 3 [(length) = "<=100"];

  // A filter expression that filters resources listed in the response.
  // The expression must specify:
  // 1. The field name. Currently you can only use filtering with the [Cluster.name] field.
  // 2. An operator. Can be either `=` or `!=` for single values, `IN` or `NOT IN` for lists of values.
  // 3. The value. Must be 1-63 characters long and match the regular expression `^[a-zA-Z0-9_-]+$`.
  string filter = 4 [(length) = "<=1000"];
}

message ListClustersResponse {
  // List of sqlserver clusters.
  repeated Cluster clusters = 1;

  // This token allows you to get the next page of results for list requests. If the number of results
  // is larger than [ListClustersRequest.page_size], use the [next_page_token] as the value
  // for the [ListClustersRequest.page_token] parameter in the next list request. Each subsequent
  // list request will have its own [next_page_token] to continue paging through the results.
  string next_page_token = 2;
}

message CreateClusterRequest {
  // ID of the folder to create the sqlserver cluster in.
  string folder_id = 1 [(required) = true, (length) = "<=50"];

  // Name of the sqlserver cluster. The name must be unique within the folder.
  string name = 2 [(required) = true, (length) = "<=63", (pattern) = "[a-zA-Z0-9_-]*"];

  // Description of the sqlserver cluster.
  string description = 3 [(length) = "<=256"];

  // Custom labels for the sqlserver cluster as `key:value` pairs. Maximum 64 per resource.
  // For example, "project": "mvp" or "source": "dictionary".
  map<string, string> labels = 4 [(priv.size) = "<=64", (length) = "<=63", (pattern) = "[-_0-9a-z]*", (map_key).length = "1-63", (map_key).pattern = "[a-z][-_0-9a-z]*"];

  // Deployment environment of the sqlserver cluster.
  Cluster.Environment environment = 5;

  // Configuration and resources for hosts that should be created for the sqlserver cluster.
  ConfigSpec config_spec = 6;

  // Descriptions of databases to be created in the sqlserver cluster.
  repeated DatabaseSpec database_specs = 7;

  // Descriptions of database logins to be created in the sqlserver cluster.
  repeated UserSpec user_specs = 8;

  // Individual configurations for hosts that should be created for the sqlserver cluster.
  repeated HostSpec host_specs = 9;

  // ID of the network to create the cluster in.
  string network_id = 10 [(length) = "<=50"];

  // User security groups
  repeated string security_group_ids = 11;

  //name of SQL Collation that cluster will be created with
  string sqlcollation = 12 [(length) = "<=100"];

  // Deletion Protection inhibits deletion of the cluster
  bool deletion_protection = 13;

  // Host groups hosting VMs of the cluster.
  repeated string host_group_ids = 14;

  // ID of the service account used for access to Yandex Object Storage.
  string service_account_id = 15;
}

message CreateClusterMetadata {
  // ID of the sqlserver cluster that is being created.
  string cluster_id = 1;
}

message UpdateClusterRequest {
  // ID of the sqlserver cluster to update.
  // To get the sqlserver cluster ID, use a [ClusterService.List] request.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // Field mask that specifies which fields of the sqlserver cluster should be updated.
  google.protobuf.FieldMask update_mask = 2;

  // New description of the sqlserver cluster.
  string description = 3 [(length) = "<=256"];

  // Custom labels for the sqlserver cluster as `key:value` pairs. Maximum 64 per resource.
  // For example, "project": "mvp" or "source": "dictionary".
  //
  // The new set of labels will completely replace the old ones. To add a label, request the current
  // set with the [ClusterService.Get] method, then send an [ClusterService.Update] request with the new label added to the set.
  map<string, string> labels = 4 [(priv.size) = "<=64", (length) = "<=63", (pattern) = "[-_0-9a-z]*", (map_key).length = "1-63", (map_key).pattern = "[a-z][-_0-9a-z]*"];

  // New configuration and resources for hosts in the cluster.
  ConfigSpec config_spec = 5;

  // New name for the cluster.
  string name = 6 [(length) = "<=63", (pattern) = "[a-zA-Z0-9_-]*"];

  // User security groups
  repeated string security_group_ids = 7;

  // Deletion Protection inhibits deletion of the cluster
  bool deletion_protection = 8;

  // ID of the service account used for access to Yandex Object Storage.
  string service_account_id = 9;
}

message UpdateClusterMetadata {
  // ID of the sqlserver cluster that is being modified.
  string cluster_id = 1;
}

message DeleteClusterRequest {
  // ID of the sqlserver cluster to delete.
  // To get the sqlserver cluster ID, use a [ClusterService.List] request.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];
}

message DeleteClusterMetadata {
  // ID of the sqlserver cluster that is being deleted.
  string cluster_id = 1;
}

message BackupClusterRequest {
  // ID of the sqlserver cluster to back up.
  // To get the sqlserver cluster ID, use a [ClusterService.List] request.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];
}

message BackupClusterMetadata {
  // ID of the sqlserver cluster that is being backed up.
  string cluster_id = 1;
}

message RestoreClusterRequest {
  // ID of the backup to create a cluster from.
  // To get the backup ID, use a [ClusterService.ListBackups] request.
  string backup_id = 1 [(required) = true];

  // Timestamp of the moment to which the sqlserver cluster should be restored.
  google.protobuf.Timestamp time = 2 [(required) = true];

  // Name of the new sqlserver cluster. The name must be unique within the folder.
  string name = 4 [(required) = true, (pattern) = "[a-zA-Z0-9_-]*"];

  // Description of the new sqlserver cluster.
  string description = 5 [(length) = "<=256"];

  // Custom labels for the sqlserver cluster as `key:value` pairs. Maximum 64 per resource.
  // For example, "project": "mvp" or "source": "dictionary".
  map<string, string> labels = 6 [(priv.size) = "<=64", (length) = "<=63", (pattern) = "[-_0-9a-z]*", (map_key).length = "1-63", (map_key).pattern = "[a-z][-_0-9a-z]*"];

  // Deployment environment of the new sqlserver cluster.
  Cluster.Environment environment = 7;

  // Configuration for the sqlserver cluster to be created.
  ConfigSpec config_spec = 8;

  // Configurations for sqlserver hosts that should be added
  // to the cluster that is being created from the backup.
  repeated HostSpec host_specs = 9;

  // ID of the network to create the sqlserver cluster in.
  string network_id = 10 [(length) = "<=50"];

  string folder_id = 11 [(length) = "<=50"];

  // User security groups
  repeated string security_group_ids = 12;

  // Deletion Protection inhibits deletion of the cluster
  bool deletion_protection = 13;

  // Host groups hosting VMs of the cluster.
  repeated string host_group_ids = 14;

  // ID of the service account used for access to Yandex Object Storage.
  string service_account_id = 15;
}

message RestoreClusterMetadata {
  // ID of the new sqlserver cluster that is being created from a backup.
  string cluster_id = 1;

  // ID of the backup that is being used for creating a cluster.
  string backup_id = 2;
}

 message StartClusterFailoverRequest {
   // ID of sqlserver cluster.
   string cluster_id = 1 [(required) = true, (length) = "<=50"];

   // Host name to switch master role to.
   //
   // To get this name, make a [ClusterService.ListHosts] request.
   string host_name = 2 [(length) = "<=253"];
 }

 message StartClusterFailoverMetadata {
   // ID of the sqlserver cluster being failovered.
   string cluster_id = 1;
 }

message LogRecord {
  // Log record timestamp in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
  google.protobuf.Timestamp timestamp = 1;

  // Contents of the log record.
  map<string, string> message = 2;
}

message ListClusterLogsRequest {
  // ID of the sqlserver cluster to request logs for.
  // To get the sqlserver cluster ID use a [ClusterService.List] request.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // Columns from the logs table to request.
  // If no columns are specified, entire log records are returned.
  repeated string column_filter = 2;

  // Type of the service to request logs about.
  ServiceType service_type = 3;

  enum ServiceType {
    SERVICE_TYPE_UNSPECIFIED = 0;

    // sqlserver error log.
    SQLSERVER_ERROR = 1;

    // sqlserver application log.
    SQLSERVER_APPLICATION = 2;
  }

  // Start timestamp for the logs request.
  google.protobuf.Timestamp from_time = 4;

  // End timestamp for the logs request.
  google.protobuf.Timestamp to_time = 5;

  // The maximum number of results per page to return. If the number of available
  // results is larger than [page_size], the service returns a [ListClusterLogsResponse.next_page_token]
  // that can be used to get the next page of results in subsequent list requests.
  int64 page_size = 6 [(value) = "0-1000"];

  // Page token. To get the next page of results, set [page_token] to the
  // [ListClusterLogsResponse.next_page_token] returned by a previous list request.
  string page_token = 7 [(length) = "<=100"];

  // Always return `next_page_token`, even if current page is empty.
  bool always_next_page_token = 8;

  // A filter expression that filters resources listed in the response.
  // The expression must specify:
  // 1. The field name. Currently filtering can be applied to the [LogRecord.logs.message.hostname] field.
  // 2. A conditional operator. Can be either `=` or `!=` for single values, `IN` or `NOT IN` for lists of values.
  // 3. The value. Must be 1-63 characters long and match the regular expression `^[a-z0-9.-]{1,61}$`.
  // Examples of a filter: `message.hostname='node1.db.cloud.yandex.net'`
  string filter = 9 [(length) = "<=1000"];
}

message ListClusterLogsResponse {
  // Requested log records.
  repeated LogRecord logs = 1;

  // This token allows you to get the next page of results for list requests. If the number of results
  // is larger than [ListClusterLogsRequest.page_size], use the [next_page_token] as the value
  // for the [ListClusterLogsRequest.page_token] query parameter in the next list request.
  // Each subsequent list request will have its own [next_page_token] to continue paging through the results.
  string next_page_token = 2;
}

message ListClusterOperationsRequest {
  // ID of the sqlserver cluster to list operations for.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // The maximum number of results per page to return. If the number of available
  // results is larger than [page_size], the service returns a [ListClusterOperationsResponse.next_page_token]
  // that can be used to get the next page of results in subsequent list requests.
  int64 page_size = 2 [(value) = "0-1000"];

  // Page token.  To get the next page of results, set [page_token] to the [ListClusterOperationsResponse.next_page_token]
  // returned by a previous list request.
  string page_token = 3 [(length) = "<=100"];
}

message ListClusterOperationsResponse {
  // List of operations for the specified sqlserver cluster.
  repeated operation.Operation operations = 1;

  // This token allows you to get the next page of results for list requests. If the number of results
  // is larger than [ListClusterOperationsRequest.page_size], use the [next_page_token] as the value
  // for the [ListClusterOperationsRequest.page_token] query parameter in the next list request.
  // Each subsequent list request will have its own [next_page_token] to continue paging through the results.
  string next_page_token = 2;
}

message ListClusterBackupsRequest {
  // ID of the sqlserver cluster.
  // To get the sqlserver cluster ID use a [ClusterService.List] request.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // The maximum number of results per page to return. If the number of available
  // results is larger than [page_size], the service returns a [ListClusterBackupsResponse.next_page_token]
  // that can be used to get the next page of results in subsequent list requests.
  int64 page_size = 2 [(value) = "<=1000"];

  // Page token.  To get the next page of results, set [page_token] to the [ListClusterBackupsResponse.next_page_token]
  // returned by a previous list request.
  string page_token = 3 [(length) = "<=100"];
}

message ListClusterBackupsResponse {
  // List of sqlserver backups.
  repeated Backup backups = 1;

  // This token allows you to get the next page of results for list requests. If the number of results
  // is larger than [ListClusterBackupsRequest.page_size], use the [next_page_token] as the value
  // for the [ListClusterBackupsRequest.page_token] query parameter in the next list request.
  // Each subsequent list request will have its own [next_page_token] to continue paging through the results.
  string next_page_token = 2;
}

message ListClusterHostsRequest {
  // ID of the sqlserver cluster.
  // To get the sqlserver cluster ID use a [ClusterService.List] request.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // The maximum number of results per page to return. If the number of available
  // results is larger than [page_size], the service returns a [ListClusterHostsResponse.next_page_token]
  // that can be used to get the next page of results in subsequent list requests.
  int64 page_size = 2 [(value) = "0-1000"];

  // Page token.  To get the next page of results, set [page_token] to the [ListClusterHostsResponse.next_page_token]
  // returned by a previous list request.
  string page_token = 3 [(length) = "<=100"];
}

message ListClusterHostsResponse {
  // List of sqlserver hosts.
  repeated Host hosts = 1;

  // This token allows you to get the next page of results for list requests. If the number of results
  // is larger than [ListClusterHostsRequest.page_size], use the [next_page_token] as the value
  // for the [ListClusterHostsRequest.page_token] query parameter in the next list request.
  // Each subsequent list request will have its own [next_page_token] to continue paging through the results.
  string next_page_token = 2;
}

message StartClusterRequest {
  // ID of the sqlserver cluster to start.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];
}

message StartClusterMetadata {
  // ID of the sqlserver cluster being started.
  string cluster_id = 1;
}

message StopClusterRequest {
  // ID of the sqlserver cluster to stop.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];
}

message StopClusterMetadata {
  // ID of the sqlserver cluster being stopped.
  string cluster_id = 1;
}

message MoveClusterRequest {
  // ID of the sqlserver cluster to move.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];
  // ID of the destination folder.
  string destination_folder_id = 2 [(required) = true, (length) = "<=50"];
}

message MoveClusterMetadata {
  // ID of the sqlserver cluster being moved.
  string cluster_id = 1;
  // ID of the source folder.
  string source_folder_id = 2;
  // ID of the destnation folder.
  string destination_folder_id = 3;
}

message UpdateClusterHostsMetadata {
  // ID of the sqlserver cluster to modify hosts in.
  string cluster_id = 1;

  // Names of hosts that are being modified.
  repeated string host_names = 2;
}

message HostSpec {
  // ID of the availability zone where the host resides.
  // To get a list of available zones, use the [yandex.cloud.compute.v1.ZoneService.List] request.
  string zone_id = 1 [(length) = "<=50"];

  // ID of the subnet that the host should belong to. This subnet should be a part
  // of the network that the cluster belongs to.
  // The ID of the network is set in the field [Cluster.network_id].
  string subnet_id = 2 [(length) = "<=50"];

  // Whether the host should get a public IP address on creation.
  //
  // After a host has been created, this setting cannot be changed. To remove an assigned public IP, or to assign
  // a public IP to a host without one, recreate the host with [assign_public_ip] set as needed.
  //
  // Possible values:
  // * false - don't assign a public IP to the host.
  // * true - the host should have a public IP address.
  bool assign_public_ip = 3;
}

message UpdateHostSpec {
  // Name of the host to update.
  // To get the SQL Server host name, use a [ClusterService.ListHosts] request.
  string host_name = 1 [(required) = true];

  // Field mask that specifies which fields of the SQL Server host should be updated.
  google.protobuf.FieldMask update_mask = 2;

  // Whether the host should get a public IP address on creation.
  bool assign_public_ip = 3;
}

message UpdateClusterHostsRequest {
  // ID of the SQL Server cluster to update hosts in.
  // To get the SQL Server cluster ID, use a [ClusterService.List] request.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // New configurations to apply to hosts.
  repeated UpdateHostSpec update_host_specs = 2 [(size) = ">0"];
}

message ConfigSpec {
  // Version of sqlserver used in the cluster.
  // Possible values:
  // * 2016sp2dev
  // * 2016sp2std
  // * 2016sp2ent
  // * 2017dev
  // * 2017std
  // * 2017ent
  // * 2019dev
  // * 2019std
  // * 2019ent
  string version = 1; // No formal validation, a list of supported versions should suffice.

  // Configuration of a sqlserver cluster.
  oneof sqlserver_config {
    // Configuration for a sqlserver 2016sp2std cluster.
    config.SQLServerConfig2016sp2std sqlserver_config_2016sp2std = 2 [json_name = "sqlserverConfig_2016sp2std"];
    // Configuration for a sqlserver 2016sp2ent cluster.
    config.SQLServerConfig2016sp2ent sqlserver_config_2016sp2ent = 5 [json_name = "sqlserverConfig_2016sp2ent"];

    // Configuration of a sqlserver 2016sp2dev server.
    config.SQLServerConfig2016sp2dev sqlserver_config_2016sp2dev = 8 [json_name = "sqlserverConfig_2016sp2dev"];

    // Configuration of a sqlserver 2017dev server.
    config.SQLServerConfig2017dev sqlserver_config_2017dev = 9 [json_name = "sqlserverConfig_2017dev"];

    // Configuration of a sqlserver 2017std server.
    config.SQLServerConfig2017std sqlserver_config_2017std = 10 [json_name = "sqlserverConfig_2017std"];

    // Configuration of a sqlserver 2017ent server.
    config.SQLServerConfig2017ent sqlserver_config_2017ent = 11 [json_name = "sqlserverConfig_2017ent"];

    // Configuration of a sqlserver 2019dev server.
    config.SQLServerConfig2019dev sqlserver_config_2019dev = 12 [json_name = "sqlserverConfig_2019dev"];

    // Configuration of a sqlserver 2019std server.
    config.SQLServerConfig2019std sqlserver_config_2019std = 13 [json_name = "sqlserverConfig_2019std"];

    // Configuration of a sqlserver 2019ent server.
    config.SQLServerConfig2019ent sqlserver_config_2019ent = 14 [json_name = "sqlserverConfig_2019ent"];
  }

  // Resources allocated to sqlserver hosts.
  Resources resources = 3;

  // Start time for the daily backup in UTC timezone
  google.type.TimeOfDay backup_window_start = 4;

  // Access policy to DB
  Access access = 6;

  // Secondary replicas connection mode
  ClusterConfig.SecondaryConnections secondary_connections = 7;
}
