syntax = "proto3";

package yandex.cloud.priv.mdb.sqlserver.v1.console;

import "google/protobuf/timestamp.proto";

import "yandex/cloud/priv/mdb/sqlserver/v1/cluster.proto";
import "yandex/cloud/priv/mdb/sqlserver/v1/config/sqlserver2016sp2.proto";
import "yandex/cloud/priv/mdb/sqlserver/v1/config/sqlserver2017.proto";
import "yandex/cloud/priv/mdb/sqlserver/v1/config/sqlserver2019.proto";

option go_package = "a.yandex-team.ru/cloud/bitbucket/private-api/yandex/cloud/priv/mdb/sqlserver/v1/console;sqlserver_console";
option java_outer_classname = "PSCO";

message SQLServerClustersConfig {
  // Required
  NameValidator cluster_name = 1;

  // Required
  NameValidator db_name = 2;

  // Required
  NameValidator user_name = 3;

  // Required
  NameValidator password = 4;

  message HostCountLimits {
    // Required. Minimum number of hosts per cluster.
    int64 min_host_count = 1;
    // Required. Maximum number of hosts per cluster.
    int64 max_host_count = 2;
  }

  // Required
  HostCountLimits host_count_limits = 5;

  message ResourcePreset {

    message Zone {
      // Required. Zone location ID
      string zone_id = 1;

      message DiskType {
        // Required. Disk type ID
        string disk_type_id = 1;

        // Required. Min host count for disk type
        int64 min_hosts = 2;

        // Required. Max host count for disk type
        int64 max_hosts = 3;

        message DiskSizeRange {
          // Required. Minimum disk size in bytes
          int64 min = 1;
          // Required. Maximum disk size in bytes
          int64 max = 2;
        }

        message DiskSizes {
          // Required. List of disk sizes in bytes
          repeated int64 sizes = 1;
        }

        // Allowed disk sizes. Either in form of disk size range or list of disk sizes
        oneof DiskSize {
          DiskSizeRange disk_size_range = 4;
          DiskSizes disk_sizes = 5;
        }
      }

      // Required. Disk types for this preset
      repeated DiskType disk_types = 2;
    }

    // Required. Preset ID
    string preset_id = 1;
    // Required. CPU limit for this preset
    int64 cpu_limit = 2;
    // Required. Memory limit for this preset
    int64 memory_limit = 3;
    // Required. Available zones
    repeated Zone zones = 4;
    // Required. Generation of this preset
    int64 generation = 5;
    // Required. Generation name of this preset
    string generation_name = 6;
    // Required. Flavor type of this preset
    string type = 7;
    // Required. CPU fraction of this preset
    int64 cpu_fraction = 8;
    // Required. Is flavor decommissioned
    bool decomissioning = 9;
  }

  // Required. Available resource presets
  repeated ResourcePreset resource_presets = 6;

  message DefaultResources {
    // Required. Preset ID
    string resource_preset_id = 1;
    // Required. Disk type ID
    string disk_type_id = 2;
    // Required. Disk size
    int64 disk_size = 3;
    // Required. Generation of this preset
    int64 generation = 4;
    // Required. Generation name of this preset
    string generation_name = 5;
  }

  // Required. Default resources
  DefaultResources default_resources = 7;

  // Required. Available version numbers
  repeated string versions = 8;

  message VersionInfo {
    // Required. Version ID
    string id = 1;
    // Required. Version name
    string name = 2;
    // Required. Is version deprecated
    bool deprecated = 3;
    // Required. List of versions that can be updated from current
    repeated string updatable_to = 4;
  }

  // Required. Available versions
  repeated VersionInfo available_versions = 9;

  // Required. Default version
  string default_version = 10;

  message Config2016sp2std {
    Int64Range max_degree_of_parallelism = 1;
    Int64Range cost_threshold_for_parallelism = 2;
    Int64Range audit_level = 4;
    Int64Range fill_factor_percent = 6;
  }

  // Required. Available config values
  Config2016sp2std config_2016sp2std = 11 [json_name="config_2016sp2std"];
  config.SQLServerConfig2016sp2std default_config_2016sp2std = 12 [json_name="sqlserverConfig_2016sp2std"];

  message Config2016sp2ent {
    Int64Range max_degree_of_parallelism = 1;
    Int64Range cost_threshold_for_parallelism = 2;
    Int64Range audit_level = 4;
    Int64Range fill_factor_percent = 6;
  }

  // Required. Available config values
  Config2016sp2ent config_2016sp2ent = 13 [json_name="config_2016sp2ent"];
  config.SQLServerConfig2016sp2ent default_config_2016sp2ent = 14 [json_name="sqlserverConfig_2016sp2ent"];

  message Config2016sp2dev {
    Int64Range max_degree_of_parallelism = 1;
    Int64Range cost_threshold_for_parallelism = 2;
    Int64Range audit_level = 3;
    Int64Range fill_factor_percent = 4;
  }

  // Required. Available config values
  Config2016sp2dev config_2016sp2dev = 15 [json_name="config_2016sp2dev"];
  config.SQLServerConfig2016sp2dev default_config_2016sp2dev = 16 [json_name="sqlserverConfig_2016sp2dev"];

  message Config2017std {
    Int64Range max_degree_of_parallelism = 1;
    Int64Range cost_threshold_for_parallelism = 2;
    Int64Range audit_level = 3;
    Int64Range fill_factor_percent = 4;
  }

  // Required. Available config values
  Config2017std config_2017std = 17 [json_name="config_2017std"];
  config.SQLServerConfig2017std default_config_2017std = 18 [json_name="sqlserverConfig_2017std"];

  message Config2017ent {
    Int64Range max_degree_of_parallelism = 1;
    Int64Range cost_threshold_for_parallelism = 2;
    Int64Range audit_level = 3;
    Int64Range fill_factor_percent = 4;
  }

  // Required. Available config values
  Config2017ent config_2017ent = 19 [json_name="config_2017ent"];
  config.SQLServerConfig2017ent default_config_2017ent = 20 [json_name="sqlserverConfig_2017ent"];

  message Config2017dev {
    Int64Range max_degree_of_parallelism = 1;
    Int64Range cost_threshold_for_parallelism = 2;
    Int64Range audit_level = 3;
    Int64Range fill_factor_percent = 4;
  }

  // Required. Available config values
  Config2017dev config_2017dev = 21 [json_name="config_2017dev"];
  config.SQLServerConfig2017dev default_config_2017dev = 22 [json_name="sqlserverConfig_2017dev"];

  message Config2019std {
    Int64Range max_degree_of_parallelism = 1;
    Int64Range cost_threshold_for_parallelism = 2;
    Int64Range audit_level = 3;
    Int64Range fill_factor_percent = 4;
  }

  // Required. Available config values
  Config2019std config_2019std = 23 [json_name="config_2019std"];
  config.SQLServerConfig2019std default_config_2019std = 24 [json_name="sqlserverConfig_2019std"];

  message Config2019ent {
    Int64Range max_degree_of_parallelism = 1;
    Int64Range cost_threshold_for_parallelism = 2;
    Int64Range audit_level = 3;
    Int64Range fill_factor_percent = 4;
  }

  // Required. Available config values
  Config2019ent config_2019ent = 25 [json_name="config_2019ent"];
  config.SQLServerConfig2019ent default_config_2019ent = 26 [json_name="sqlserverConfig_2019ent"];

  message Config2019dev {
    Int64Range max_degree_of_parallelism = 1;
    Int64Range cost_threshold_for_parallelism = 2;
    Int64Range audit_level = 3;
    Int64Range fill_factor_percent = 4;
  }

  // Required. Available config values
  Config2019dev config_2019dev = 27 [json_name="config_2019dev"];
  config.SQLServerConfig2019dev default_config_2019dev = 28 [json_name="sqlserverConfig_2019dev"];
}

message NameValidator {
  // Required. Regex for valid name
  string regexp = 1;
  // Required. Minimum length in symbols
  int64 min = 2;
  // Required. Maximum length in symbols
  int64 max = 3;
  // List of banned values
  repeated string blacklist = 4;
}

message BillingMetric {
  message BillingTags {
    int64 public_ip = 1;
    string disk_type_id = 2;
    string cluster_type = 3;
    int64 disk_size = 4;
    string resource_preset_id = 5;
    string platform_id = 6;
    int64 cores = 7;
    int64 core_fraction = 8;
    int64 memory = 9;
    int64 software_accelerated_network_cores = 10;
    repeated string roles = 11;
    int64 online = 12;
    string edition = 13;
    int64 on_dedicated_host = 14;
  }

  // ID of the folder for metric
  string folder_id = 1;
  // Billing metric schema spec
  string schema = 2;
  // Billing tags
  BillingTags tags = 3;
}

message BillingEstimateResponse {
  // List of billing metrics of estimation
  repeated BillingMetric metrics = 1;
}

message ClustersStats {
  // clusters count in folder
  int64 clusters_count = 1;
}

message Int64Range {
    // Minimum valid value
    int64 min = 1;
    // Maximum valid value
    int64 max = 2;
}

message RestoreResources {
  // ID of the preset for computational resources available to a host (CPU, memory etc.).
  // All available presets are listed in the [documentation](/docs/managed-sqlserver/concepts/instance-types).
  string resource_preset_id = 1;

  // Volume of the storage available to a host.
  int64 disk_size = 2;
}

message RestoreHints {
  // Required. Source cluster environment
  Cluster.Environment environment = 1;
  // Required. Source cluster network_id
  string network_id = 2;
  // Required. Source cluster resources
  RestoreResources resources = 3;
  // Required. Source cluster SQLServer version
  string version = 4;
  // Required. Minimall restore time
  google.protobuf.Timestamp time = 5;
}

message SQLCollationsHint {
  // Name of SQL Server Collation
  repeated string sqlcollation = 1;
}
