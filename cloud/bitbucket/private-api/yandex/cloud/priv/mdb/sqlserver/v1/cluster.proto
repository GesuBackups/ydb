syntax = "proto3";

package yandex.cloud.priv.mdb.sqlserver.v1;

import "google/protobuf/timestamp.proto";
import "google/type/timeofday.proto";
import "yandex/cloud/api/tools/options.proto";
import "yandex/cloud/priv/mdb/sqlserver/v1/config/sqlserver2016sp2.proto";
import "yandex/cloud/priv/mdb/sqlserver/v1/config/sqlserver2017.proto";
import "yandex/cloud/priv/mdb/sqlserver/v1/config/sqlserver2019.proto";

option go_package = "a.yandex-team.ru/cloud/bitbucket/private-api/yandex/cloud/priv/mdb/sqlserver/v1;sqlserver";
option java_outer_classname = "PSC";

// A sqlserver cluster. For more information, see
// the [documentation](/docs/managed-sqlserver/concepts).
message Cluster {
  enum Environment {
    ENVIRONMENT_UNSPECIFIED = 0;

    // Stable environment with a conservative update policy:
    // only hotfixes are applied during regular maintenance.
    PRODUCTION = 1;

    // Environment with more aggressive update policy: new versions
    // are rolled out irrespective of backward compatibility.
    PRESTABLE = 2;
  }

  enum Health {
    option (cloud.api.tools.enumeration).lint_skip.unspecified_value = true;

    // State of the cluster is unknown ([Host.health] for every host in the cluster is UNKNOWN).
    HEALTH_UNKNOWN = 0;

    // Cluster is alive and well ([Host.health] for every host in the cluster is ALIVE).
    ALIVE = 1;

    // Cluster is inoperable ([Host.health] for every host in the cluster is DEAD).
    DEAD = 2;

    // Cluster is working below capacity ([Host.health] for at least one host in the cluster is not ALIVE).
    DEGRADED = 3;
  }

  enum Status {
    option (cloud.api.tools.enumeration).lint_skip.unspecified_value = true;

    // Cluster state is unknown.
    STATUS_UNKNOWN = 0;

    // Cluster is being created.
    CREATING = 1;

    // Cluster is running normally.
    RUNNING = 2;

    // Cluster encountered a problem and cannot operate.
    ERROR = 3;

    // Cluster is being updated.
    UPDATING = 4;

    // Cluster is stopping.
    STOPPING = 5;

    // Cluster stopped.
    STOPPED = 6;

    // Cluster is starting.
    STARTING = 7;
  }

  // ID of the sqlserver cluster.
  // This ID is assigned by Managed Service for sqlserver at creation time.
  string id = 1;

  // ID of the folder that the sqlserver cluster belongs to.
  string folder_id = 2;

  google.protobuf.Timestamp created_at = 3;

  // Name of the sqlserver cluster.
  // The name must be unique within the folder, comply with RFC 1035
  // and be 1-63 characters long.
  string name = 4;

  // Description of the sqlserver cluster. 0-256 characters long.
  string description = 5;

  // Custom labels for the sqlserver cluster as `key:value` pairs.
  // Maximum 64 per resource.
  map<string, string> labels = 6;

  // Deployment environment of the sqlserver cluster.
  Environment environment = 7;

  // Description of monitoring systems relevant to the sqlserver cluster.
  repeated Monitoring monitoring = 8;

  // Configuration of the sqlserver cluster.
  ClusterConfig config = 9;

  // ID of the network that the cluster belongs to.
  string network_id = 10;

  // Aggregated cluster health.
  Health health = 11;

  // Current state of the cluster.
  Status status = 12;

  // User security groups
  repeated string security_group_ids = 13;

  //SQL Server Collation
  string sqlcollation = 14;

  // Deletion Protection inhibits deletion of the cluster
  bool deletion_protection = 15;

  // Host groups hosting VMs of the cluster.
  repeated string host_group_ids = 16;

  // ID of the service account used for access to Yandex Object Storage.
  string service_account_id = 17;
}

message Monitoring {
  // Name of the monitoring system.
  string name = 1;

  // Description of the monitoring system.
  string description = 2;

  // Link to the monitoring system charts for the sqlserver cluster.
  string link = 3;
}

message ClusterConfig {
  // Version of sqlserver server software.
  string version = 1;

  // Configuration for sqlserver servers in the cluster.
  oneof sqlserver_config {
    // Configuration of a sqlserver 2016sp2 server.
    config.SQLServerConfigSet2016sp2std sqlserver_config_2016sp2std = 2 [json_name="sqlserverConfig_2016sp2std"];

    // Configuration of a sqlserver 2016sp2 server.
    config.SQLServerConfigSet2016sp2ent sqlserver_config_2016sp2ent = 5 [json_name="sqlserverConfig_2016sp2ent"];

    // Configuration of a sqlserver 2016sp2 server.
    config.SQLServerConfigSet2016sp2dev sqlserver_config_2016sp2dev = 8 [json_name="sqlserverConfig_2016sp2dev"];

    // Configuration of a sqlserver 2017 server.
    config.SQLServerConfigSet2017dev sqlserver_config_2017dev = 9 [json_name="sqlserverConfig_2017dev"];

    // Configuration of a sqlserver 2017 server.
    config.SQLServerConfigSet2017std sqlserver_config_2017std = 10 [json_name="sqlserverConfig_2017std"];

    // Configuration of a sqlserver 2017 server.
    config.SQLServerConfigSet2017ent sqlserver_config_2017ent = 11 [json_name="sqlserverConfig_2017ent"];

    // Configuration of a sqlserver 2019 server.
    config.SQLServerConfigSet2019dev sqlserver_config_2019dev = 12 [json_name="sqlserverConfig_2019dev"];

    // Configuration of a sqlserver 2019 server.
    config.SQLServerConfigSet2019std sqlserver_config_2019std = 13 [json_name="sqlserverConfig_2019std"];

    // Configuration of a sqlserver 2019 server.
    config.SQLServerConfigSet2019ent sqlserver_config_2019ent = 14 [json_name="sqlserverConfig_2019ent"];
  }

  // Resources allocated to sqlserver hosts.
  Resources resources = 3;

  // Start time for the daily backup in UTC timezone
  google.type.TimeOfDay backup_window_start = 4;

  // Access policy to DB
  Access access = 6;

  enum SecondaryConnections {
    SECONDARY_CONNECTIONS_UNSPECIFIED = 0;

    // Connections to secondary replicas are prohibited
    SECONDARY_CONNECTIONS_OFF = 1;

    // Secondary replicas are read-only
    SECONDARY_CONNECTIONS_READ_ONLY = 2;
  }

  // Secondary replicas connection mode
  SecondaryConnections secondary_connections = 7;
}

message Host {

  enum Role {
    option (cloud.api.tools.enumeration).lint_skip.unspecified_value = true;

    // Role of the host in the cluster is unknown.
    ROLE_UNKNOWN = 0;

    // Host is the master sqlserver server in the cluster.
    MASTER = 1;

    // Host is a replica sqlserver server in the cluster.
    REPLICA = 2;

  }

  enum Health {
    option (cloud.api.tools.enumeration).lint_skip.unspecified_value = true;

    // Health of the host is unknown.
    HEALTH_UNKNOWN = 0;

    // The host is performing all its functions normally.
    ALIVE = 1;

    // The host is inoperable, and cannot perform any of its essential functions.
    DEAD = 2;

    // The host is degraded, and can perform only some of its essential functions.
    DEGRADED = 3;
  }

  message CPUMetric {
      int64 timestamp = 1;
      double used = 2;
  }

  message MemoryMetric {
      int64 timestamp = 1;
      int64 used = 2;
      int64 total = 3;
  }

  message DiskMetric {
      int64 timestamp = 1;
      int64 used = 2;
      int64 total = 3;
  }

  message SystemMetrics {
      CPUMetric cpu = 1;
      MemoryMetric memory = 2;
      DiskMetric disk = 3;
  }

  // Name of the sqlserver host. The host name is assigned by Managed Service for sqlserver
  // at creation time, and cannot be changed. 1-63 characters long.
  //
  // The name is unique across all existing database hosts in Yandex.Cloud,
  // as it defines the FQDN of the host.
  string name = 1;

  // ID of the sqlserver host. The ID is assigned by Managed Service for sqlserver
  // at creation time.
  string cluster_id = 2;

  // ID of the availability zone where the sqlserver host resides.
  string zone_id = 3;

  // Resources allocated to the host.
  Resources resources = 4;

  // Role of the host in the cluster.
  Role role = 5;

  // Status code of the aggregated health of the host.
  Health health = 6;

  // Services provided by the host.
  repeated Service services = 7;

  // ID of the subnet that the host belongs to.
  string subnet_id = 8;

  // Flag showing public IP assignment status to this host.
  bool assign_public_ip = 9;

  // System metrics
  SystemMetrics system = 10;
}

message Service {

  enum Type {
    TYPE_UNSPECIFIED = 0;

    // SQLServer service
    SQLSERVER = 1;

    // Witness host
    WITNESS = 2;
  }

  enum Health {
    option (cloud.api.tools.enumeration).lint_skip.unspecified_value = true;

    // Health of the server is unknown.
    HEALTH_UNKNOWN = 0;

    // The server is working normally.
    ALIVE = 1;

    // The server is dead or unresponsive.
    DEAD = 2;
  }

  // Type of the service provided by the host.
  Type type = 1;

  // Status code of server availability.
  Health health = 2;
}

message Resources {

  // ID of the preset for computational resources available to a host (CPU, memory etc.).
  // All available presets are listed in the [documentation](/docs/managed-sqlserver/concepts/instance-types).
  string resource_preset_id = 1;

  // Volume of the storage available to a host.
  int64 disk_size = 2;

  // Type of the storage environment for the host.
  // Possible values:
  // * network-nvme - network SSD drive,
  // * local-nvme - local SSD storage.
  string disk_type_id = 3;
}

message Access {
  // Allow access for DataLens.
  bool data_lens = 1;

  // Allow access for Web SQL.
  bool web_sql = 2;

  // Allow access for DataTransfer.
  // NOTE: Do not propagate to public API until Data Transfer integration is required.
  bool data_transfer = 3;

  // Allow access for Serverless.
  // NOTE: Do not propagate to public API until Serverless integration is required.
  bool serverless = 4;
}
