syntax = "proto3";

package yandex.cloud.priv.dns.v1;

import "google/protobuf/field_mask.proto";
import "yandex/cloud/api/operation.proto";
import "yandex/cloud/priv/access/access.proto";
import "yandex/cloud/priv/billing/v1/light_metric.proto";
import "yandex/cloud/priv/dns/v1/dns_zone.proto";
import "yandex/cloud/priv/operation/operation.proto";
import "yandex/cloud/priv/validation.proto";

option go_package = "a.yandex-team.ru/cloud/bitbucket/private-api/yandex/cloud/priv/dns/v1;dns";
option java_outer_classname = "PDZS";

service DnsZoneService {
  rpc Get (GetDnsZoneRequest) returns (DnsZone);

  rpc List (ListDnsZonesRequest) returns (ListDnsZonesResponse);

  rpc Create (CreateDnsZoneRequest) returns (operation.Operation) {
    option (yandex.cloud.api.operation) = {
      metadata: "CreateDnsZoneMetadata"
      response: "DnsZone"
    };
  };

  rpc Update (UpdateDnsZoneRequest) returns (operation.Operation) {
    option (yandex.cloud.api.operation) = {
      metadata: "UpdateDnsZoneMetadata"
      response: "DnsZone"
    };
  };

  rpc Delete (DeleteDnsZoneRequest) returns (operation.Operation) {
    option (yandex.cloud.api.operation) = {
      metadata: "DeleteDnsZoneMetadata"
      response: "google.protobuf.Empty"
    };
  };

  rpc GetRecordSet (GetDnsZoneRecordSetRequest) returns (RecordSet);

  rpc ListRecordSets (ListDnsZoneRecordSetsRequest) returns (ListDnsZoneRecordSetsResponse);

  rpc UpdateRecordSets (UpdateRecordSetsRequest) returns (operation.Operation) {
    option (yandex.cloud.api.operation) = {
      metadata: "UpdateRecordSetsMetadata"
      response: "google.protobuf.Empty"
    };
  };

  rpc UpsertRecordSets (UpsertRecordSetsRequest) returns (operation.Operation) {
    option (yandex.cloud.api.operation) = {
      metadata: "UpsertRecordSetsMetadata"
      response: "google.protobuf.Empty"
    };
  };

  rpc ListOperations (ListDnsZoneOperationsRequest) returns (ListDnsZoneOperationsResponse);

  rpc ListAccessBindings (access.ListAccessBindingsRequest) returns (access.ListAccessBindingsResponse);

  rpc SetAccessBindings (access.SetAccessBindingsRequest) returns (operation.Operation) {
    option (yandex.cloud.api.operation) = {
      metadata: "access.SetAccessBindingsMetadata"
      response: "google.protobuf.Empty"
    };
  }

  rpc UpdateAccessBindings (access.UpdateAccessBindingsRequest) returns (operation.Operation) {
    option (yandex.cloud.api.operation) = {
      metadata: "access.UpdateAccessBindingsMetadata"
      response: "google.protobuf.Empty"
    };
  }

  rpc SimulateBillingMetrics (SimulateBillingMetricsRequest) returns (billing.v1.ConsoleLightMetricsListResponse);
}

message GetDnsZoneRequest {
  string dns_zone_id = 1 [(required) = true];
}

message ListDnsZonesRequest {
  string folder_id = 1 [(required) = true];

  int64 page_size = 4 [(value) = "<=1000"];
  string page_token = 5 [(length) = "<=1000"];
  string filter = 6 [(length) = "<=1000"];
}

message ListDnsZonesResponse {
  repeated DnsZone dns_zones = 1;

  string next_page_token = 5;
}

message CreateDnsZoneRequest {
  string folder_id = 1 [(length) = "<=50", (required) = true];
  string name = 2 [(pattern) = "|[a-z]([-a-z0-9]{0,61}[a-z0-9])?"];
  string description = 3 [(length) = "<=256"];
  map<string, string> labels = 4 [(priv.size) = "<=64", (length) = "<=63", (pattern) = "[-_./\\@0-9a-z]*", (map_key).length = "1-63", (map_key).pattern = "[a-z][-_./\\@0-9a-z]*"];

  // private only
  int64 rps_limit = 5;
  //private only
  ForwardingConfig forwarding_config = 6;
  //private only
  int64 priority = 7; // If set to 0, some automatic priority value will be assigned for the zone

  string zone = 10 [(required) = true, (length) = "<=255", (pattern) = "[.]|[a-z0-9][-a-z0-9.]*\\."];
  //private only
  repeated string clusters = 11 [(size) = "<=50", (unique) = true, (length) = "<=255", (pattern) = "[a-z][-a-z0-9.]*"]; // default is ["vpc"]
  // private only
  string id = 12 [(length) = "<=255"];

  // at least one of
  PrivateVisibility private_visibility = 21;
  PublicVisibility public_visibility = 22;
}

message CreateDnsZoneMetadata {
  string dns_zone_id = 1;
}

message UpdateDnsZoneRequest {
  string dns_zone_id = 1 [(length) = "<=255"];
  google.protobuf.FieldMask update_mask = 2;

  string name = 3 [(pattern) = "|[a-z]([-a-z0-9]{0,61}[a-z0-9])?"];
  string description = 4 [(length) = "<=256"];
  map<string, string> labels = 5 [(priv.size) = "<=64", (length) = "<=63", (pattern) = "[-_./\\@0-9a-z]*", (map_key).length = "1-63", (map_key).pattern = "[a-z][-_./\\@0-9a-z]*"];

  //private attributes
  int64 rps_limit = 6;
  ForwardingConfig forwarding_config = 7;
  int64 priority = 8; // If set to 0, some automatic priority value will be assigned for the zone
  string folder_id = 9; // empty means 'no change' despite of field mask

  // subfields can be changed only
  PrivateVisibility private_visibility = 21;
  PublicVisibility public_visibility = 22;
}

message UpdateDnsZoneMetadata {
  string dns_zone_id = 1;
}

message DeleteDnsZoneRequest {
  string dns_zone_id = 1 [(length) = "<=255"];
}

message DeleteDnsZoneMetadata {
  string dns_zone_id = 1;
}

message GetDnsZoneRecordSetRequest {
  string dns_zone_id = 1 [(length) = "<=255"];
  string name = 2 [(required) = true, (length) = "<=255"];
  string type = 3 [(required) = true, (length) = "<=10"];
}

message ListDnsZoneRecordSetsRequest {
  string dns_zone_id = 1 [(length) = "<=255"];
  string sub_domain = 2 [deprecated = true];
  string type = 3 [deprecated = true];

  int64 page_size = 4 [(value) = "<=1000"];
  string page_token = 5 [(length) = "<=1000"];
  string filter = 6 [(length) = "<=1000"];
}

message ListDnsZoneRecordSetsResponse {
  repeated RecordSet record_sets = 1;

  string next_page_token = 3;
}

message UpdateRecordSetsRequest {
  string dns_zone_id = 2 [(length) = "<=255"];
  repeated RecordSet deletions = 3 [(size) = "<=1000"];
  repeated RecordSet additions = 4 [(size) = "<=1000"];
}

message UpdateRecordSetsMetadata {
}

message UpsertRecordSetsRequest {
  string dns_zone_id = 1 [(length) = "<=255"];
  // for each record set delete mentioned records, some records may remain after deletion
  repeated RecordSet deletions = 2 [(size) = "<=1000"];
  // for each record set add or replace entire record set
  repeated RecordSet replacements = 3 [(size) = "<=1000"];
  // for each record set add or replace each record
  repeated RecordSet merges = 4 [(size) = "<=1000"];
}

message UpsertRecordSetsMetadata {
}

message ListDnsZoneOperationsRequest {
  string dns_zone_id = 1 [(length) = "<=255"];

  int64 page_size = 2 [(value) = "0-1000"];
  string page_token = 3 [(length) = "<=1000"];
  string filter = 4 [(length) = "<=1000"];
}

message ListDnsZoneOperationsResponse {
  repeated operation.Operation operations = 1;
  string next_page_token = 2;
}

message SimulateBillingMetricsRequest {
  string folder_id = 1 [(required) = true];
  string cloud_id = 2; // If not specified, it will be resolved by DnsZoneService

  // At least one of:
  PrivateVisibility private_visibility = 3;
  PublicVisibility public_visibility = 4;

  int64 requests_per_month = 5;

  // Currently not supported in Public API, but will be in the future
  ForwardingConfig forwarding_config = 101;
}
