syntax = "proto3";

package yandex.cloud.priv.certificatemanager.v1.console;

import "yandex/cloud/priv/validation.proto";
import "yandex/cloud/priv/sensitive.proto";
import "yandex/cloud/priv/certificatemanager/v1/certificate.proto";
import "yandex/cloud/api/tools/options.proto";

option go_package = "a.yandex-team.ru/cloud/bitbucket/private-api/yandex/cloud/priv/certificatemanager/v1/console;certificatemanager_console";
option java_outer_classname = "PCCS";


service CertificateConsoleService {

    rpc GetFolderStats (GetFolderStatsRequest) returns (FolderStats);

    rpc ListActive (ListActiveCertificatesRequest) returns (ListActiveCertificatesResponse);

    rpc ValidateContent (ValidateCertificateContentRequest) returns (ValidateCertificateContentResponse);

    rpc ListCertificateProviders (ListCertificateProvidersRequest) returns (ListCertificateProvidersResponse);
}

message GetFolderStatsRequest {
    string folder_id = 1 [(required) = true, (length) = "<=50"];
}

message FolderStats {
    int64 certificates_count = 1;
    int64 domains_count = 2;
}

message ListActiveCertificatesRequest {
    string folder_id = 1 [(required) = true, (length) = "<=50"];
    repeated string domains = 2;
    int64 page_size = 3 [(value) = "<=1000"];
    string page_token = 4 [(length) = "<=100"];
    bool include_validating = 5;
}

message ListActiveCertificatesResponse {
    repeated Certificate certificates = 1;
    string next_page_token = 2;
}

message ValidateCertificateContentRequest {
    string certificate = 1 [(sensitive) = true];
    string chain = 2 [(sensitive) = true];
    string private_key = 3 [(sensitive) = true];
}

message ValidateCertificateContentResponse {
    enum ValidationStatus {
        option (cloud.api.tools.enumeration).lint_skip.unspecified_value = true;
        VALID = 0;
        INVALID = 1;
        WARN = 2;
    }
    ValidationStatus certificate_status = 1;
    repeated string certificate_messages = 2;

    ValidationStatus chain_status = 3;
    repeated string chain_messages = 4;

    ValidationStatus private_key_status = 5;
    repeated string private_key_messages = 6;
}

message ListCertificateProvidersRequest {
    // Unused for now.
    string folder_id = 1 [(required) = true, (length) = "<=50"];
}

message ListCertificateProvidersResponse {
    repeated CertificateProviderInfo providers = 1;
}

message CertificateProviderInfo {
    CertificateProvider id = 1;
    string name = 2;
    // If false, do not show in certificate/certificate list pages.
    bool show = 3;
}
