syntax = "proto3";

package yandex.cloud.priv.vpc.v1.node.inner;

import "google/protobuf/empty.proto";
import "yandex/cloud/priv/vpc/v1/node/common.proto";

option go_package = "a.yandex-team.ru/cloud/bitbucket/private-api/yandex/cloud/priv/vpc/v1/node/inner;inner";
option java_outer_classname = "PVNILS";

// Location Service tracks down actor's locations and may be used by proxies
// to replicate micro-operations on all interesting parties
service LocationService {
  // Register and unregister location. When done, new operations spawned
  // for the object will be replicated for each node registered.
  // NOTE: it won't update ongoing operations, though, as newly spawned actor
  // clones should fetch up-to-date (with applied changes) information
  // from external service (such as vpc-api)
  rpc Register(ObjectLocation) returns (google.protobuf.Empty);
  rpc Unregister(ObjectLocation) returns (google.protobuf.Empty);

  // Used by vpc-node/vpc-control during startup procedure
  rpc ListObjectIdentifiers(Location) returns (ListObjectIdentifiersResponse);

  // More of a debug handle, as outer services should fetch locations
  // from YDB directly
  rpc List(ObjectIdentifier) returns (ListObjectLocationsResponse);
}

message ListObjectIdentifiersResponse {
  repeated ObjectIdentifier object_identifiers = 1;
}

message ListObjectLocationsResponse {
  repeated Location locations = 1;
}
