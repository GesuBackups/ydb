syntax = "proto3";

package yandex.cloud.priv.vpc.v1.node;

import "yandex/cloud/priv/vpc/v1/node/common.proto";

option go_package = "a.yandex-team.ru/cloud/bitbucket/private-api/yandex/cloud/priv/vpc/v1/node;node";
option java_outer_classname = "PVNP";

enum IpVersion {
  IP_VERSION_UNSPECIFIED = 0;
  IPV4 = 1;
  IPV6 = 2;
}

message TapDevice {
  int64 tx_queue_len = 1;
}

message NoPolicyEngine {
}

message VRouterPolicyEngine {
  string port_uuid = 1;
  string instance_uuid = 2;
  string vn_uuid = 3;
  string vm_project_uuid = 4;
  string vm_name = 5;
}

message DropServiceHandler {
}

message DirectServiceHandler {
}

message VRouterServiceHandler {
}

message FloatingIpAddress {
  IpVersion ip_version = 1;
  string address = 2;
  string fip_bucket = 3;
}

message PortAddresses {
  string primary_v4_address = 2;
  string primary_v6_address = 3;
  repeated FloatingIpAddress floating_ip_addresses = 4;
}

message DataplaneStack {
  oneof device {
    TapDevice dev_tap = 1;
    // VHostDevice dev_vhost = 2;
    // MellanoxVDPADevice dev_mlx_vdpa = 3;
    // MellanoxSRIOVDevice dev_mlx_sriov = 4;
  }

  // NOTE: multiple policy engines may be specified (one of each type)
  NoPolicyEngine policer_nop = 5;
  // XDPPolicyEngine policer_xdp = 6;
  // TCPolicyEngine policer_tc = 7;
  VRouterPolicyEngine policer_vrouter = 12;

  oneof service_handler {
    DropServiceHandler sh_drop = 8;
    DirectServiceHandler sh_direct = 9;
    // YCServiceHandler sh_yc = 10;
    VRouterServiceHandler sh_vrouter = 11;
  }
}

message Port {
  PortIdentifier identifier = 1;

  // Needed for local yc-billing-collector calls
  string cloud_id = 2;
  string folder_id = 3;

  // For now not used as we do not configure dataplane directly
  // (may be used for consistency checks, though)
  string subnet_id = 4;
  PortAddresses addresses = 5;
  repeated string security_group_ids = 6;

  // Dataplane configuration
  DataplaneStack dataplane = 7;

  bool hbf_enabled = 8;
}
