role_groups:
  serverless:
    name: Serverless roles

roles:
  serverless.functions.viewer.pseudo:
    groups: [serverless]
    name: ''
    visibility: public
    description: ''
    pseudorole: true
    permissions:
      - serverless.functions.{get,list}
      - serverless.apiGateways.{get,list}
      - serverless.quotas.getCloudValue
      - serverless.triggers.listShards
      - serverless.triggers.{get,list}
      - serverless.mdbproxy.{get,list}
      - serverless.resources.listAccessBindings

  serverless.functions.editor.pseudo:
    groups: [serverless]
    name: ''
    visibility: public
    description: ''
    pseudorole: true
    includedRoles:
      - serverless.functions.viewer.pseudo
    permissions:
      - serverless.functions.invoke
      - serverless.functions.useNetwork
      - serverless.functions.provision
      - serverless.functions.secrets
      - serverless.functions.{create,delete,update}
      - serverless.triggers.{create,delete,update}
      - serverless.triggers.createCloudLogs
      - serverless.triggers.createMailTriggers
      - serverless.apiGateways.{create,delete,update}
      - serverless.mdbproxy.{create,delete,update,execute}

  serverless.functions.admin:
    groups: [serverless]
    name: ''
    visibility: public
    description: Роль для администрирования серверлесс функций
    includedRoles:
      - serverless.functions.editor.pseudo
    permissions:
      - iam.folders.get
      - resource-manager.folders.get
      - serverless.functions.{getAccessBindings,setAccessBindings}
      - serverless.resources.{listAccessBindings,setAccessBindings}

  serverless.functions.invoker:
    groups: [serverless]
    name: ''
    visibility: public
    description: Роль для вызова серверлесс функций
    permissions:
    - serverless.functions.invoke

  serverless.mdbProxies.user:
    groups: [serverless]
    name: ''
    visibility: public
    description: Роль для работы с подключением к базе данных
    permissions:
    - serverless.mdbproxy.execute

  internal.serverlesswarmuper:
    groups: [serverless]
    name: ''
    visibility: internal
    description: (Внутренняя) Роль для прогрева серверлесс функций
    permissions:
      - serverless.functions.warmup

  internal.apigatewayagent:
    groups: [serverless]
    name: ''
    visibility: internal
    description: (Внутренняя) Роль для создания gateway-функций
    permissions:
    - serverless.functions.createGateway
    - serverless.functions.setOwnerData
    - serverless.functions.checkEndUserPermissions

  internal.serverless.apigw.viewer:
    groups: [serverless]
    name: ''
    visibility: internal
    description: (Внутренняя) Роль для получения gateway
    permissions:
    - serverless.apiGateways.get

  internal.serverlessadmin:
    groups: [serverless]
    name: ''
    visibility: internal
    description: (Внутренняя) Администратор serverless, доступ на создание и изменение
      serverless runtimes
    permissions:
    - serverless.functions.{createRuntimes,readRuntimes,updateRuntimes}
    - serverless.triggers.listShards
    - serverless.triggers.watch
    - serverless.mdbproxy.watch

  internal.serverlessops:
    groups: [serverless]
    name: ''
    visibility: internal
    description: (Внутренняя) Ops serverless, доступ на специальные действия
    permissions:
    - serverless.quotas.{getCloudValue,setCloudLimit}

  internal.serverlessagent:
    groups: [serverless]
    name: ''
    visibility: internal
    description: (Внутренняя) Агент serverless, доступ к опредениям функций в фолдерах
      пользователей
    permissions:
    - compute.quotas.getCloudLimit
    - iam.clouds.get
    - iam.folders.get
    - resource-manager.folders.get
    - iam.serviceAccounts.issueToken
    - iam.serviceAccounts.use
    - serverless.functions.get
    - serverless.functions.readRuntimes
    - serverless.functions.readScalingPolicies
    - serverless.containers.get
    - serverless.quotas.getCloudValue
    - serverless.quotas.setCloudValue
    - serverless.triggers.watch
    - serverless.mdbproxy.watch

  internal.serverless.triggers.watcher:
    groups: [serverless]
    name: ''
    visibility: internal
    description: (Внутренняя) Роль для чтения и получения изменений всех триггеров
    permissions:
    - serverless.triggers.watch
    - serverless.triggers.get

  internal.serverlesssupport:
    groups: [serverless]
    name: ''
    visibility: internal
    description: Роль для доступа на чтение к функциям и их логам
    permissions:
    - logs.logEvents.read
    - serverless.functions.{get,list}
    - serverless.quotas.getCloudValue
    - serverless.resources.listAccessBindings
    - serverless.triggers.{get,list}
    - serverless.mdbproxy.{get,list}

  serverless.support:
    groups: [serverless, support]
    name: Support Serverless (Functions)
    description: Role for support engineers
    visibility: internal
    permissions:
      - serverless.functions.{get,list}
      - serverless.apiGateways.{get,list}
      - serverless.quotas.{getCloudValue,setCloudLimit}
      - serverless.triggers.listShards
      - serverless.triggers.{get,list}
      - serverless.resources.listAccessBindings
      - serverless.mdbproxy.{get,list}

  serverless.supportAdmin:
    groups: [serverless, support]
    name: Support Serverless Admin
    description: Privileged operations for support engineers
    visibility: internal
    includedRoles:
      - serverless.support
    permissions: []

  internal.serverless.mdbproxy.watcher:
    groups: [serverless]
    name: ''
    visibility: internal
    description: (Внутренняя) Роль для чтения и получения изменений проксей баз данных
    permissions:
      - serverless.mdbproxy.watch
      - serverless.mdbproxy.get

  serverless.onCall:
    groups: [ serverless, staff ]
    name:        'OnCall Serverless'
    visibility:  internal
    description: Serverless on-call duty role
    includedRoles:
      - serverless.containers.viewer
      - serverless.functions.viewer.pseudo
      - vpc.viewer # used for setting up functions client VPC for premium clients
    permissions:
      - serverless.quotas.getCloudValue
      - serverless.quotas.setCloudLimit

  serverless.onCallAdmin:
    groups: [ serverless, staff ]
    name:        'OnCallAdmin Serverless'
    visibility:  internal
    description: Serverless on-call duty role with extended (modifying) permissions
    includedRoles:
      - serverless.onCall
      - serverless.containers.admin
      - serverless.functions.admin
    permissions: []
