syntax = "proto3";

package yandex.cloud.priv.quotamanager.v1;

import "yandex/cloud/api/operation.proto";
import "yandex/cloud/priv/operation/operation.proto";
import "yandex/cloud/priv/quotamanager/v1/quota_request.proto";
import "yandex/cloud/priv/validation.proto";

option go_package = "a.yandex-team.ru/cloud/bitbucket/private-api/yandex/cloud/priv/quotamanager/v1;quotamanager";
option java_outer_classname = "PQRS";

service QuotaRequestService {
  rpc Get (GetQuotaRequestRequest) returns (QuotaRequest);

  rpc List (ListQuotaRequestRequest) returns (ListQuotaRequestResponse);

  rpc Create (CreateQuotaRequestRequest) returns (operation.Operation) {
    option (yandex.cloud.api.operation) = {
      metadata: "CreateQuotaRequestMetadata"
      response: "QuotaRequest"
    };
  }

  rpc Update (UpdateQuotaRequestRequest) returns (operation.Operation) {
    option (yandex.cloud.api.operation) = {
      metadata: "UpdateQuotaRequestMetadata"
      response: "QuotaRequest"
    };
  }

  rpc Close (CloseQuotaRequestRequest) returns (operation.Operation) {
    option (yandex.cloud.api.operation) = {
      metadata: "CloseQuotaRequestMetadata"
      response: "QuotaRequest"
    };
  }

  rpc Delete (DeleteQuotaRequestRequest) returns (operation.Operation) {
    option (yandex.cloud.api.operation) = {
      metadata: "DeleteQuotaRequestMetadata"
      response: "google.protobuf.Empty"
    };
  }

  rpc ListOperations (ListQuotaRequestOperationsRequest) returns (ListQuotaRequestOperationsResponse);
}

message GetQuotaRequestRequest {
  string quota_request_id = 1 [(required) = true, (length) = "<=50"];
}

message ListQuotaRequestRequest {
  oneof resource {
    option (exactly_one) = true;
    string cloud_id = 1 [(required) = true, (length) = "<=50"];
  }

  string filter = 2 [(length) = "<=1000"];
  int64 page_size = 3 [(value) = "0-1000"];
  string page_token = 4 [(length) = "<=100"];
}

message ListQuotaRequestResponse {
  repeated QuotaRequest quota_requests = 1;
  string next_page_token = 2;
}

message CreateQuotaRequestRequest {
  oneof resource {
    option (exactly_one) = true;
    string cloud_id = 1 [(required) = true, (length) = "<=50"];
  }

  repeated DesiredQuotaLimit desired_quota_limits = 2 [(size) = "1-1000"];

  message DesiredQuotaLimit {
    string quota_id = 1 [(required) = true, (length) = "<=50"];
    double desired_limit = 2;
  }
}

message CreateQuotaRequestMetadata {
  string quota_request_id = 1;
  oneof resource {
    string cloud_id = 2;
  }
}

message UpdateQuotaRequestRequest {
  string quota_request_id = 1 [(required) = true, (length) = "<=50"];
  repeated UpdateQuotaRequestAction update_actions = 2 [(size) = "1-1000"];

  message UpdateQuotaRequestAction {
    oneof action {
      ApprovedQuotaLimit approved_quota_limit = 1;
      RejectedQuotaLimit rejected_quota_limit = 2;
      CanceledQuotaLimit canceled_quota_limit = 3;
    }
  }

  message ApprovedQuotaLimit {
    string quota_id = 1 [(required) = true, (length) = "<=50"];
    double approved_limit = 2;
  }

  message RejectedQuotaLimit {
    string quota_id = 1 [(required) = true, (length) = "<=50"];
    string message = 2;
  }

  message CanceledQuotaLimit {
    string quota_id = 1 [(required) = true, (length) = "<=50"];
  }
}

message UpdateQuotaRequestMetadata {
  string quota_request_id = 1;
  oneof resource {
    string cloud_id = 2;
  }
}

message CloseQuotaRequestRequest {
  string quota_request_id = 1 [(required) = true, (length) = "<=50"];
}

message CloseQuotaRequestMetadata {
  string quota_request_id = 1;
  oneof resource {
    string cloud_id = 2;
  }
}

message DeleteQuotaRequestRequest {
  string quota_request_id = 1 [(required) = true, (length) = "<=50"];
}

message DeleteQuotaRequestMetadata {
  string quota_request_id = 1;
  oneof resource {
    string cloud_id = 2;
  }
}

message ListQuotaRequestOperationsRequest {
  string quota_request_id = 1 [(required) = true, (length) = "<=50"];
  int64 page_size = 2 [(value) = "0-1000"];
  string page_token = 3 [(length) = "<=100"];
}

message ListQuotaRequestOperationsResponse {
  repeated operation.Operation operations = 1;
  string next_page_token = 2;
}
