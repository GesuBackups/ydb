syntax = "proto3";

package yandex.cloud.priv.datatransfer.console.v1;

option go_package = "a.yandex-team.ru/cloud/bitbucket/private-api/yandex/cloud/priv/datatransfer/v1/console;tm_console_server";

import "google/api/annotations.proto";
import "yandex/cloud/priv/datatransfer/v1/console/common.proto";
import "yandex/cloud/priv/datatransfer/v1/endpoint.proto";
import "yandex/cloud/priv/datatransfer/v1/endpoint/clickhouse.proto";
import "yandex/cloud/priv/datatransfer/v1/endpoint/empty.proto";
import "yandex/cloud/priv/datatransfer/v1/endpoint/oracle.proto";
import "yandex/cloud/priv/datatransfer/v1/endpoint/logbroker.proto";
import "yandex/cloud/priv/datatransfer/v1/endpoint/logfeller.proto";
import "yandex/cloud/priv/datatransfer/v1/endpoint/mongo.proto";
import "yandex/cloud/priv/datatransfer/v1/endpoint/mysql.proto";
import "yandex/cloud/priv/datatransfer/v1/endpoint/postgres.proto";
import "yandex/cloud/priv/datatransfer/v1/endpoint/kafka.proto";
import "yandex/cloud/priv/datatransfer/v1/endpoint/object_storage.proto";
import "yandex/cloud/priv/datatransfer/v1/endpoint/ydb.proto";
import "yandex/cloud/priv/datatransfer/v1/endpoint/yds.proto";
import "yandex/cloud/priv/datatransfer/v1/endpoint/yt.proto";
import "yandex/cloud/priv/datatransfer/v1/endpoint/eventhub.proto";
import "yandex/cloud/priv/datatransfer/v1/legacyendpoint/mongo.proto";
import "yandex/cloud/priv/datatransfer/v1/legacyendpoint/mysql.proto";
import "yandex/cloud/priv/datatransfer/v1/legacyendpoint/logbroker.proto";
import "yandex/cloud/priv/datatransfer/v1/legacyendpoint/postgres.proto";
import "yandex/cloud/api/operation.proto";
import "yandex/cloud/api/tools/options.proto";
import "yandex/cloud/priv/operation/operation.proto";

service EndpointConsoleService {
    rpc Get(GetEndpointViewRequest) returns (EndpointView) {
        option (google.api.http) = { get: "/v1/console/endpoint/{endpoint_id}" };
    }
    rpc List(ListEndpointViewsRequest) returns (ListEndpointViewsResponse) {
        option (google.api.http) = { get: "/v1/console/endpoints/list/{folder_id}" };
    }
    rpc Create(EndpointView) returns (EndpointView) {
        option (google.api.http) = { post: "/v1/console/endpoint" body: "*" };
    }
    rpc Update(EndpointView) returns (EndpointView) {
        option (google.api.http) = { patch: "/v1/console/endpoint" body: "*" };
    }
    rpc GetEndpointsFolderStats(GetEndpointsFolderStatsRequest) returns (GetEndpointsFolderStatsResponse) {
        option (google.api.http) = { get: "/v1/endpoints/stat/{folder_id}" };
    }
    rpc TypesWithFlags(TypeEndpointsRequest) returns (TypesWithFlagsResponse) {
        option (google.api.http) = { get: "/v2/endpoints/types" };
        option (yandex.cloud.api.tools.method).lint_skip.http_verb = true;
    }
    rpc GetCreateForm(FormRequest) returns (FormResponse) {
        option (google.api.http) = { get: "/v1/forms/endpoint_create" };
    }
    rpc GetCreateFormDefaultsJSON(FormRequest) returns (EndpointView) {
        option (google.api.http) = { get: "/v1/forms/endpoint_create_defaults_json" };
    }
    rpc GetEditForm(FormRequest) returns (FormResponse) {
        option (google.api.http) = { get: "/v1/forms/endpoint_edit" };
    }
    rpc GetInfoForm(GetEndpointRequest) returns (FormResponse) {
        option (google.api.http) = { get: "/v1/forms/endpoint_info/{endpoint_id}" };
    }
    rpc TestEndpoint(TestEndpointRequest) returns (operation.Operation) {
        option (google.api.http) = { post: "/v1/forms/endpoint/test" body: "*" };
        option (api.operation) = {
            metadata: "TestEndpointOperationMetadata"
            response: "TestEndpointOperationResponse"
        };
    }
    rpc TestEndpointJSON(TestEndpointRequestJSON) returns (operation.Operation) {
        option (google.api.http) = { post: "/v1/forms/endpoint/test_json" body: "*" };
        option (api.operation) = {
            metadata: "TestEndpointOperationMetadata"
            response: "TestEndpointOperationResponse"
        };
    }
    rpc TestEndpointResult(TestEndpointResultRequest) returns (TestEndpointResultResponse) {
        option (google.api.http) = { post: "/v1/forms/endpoint/test_result" body: "*" };
    }
}
message GetEndpointViewRequest {
    string endpoint_id = 1;
}
message EndpointView {
    string id = 1;
    string folder_id = 2;
    string created_at = 3;
    string name = 4;
    string description = 5;
    datatransfer.v1.Direction direction = 7;
    datatransfer.v1.EndpointType type = 8;
    string author = 9;
    JsonProxy payload = 12;
}
message TestEndpointOperationMetadata {
}
message TestEndpointOperationResponse {
}
message TestEndpointResultRequest {
    string operation_id = 1;
}
message TestEndpointResultResponse {
    string operation_id = 1;
    bool is_done = 2;
    FormResponse form = 3;
    string data_json = 4;
    string error = 5;
}
message TestEndpointRequest {
    string folder_id = 1;
    oneof endpoint {
        datatransfer.v1.endpoint.LogbrokerSource logbroker_v2_source = 55;
        datatransfer.v1.endpoint.MysqlSource mysql_source = 52;
        datatransfer.v1.endpoint.PostgresSource postgres_source = 45;
        datatransfer.v1.endpoint.YdbSource ydb_source = 22;
        datatransfer.v1.endpoint.EmptyTarget empty_source = 24;
        datatransfer.v1.endpoint.LogfellerSource logfeller_source = 27;
        datatransfer.v1.endpoint.YDSSource yds_source = 29;
        datatransfer.v1.endpoint.KafkaSource kafka_source = 48;
        datatransfer.v1.endpoint.MongoSource mongo_v2_source = 50;
        datatransfer.v1.endpoint.ClickhouseSource clickhouse_source = 53;
        datatransfer.v1.endpoint.OracleSource oracle_source = 54;
        datatransfer.v1.endpoint.EventhubSource eventhub_source = 57;
        datatransfer.v1.endpoint.MysqlTarget mysql_target = 46;
        datatransfer.v1.endpoint.PostgresTarget postgres_target = 47;
        datatransfer.v1.endpoint.YtTarget yt_target = 30;
        datatransfer.v1.endpoint.ClickhouseTarget clickhouse_target = 31;
        datatransfer.v1.endpoint.YdbTarget ydb_target = 32;
        datatransfer.v1.endpoint.EmptyTarget empty_target = 33;
        datatransfer.v1.endpoint.LogfellerTarget logfeller_target = 39;
        datatransfer.v1.endpoint.ObjectStorageTarget object_storage_target = 43;
        datatransfer.v1.endpoint.KafkaTarget kafka_target = 49;
        datatransfer.v1.endpoint.MongoTarget mongo_v2_target = 51;
        datatransfer.v1.endpoint.LogbrokerTarget logbroker_v2_target = 56;
        datatransfer.v1.legacyendpoint.LogbrokerSource logbroker_source = 23;
        datatransfer.v1.legacyendpoint.ManagedPostgresSource managed_postgres_source = 20;
        datatransfer.v1.legacyendpoint.OnPremisePostgresSource on_premise_postgres_source = 25;
        datatransfer.v1.legacyendpoint.ManagedMysqlSource managed_mysql_source = 21;
        datatransfer.v1.legacyendpoint.OnPremiseMysqlSource on_premise_mysql_source = 26;
        datatransfer.v1.legacyendpoint.MongoSource on_premise_mongo_source = 28;
        datatransfer.v1.legacyendpoint.ManagedMongoSource managed_mongo_source = 41;
        datatransfer.v1.legacyendpoint.MongoTarget on_premise_mongo_target = 40;
        datatransfer.v1.legacyendpoint.ManagedMongoTarget managed_mongo_target = 42;
        datatransfer.v1.legacyendpoint.ManagedMysqlTarget managed_mysql_target = 34;
        datatransfer.v1.legacyendpoint.OnPremiseMysqlTarget on_premise_mysql_target = 37;
        datatransfer.v1.legacyendpoint.ManagedPostgresTarget managed_postgres_target = 35;
        datatransfer.v1.legacyendpoint.OnPremisePostgresTarget on_premise_postgres_target = 38;
        datatransfer.v1.legacyendpoint.LogbrokerTarget logbroker_target = 36;
    }
    datatransfer.v1.EndpointSettings settings = 44;
}
message TestEndpointRequestJSON {
    string folder_id = 1;
    JsonProxy payload = 2;
}
message FormRequest {
    datatransfer.v1.Direction direction = 1;
    datatransfer.v1.EndpointType type = 2;
    string folder_id = 3;
    string cloud_id = 4;
}
message GetEndpointRequest {
    string endpoint_id = 1;
}
message GetEndpointsFolderStatsRequest {
    string folder_id = 1;
}
message GetEndpointsFolderStatsResponse {
    int64 count = 1;
}
message TypeEndpointsRequest {
}
message AllowedTypes {
    repeated datatransfer.v1.EndpointType types = 1;
}
message TypeEndpointsResponse {
    map<string,AllowedTypes> directions = 1;
}
message AllowedType {
    string title = 5;
    datatransfer.v1.EndpointType type = 1;
    string alpha_flag = 2;
    bool is_preview = 3;
    bool is_hidden = 4;
}
message AllowedTypesWithFlags {
    repeated AllowedType types = 1;
}
message TypesWithFlagsResponse {
    map<string,AllowedTypesWithFlags> directions = 1;
}
message ListEndpointViewsRequest {
    string folder_id = 1;
    int64 page_size = 2;
    string page_token = 3;
}
message ListEndpointViewsResponse {
    repeated EndpointView endpoints = 1;
    string next_page_token = 2;
}
