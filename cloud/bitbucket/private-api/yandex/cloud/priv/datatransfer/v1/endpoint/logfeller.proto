syntax = "proto3";

package yandex.cloud.priv.datatransfer.v1.endpoint;

option go_package = "a.yandex-team.ru/cloud/bitbucket/private-api/yandex/cloud/priv/datatransfer/v1/endpoint;tm_server_endpoint";

enum ChunkSplitter {
    CHUNK_SPLITTER_UNSPECIFIED = 0;
    // None
    CHUNK_SPLITTER_NONE = 7;
    // Binary event log
    CHUNK_SPLITTER_BINARY_EVENT_LOG = 1;
    // Binary event log framed
    CHUNK_SPLITTER_BINARY_EVENT_LOG_FRAMED = 2;
    // Do not split
    CHUNK_SPLITTER_DO_NOT_SPLIT = 3;
    // Line break
    CHUNK_SPLITTER_LINE_BREAK = 4;
    // Mixed reqans log
    CHUNK_SPLITTER_MIXED_REQANS_LOG = 5;
    // New reqans log
    CHUNK_SPLITTER_NEW_REQANS_LOG = 6;
    // Protoseq
    CHUNK_SPLITTER_PROTOSEQ = 8;
    // Push agent log
    CHUNK_SPLITTER_PUSH_AGENT_LOG = 9;
    // Rtmr bulk log
    CHUNK_SPLITTER_RTMR_BULK_LOG = 10;
    // Old reqans log
    CHUNK_SPLITTER_OLD_REQANS_LOG = 11;
    // Levnal
    CHUNK_SPLITTER_LEVNAL = 12;
    // Frame auto
    CHUNK_SPLITTER_FRAME_AUTO = 13;
}
enum LogbrokerConsumer {
    LOGBROKER_CONSUMER_UNSPECIFIED = 0;
    // Shared ARNOLD logfeller
    SHARED_ARNOLD_LOGFELLER = 1;
    // Shared ARNOLD logfeller minute
    SHARED_ARNOLD_LOGFELLER_MINUTE = 2;
    // Shared HAHN logfeller
    SHARED_HAHN_LOGFELLER = 3;
    // Shared HAHN logfeller minute
    SHARED_HAHN_LOGFELLER_MINUTE = 4;
    // Shared HUME logfeller
    SHARED_HUME_LOGFELLER = 5;
    // Shared FREUD logfeller
    SHARED_FREUD_LOGFELLER = 6;
    // Shared bs ARNOLD logfeller
    SHARED_BS_ARNOLD_LOGFELLER = 7;
    // Shared bs ARNOLD logfeller minute
    SHARED_BS_ARNOLD_LOGFELLER_MINUTE = 8;
    // Shared bs HAHN logfeller
    SHARED_BS_HAHN_LOGFELLER = 9;
    // Shared bs HAHN logfeller minute
    SHARED_BS_HAHN_LOGFELLER_MINUTE = 10;
    // Shared bs HUME logfeller
    SHARED_BS_HUME_LOGFELLER = 11;
    // Shared bs FREUD logfeller lbkx
    SHARED_BS_FREUD_LOGFELLER_LBKX = 12;
}
enum CompressionCodec {
    COMPRESSION_CODEC_UNSPECIFIED = 0;
    // Zstd 5
    ZSTD_5 = 1;
    // Brotli 8
    BROTLI_8 = 2;
    // Brotli 3
    BROTLI_3 = 3;
    // Zstd 6
    ZSTD_6 = 4;
    // Zlib 9
    ZLIB_9 = 5;
    // Lz 4
    LZ_4 = 6;
}
enum ErasureCodec {
    ERASURE_CODEC_UNSPECIFIED = 0;
    // Null
    NULL = 2;
    // Lrc 12 2 2
    LRC_12_2_2 = 1;
}
enum Priority {
    PRIORITY_UNSPECIFIED = 0;
    // Low
    LOW = 1;
    // Default
    DEFAULT = 2;
    // High
    HIGH = 3;
}
enum YtCluster {
    YT_CLUSTER_UNSPECIFIED = 0;
    // HAHN
    HAHN = 1;
    // ARNOLD
    ARNOLD = 2;
    // BOHR
    BOHR = 3;
    // LANDAU
    LANDAU = 4;
    // HUME
    HUME = 5;
    // FREUD
    FREUD = 6;
}
enum SensitiveDataScanningPolicy {
    SENSITIVE_DATA_SCANNING_POLICY_UNSPECIFIED = 0;
    // Count only
    COUNT_ONLY = 1;
    // Xmask
    XMASK = 2;
    // No scan
    NO_SCAN = 3;
}
enum TimeZoneMode {
    TIME_ZONE_MODE_UNSPECIFIED = 0;
    TIME_ZONE_MODE_LOCAL = 1;
    TIME_ZONE_MODE_PARSE = 2;
    TIME_ZONE_MODE_UTC = 3;
}
enum TransportMetaTimeField {
    TRANSPORT_META_TIME_FIELD_UNSPECIFIED = 0;
    TRANSPORT_META_TIME_FIELD_CREATION_TIME = 1;
    TRANSPORT_META_TIME_FIELD_EXPORT_TIME = 2;
    TRANSPORT_META_TIME_FIELD_LOGBROKER_WRITE_TIME = 3;
}
enum YtType {
    YT_TYPE_UNSPECIFIED = 0;
    YT_TYPE_STRING = 1;
    YT_TYPE_INT64 = 2;
    YT_TYPE_INT32 = 3;
    YT_TYPE_INT16 = 4;
    YT_TYPE_INT8 = 5;
    YT_TYPE_UINT64 = 6;
    YT_TYPE_UINT32 = 7;
    YT_TYPE_UINT16 = 8;
    YT_TYPE_UINT8 = 9;
    YT_TYPE_BOOL = 10;
    YT_TYPE_DOUBLE = 11;
    YT_TYPE_YSON = 12;
    YT_TYPE_DATETIME = 13;
    YT_TYPE_TIMESTAMP = 14;
    YT_TYPE_INTERVAL = 15;
}
message YtProcessingOptions {
    string pool = 1;
    string spec = 2;
}
message ArchiveOptions {
    CompressionCodec compression_codec = 1;
    ErasureCodec erasure_codec = 2;
    bool enabled = 3;
    string delay = 4;
}
message UltrafastCompactionOptions {
    string lifetime_until_compaction = 1;
    string compacted_tables_time_period = 2;
    string compacted_tables_lifetime = 3;
    ArchiveOptions archive_options = 4;
}
message UltrafastOptions {
    string tables_lifetime = 1;
    UltrafastCompactionOptions compaction = 2;
    Priority priority = 3;
}
message BuildOptions {
    repeated string sort_by_columns = 1;
    CompressionCodec compression_codec = 2;
    ErasureCodec erasure_codec = 3;
}
message RebuildOptions {
    int64 days = 1;
    double completeness_threshold = 2;
    string rebuild_frequency = 3;
    bool rebuild_if_conflicts_detected = 4;
}
message PeriodDescription {
    BuildOptions build_options = 1;
    RebuildOptions rebuild_options = 2;
    ArchiveOptions archive_options = 3;
    string build_delay = 4;
    string lifetime = 5;
}
message DateTimeFormat {
    string format = 1;
    TimeZoneMode tz_mode = 2;
}
message UnixtimeFormat {
    int64 subsecond_precision = 1;
}
message TimeFormat {
    oneof format {
        UnixtimeFormat unixtime = 1;
        DateTimeFormat date_time = 2;
    }
}
message ParsedRecordTime {
    string time_field = 1;
    string time_zone_field = 2;
    TimeFormat format = 3;
    TimeFormat additional_format = 4;
}
message TransportMetaTime {
    TransportMetaTimeField field = 1;
}
message TimeParsingOptions {
    oneof mode {
        ParsedRecordTime from_parsed_record = 1;
        ParsedRecordTime from_context = 2;
        TransportMetaTime from_transport_meta = 3;
    }
}
message CGIProtectorParams {
    // Fields
    repeated string fields = 1;
    // Parameters
    repeated string parameters = 2;
}
message BaseParserOptions {
    TimeParsingOptions time_options = 1;
    bool calc_puid_hash = 2;
    repeated string precomputers = 3;
    CGIProtectorParams cgi_params_to_hide = 4;
}
message Field {
    string name = 1;
    string path = 2;
    YtType type = 3;
    bool required = 4;
    // Default value
    string default_value = 5;
}
message Fields {
    // Fields
    repeated Field field_list = 1;
}
message SchemaConfig {
    oneof config {
        Fields field_list = 1;
        string json_config = 2;
        // External Schema ID
        string schema_id = 3;
    }
}
message JsonParserOptions {
    bool erase_extracted_fields = 1;
    bool add_rest_field = 2;
    bool allow_int64_as_string = 3;
    bool validate_utf8 = 4;
    SchemaConfig schema = 5;
}
message TskvParserOptions {
    bool skip_unknown_fields = 1;
    bool strict_schema = 2;
    SchemaConfig schema = 3;
}
message ParserOptions {
    BaseParserOptions common = 1;
    oneof raw_data_format {
        JsonParserOptions json_parser = 2;
        TskvParserOptions tskv_parser = 3;
    }
}
message ParsingOptions {
    ChunkSplitter chunk_splitter_name = 1;
    oneof parser {
        string parser_name = 2;
        ParserOptions parser_options = 5;
    }
    repeated string yt_resources = 3;
    map<string,string> vault_secrets = 4;
}
message LogfellerSource {
    string topic_path = 1;
    LogbrokerConsumer logbroker_consumer = 2;
    ParsingOptions parsing_options = 3;
}
message LogfellerTarget {
    string log_name = 1;
    YtCluster yt_cluster_name = 2;
    PeriodDescription period1d = 3;
    PeriodDescription period1h = 4;
    PeriodDescription period30min = 5;
    UltrafastOptions ultrafast_options = 6;
    YtProcessingOptions yt_processing_options = 7;
    string yt_account = 8;
    SensitiveDataScanningPolicy sensitive_data_scanning_policy = 9;
}
