syntax = "proto3";

package yandex.cloud.priv.datatransfer.v1.endpoint;

option go_package = "a.yandex-team.ru/cloud/bitbucket/private-api/yandex/cloud/priv/datatransfer/v1/endpoint;tm_server_endpoint";

import "yandex/cloud/priv/datatransfer/v1/endpoint/common.proto";

enum YtTargetCluster {
    YT_TARGET_CLUSTER_UNSPECIFIED = 0;
    // ARNOLD
    YT_TARGET_CLUSTER_ARNOLD = 1;
    // BOHR
    YT_TARGET_CLUSTER_BOHR = 2;
    // FREUD
    YT_TARGET_CLUSTER_FREUD = 3;
    // HAHN
    YT_TARGET_CLUSTER_HAHN = 4;
    // HUME
    YT_TARGET_CLUSTER_HUME = 5;
    // LANDAU
    YT_TARGET_CLUSTER_LANDAU = 6;
    // SENECA-MAN
    YT_TARGET_CLUSTER_SENECA_MAN = 7;
    // SENECA-SAS
    YT_TARGET_CLUSTER_SENECA_SAS = 8;
    // SENECA-VLA
    YT_TARGET_CLUSTER_SENECA_VLA = 9;
    // VANGA
    YT_TARGET_CLUSTER_VANGA = 10;
}
enum YtCleanupPolicy {
    YT_CLEANUP_POLICY_UNSPECIFIED = 0;
    // Disabled
    YT_CLEANUP_POLICY_DISABLED = 1;
    // Drop
    YT_CLEANUP_POLICY_DROP = 2;
}
message YtTable {
    oneof table {
        DynamicTable dynamic_table = 1;
        StaticTable static_table = 2;
        OrderedTable ordered_table = 3;
        VersionedDynamicTable versioned_table = 4;
    }
}
message StaticTable {
    // One of scan or lookup
    string optimized_for = 7;
}
message DynamicTable {
    // Table Bundle
    string bundle = 5;
    // TTL in seconds
    int64 ttl = 6;
    // Allow to alter table
    bool alterable = 8;
    // Hash index columns
    repeated string index = 10;
    // Hashing data
    HashedSeries hash_data = 11;
    // Primary Medium
    string primary_medium = 12;
    // Optimized for
    string optimized_for = 7;
    // Strict mode
    bool strict = 19;
    // Store _wal
    bool push_wal = 3;
}
message OrderedTable {
    // Initial tablet count
    int64 initial_tablet_count = 22;
    // Strict mode
    bool strict = 19;
}
message TimeShardHash {
    // Shard count
    int64 time_shard_count = 9;
    // Hash column
    string hash_col = 11;
}
message HashedSeries {
    oneof mode {
        // Disable
        bool no_hash = 1;
        // Time based hashing
        TimeShardHash time_shard_hash = 2;
    }
}
message VersionedDynamicTable {
    // Version column
    // 
    // Will enable version tablet writer. Lookup in same TX on exist rows with same
    // PKey in YT and skip rows which version_column lower than actual stored.
    // Versioned tablet writer do not support deletes
    string version_column = 18;
    // Table Bundle
    string bundle = 5;
    // TTL in seconds
    int64 ttl = 6;
    // Allow to alter table
    bool alterable = 8;
    // Hash index columns
    repeated string index = 10;
    // Hashing data
    HashedSeries hash_data = 11;
    // Primary Medium
    string primary_medium = 12;
    // Optimized for
    string optimized_for = 7;
    // Strict mode
    bool strict = 19;
}
message YtTarget {
    // YT Cluster
    string cluster = 1;
    // Path in YT to store table
    string table_path = 2;
    // Should store or not all raw changes in a separate table (__wal table)
    bool push_wal = 3;
    // Should store or not deletes in replicated table in a separate archive tables
    bool archive_table = 4;
    // Tablet cell bundle for quota accounting
    string bundle = 5;
    // TTL in seconds, if presented will delete old records
    int64 ttl = 6;
    // One of scan or lookup
    string optimized_for = 7;
    // Allow to alter table automatically when schema change
    bool alterable = 8;
    // Only for time series data, will add shard column based on timestamp
    int64 time_shard_count = 9;
    // Only for time series data, list of fields to extract keys
    repeated string index = 10;
    // Only for time series data, will hash first column
    string hash_col = 11;
    // Where to store data (YT Medium), one of ssd or default
    string primary_medium = 12;
    bool ordered = 13;
    // Only for time series data, How to rotate tables, if rotate presented will store
    // time based tables
    Rotator rotation = 14;
    int64 tablet_count = 15;
    bool static_table = 16;
    repeated AltName alt_names = 17;
    string version_column = 18;
    bool strict = 19;
    // Define custom specification for table writer in json format
    string spec = 20;
    // Cleanup policy
    // 
    // Cleanup policy for activate, reactivate and reupload processes. Default is drop.
    YtCleanupPolicy cleanup_policy = 21;
    int64 initial_tablet_count = 22;
    bool allow_reupload = 23;
    bool no_ban = 24;
    bool tolerate_key_changes = 25;
    // Use static table on snapshot
    // 
    // On snapshot data congregated into the static table. Then table converts to
    // dynamic which allows further data replication.
    bool use_static_table_on_snapshot = 26;
    // Max chunk size for YT
    int64 chunk_size = 27;
}
message YtSource {
    // YT Cluster
    string cluster = 1;
    // Table/directory paths
    repeated string paths = 2;
    // YT Token with read table permissions
    Secret token = 3;
}
message YtCopyResourceLimits {
    // Jobs limit (user_slots)
    int64 user_slots = 1;
}
message YtCopyTarget {
    // Target YT cluster
    string cluster = 1;
    // Target directory
    string path = 2;
    // YT Token
    // 
    // Token owner should have target directory write permission
    Secret token = 3;
    // Parallel operations count
    // 
    // Count of tables being copied simultaneously
    int64 parallelism = 4;
    // Publish all tables at once
    // 
    // Publish all tables strictly after all copying operations are done
    bool use_push_transaction = 5;
    // Resource pool
    // 
    // Pool to be used in remote copy operations
    string pool = 6;
    // Resource limits
    // 
    // Remote copy operation resource limits
    YtCopyResourceLimits resource_limits = 7;
}
