role_groups:
  container-registry:
    name: Container Registry roles

roles:
  # deprecated. Use container-registry.viewer instead
  container-registry.viewer.pseudo:
    groups: [container-registry]
    name: Container Registry Viewer
    visibility: public
    description: ''
    pseudorole: true
    permissions:
      - container-registry.images.{get,list,getScanResult,listScanResults}
      - container-registry.quotas.get
      - container-registry.registries.listAccessBindings
      - container-registry.registries.{get,list}
      - container-registry.repositories.listAccessBindings
      - container-registry.repositories.{getLifecyclePolicy,listLifecyclePolicies,getDryRunLifecyclePolicyResult,listDryRunLifecyclePolicyResults}

  # deprecated. Use container-registry.editor instead
  container-registry.editor.pseudo:
    groups: [container-registry]
    name: Container Registry Editor
    visibility: public
    description: ''
    pseudorole: true
    includedRoles:
      - container-registry.viewer
    permissions:
      - container-registry.images.{create,delete,update,scan}
      - container-registry.registries.{create,delete,update}
      - container-registry.repositories.{create,delete,createLifecyclePolicy,deleteLifecyclePolicy,updateLifecyclePolicy,dryRunLifecyclePolicy}

  container-registry.viewer:
    groups: [container-registry]
    name: Container Registry Viewer
    visibility: public
    description: ''
    pseudorole: false
    permissions:
      - container-registry.images.{get,list,getScanResult,listScanResults}
      - container-registry.quotas.get
      - container-registry.registries.listAccessBindings
      - container-registry.registries.{get,list}
      - container-registry.repositories.listAccessBindings
      - container-registry.repositories.{getLifecyclePolicy,listLifecyclePolicies,getDryRunLifecyclePolicyResult,listDryRunLifecyclePolicyResults}

  container-registry.editor:
    groups: [container-registry]
    name: Container Registry Editor
    visibility: public
    description: ''
    pseudorole: false
    includedRoles:
      - container-registry.viewer
    permissions:
      - container-registry.images.{create,delete,update,scan}
      - container-registry.registries.{create,delete,update}
      - container-registry.repositories.{create,delete,createLifecyclePolicy,deleteLifecyclePolicy,updateLifecyclePolicy,dryRunLifecyclePolicy}

  container-registry.admin:
    groups: [container-registry]
    name: Администратор Container Registry
    visibility: public
    description: доступ ко всем функциям Container Registry
    includedRoles:
      - container-registry.editor
    permissions:
      - container-registry.registries.{listAccessBindings,updateAccessBindings}
      - container-registry.repositories.{listAccessBindings,updateAccessBindings}
      - container-registry.registries.{listIpPermissions,updateIpPermissions}
      - iam.folders.get
      - resource-manager.folders.get

  container-registry.images.puller:
    groups: [container-registry]
    name: ''
    visibility: public
    description: Роль для внешнего пользователя на чтение и просмотр списка образов
    permissions:
    - container-registry.images.{get,list}
    - container-registry.registries.{get,list}

  container-registry.images.pullerNotRestricted:
    groups: [container-registry]
    name: Image puller with no IP restrictions
    visibility: internal
    description: Role for SA to pull images regardless of IP permissions on registry
    includedRoles:
      - container-registry.images.puller
    permissions:
      - container-registry.registries.ignoreIpPermissions

  container-registry.images.pusher:
    groups: [container-registry]
    name: ''
    visibility: public
    description: Роль для внешнего пользователя на изменения образов
    permissions:
    - container-registry.images.{create,delete,update}
    - container-registry.images.{get,list}
    - container-registry.registries.{get,list}
    - container-registry.repositories.{create,delete}

  internal.containerregistryadmin:
    groups: [container-registry]
    name: (Внутренняя) Дополнительные права для облака Container Registry
    visibility: internal
    description: ''
    permissions:
    - container-registry.quotas.get
    - container-registry.quotas.updateLimit
    - container-registry.registries.updateAlias
    - s3.buckets.getBucketSystemTagging
    - s3.buckets.putBucketSystemTagging

  container-registry.support:
    groups: [container-registry, support]
    name: Support Container Registry
    visibility: internal
    description: Role for support engineers
    permissions:
      - container-registry.images.{get,list,getScanResult,listScanResults}
      - container-registry.quotas.{get,updateLimit}
      - container-registry.registries.{get,list,listAccessBindings,listIpPermissions}
      - container-registry.repositories.{getLifecyclePolicy,listLifecyclePolicies,getDryRunLifecyclePolicyResult,listDryRunLifecyclePolicyResults,listAccessBindings}

  container-registry.supportAdmin:
    groups: [container-registry, support]
    name: Support Container Registry Admin
    description: Privileged operations for support engineers
    visibility: internal
    includedRoles:
      - container-registry.support
    permissions:
      - container-registry.registries.updateAlias

  container-registry.onCall:
    groups: [container-registry]
    name: OnCall Container Registry
    visibility: internal
    description: Role for oncall engineers (L3 duty in container-registry)
    includedRoles:
      - onCall
      - container-registry.support

  container-registry.onCallAdmin:
    groups: [container-registry]
    name: OnCall Container Registry admin
    visibility: internal
    description: Role for impersoned SA for L3 duty in container-registry
    includedRoles:
      - container-registry.support
