syntax = "proto3";

package yandex.cloud.priv.containerregistry.v1;

import "yandex/cloud/api/operation.proto";
import "yandex/cloud/priv/containerregistry/v1/image.proto";
import "yandex/cloud/priv/operation/operation.proto";
import "yandex/cloud/priv/validation.proto";

option go_package = "a.yandex-team.ru/cloud/bitbucket/private-api/yandex/cloud/priv/containerregistry/v1;containerregistry";
option java_outer_classname = "PIS";

service ImageService {

    rpc List (ListImagesRequest) returns (ListImagesResponse);

    rpc Get (GetImageRequest) returns (Image);

    rpc Delete (DeleteImageRequest) returns (operation.Operation) {
        option (yandex.cloud.api.operation) = {
          metadata: "DeleteImageMetadata"
          response: "google.protobuf.Empty"
        };
    }

    rpc Copy (CopyImagesRequest) returns (operation.Operation) {
        option (yandex.cloud.api.operation) = {
          metadata: "CopyImagesMetadata"
          response: "google.protobuf.Empty"
        };
    }
}


message ListImagesRequest {
    string registry_id = 1 [(length) = "<=50"];
    string repository_name = 2 [(pattern) = "|[a-z0-9]+(?:[._-][a-z0-9]+)*(/([a-z0-9]+(?:[._-][a-z0-9]+)*))*"];
    string folder_id = 7 [(length) = "<=50"];

    int64 page_size = 3 [(value) = "0-1000"];
    string page_token = 4 [(length) = "<=100"];
    string filter = 5 [(length) = "<=1000"];
    string order_by = 6 [(length) = "<=100"];
}

message ListImagesResponse {
    repeated Image images = 1;
    string next_page_token = 2;
}

message GetImageRequest {
    string image_id = 1 [(required) = true, (length) = "<=50"];
}

message DeleteImageRequest {
    string image_id = 1 [(required) = true, (length) = "<=50"];
}

message DeleteImageMetadata {
    string image_id = 1;
}

message CopyImagesRequest {
    string source_registry_id = 1 [(required) = true, (length) = "<=50"];
    string destination_registry_id = 2 [(required) = true, (length) = "<=50"];
    repeated ImageWithTagAndDigest source_images = 3 [(size) = ">0"];
}

message ImageWithTagAndDigest {
    string name = 1 [(required) = true, (pattern) = "[a-z0-9]+(?:[._-][a-z0-9]+)*(/([a-z0-9]+(?:[._-][a-z0-9]+)*))*"];
    string tag = 2 [(required) = true];
    string digest = 3 [(required) = true];
}

message CopyImagesMetadata {
    string source_registry_id = 1;
    string destination_registry_id = 2;
}
