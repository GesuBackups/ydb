syntax = "proto3";

package yandex.cloud.priv.cic.v1.inner.agent.device.routing_policy;

option go_package = "a.yandex-team.ru/cloud/bitbucket/private-api/yandex/cloud/priv/cic/v1/inner/agent/device/routing_policy;cic";
option java_outer_classname = "PCIADRP";

import "yandex/cloud/priv/cic/v1/inner/agent/device/routing_policy/bgp_policy.proto";
import "yandex/cloud/priv/cic/v1/inner/agent/device/routing_policy/policy_types.proto";


message RoutingPolicy {
  message DefinedSets {

    message PrefixSet {
      message Prefix {
        string ip = 1;
        int64 prefix_length = 2;
        int64 greater_or_equal = 3;
        int64 less_or_equal = 4;
      }
  
      string name = 1;
      string afi = 2;
      repeated Prefix prefixes = 3;
    }

    message PrefixList {
      message Prefix {
        string ip = 1;
        int64 prefix_length = 2;
      }
      
      string name = 1;
      repeated Prefix prefixes = 2;
    }

    map <string, PrefixSet> prefix_sets = 1;
    map <string, PrefixList> prefix_lists = 2; //Deviation
    BgpDefinedSets bgp_defined_sets = 3;
  }


  message PolicyDefinition {
    message Statement {
      message Conditions {
        message MatchInterface {
          string  iface = 1;
          int64  subiface = 2;
        }
            
        message MatchPrefixSet {
          string  prefix_set = 1;
        }

        message MatchPrefixList { //Junos Deviation 
          string  prefix_list = 1;
        }

        repeated MatchInterface match_interfaces = 1; //Generic Devication
        repeated MatchPrefixSet match_prefix_sets = 2; //Generic  Devication
        repeated MatchPrefixList match_prefix_lists = 3;  //Junos Devication
        BgpConditions bgp_conditions = 4;
        InstallProtocolType install_protocol_eq = 5;
      }

      message Actions {
        PolicyResultType policy_result = 1;
        BgpActions  bgp_actions = 2;
      }

      string name = 1;
      Conditions conditions = 2;
      Actions actions = 3;
    }


    string name = 1;
    repeated Statement statements = 2;

  }

  DefinedSets defined_sets = 1;
  map<string, PolicyDefinition> policy_definitions = 2;
}

enum PolicyResultType {
  POLICY_RESULT_TYPE_UNSPECIFIED = 0;
  POLICY_RESULT_TYPE_ACCEPT_ROUTE = 1;
  POLICY_RESULT_TYPE_REJECT_ROUTE = 2;
}
