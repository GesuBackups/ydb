syntax = "proto3";

import "ydb/public/api/protos/ydb_operation.proto";
import "logbroker/public/api/protos/config_manager_admin.proto";
import "logbroker/public/api/protos/common.proto";

package NLogBroker.NAdmin;

option cc_enable_arenas = true;
option java_outer_classname = "Service";

// Data model:
// There are clusters, accounts, directories, topics, consumers and read rules is LogBroker data model.
// Cluster is instance of lb (man for man.logbroker.yandex.net, sas for sas.logbroker.yandex.net and so on)
// Account is a directory with additional quotas for count of objects, for example for topics.
// Directory is a simple directory with directories, topics and consumers. It is used only for hierarchy quotas/ACLs.
// Topics is a discributed queue, one cat write messages to it and read messages from it.
// Consumer is an object for storing client offsets for all topics that are read by this consumer.
// Read rule is a rule of reading concrete topic by concrete consumer. 
// ReadRule describes what will be read(topic), by whom (consumer) and how (mode).
// Mode is either cluster name - in this case one will read data from all clusters only in specified cluster,
// or 'local' - in this case one will read data of all clusters inside them.
// There could be several read rules for one consumer-topic pair. For example, two read rules describing reading from 2 clusters for failover.

// Hierarchy:
// account1/directory1/directory2/topic1
// account1/directory1/consumer1
// account1/directory1/topic2
// account2/topic3
//
//
// Each account/directory has hierarchy read/write quotas. One can create directories/topics/consumers only in account or directory.
// for reading one must have ACE for reading of topic, ACE for reading/committing of consumer and ReadRule.

service ConfigurationManagerAdminService {
    rpc DescribeCluster(DescribeClusterRequest) returns (DescribeClusterResponse);
    // Describe directory, topic, consumer or account
    rpc DescribePath(DescribePathRequest) returns (DescribePathResponse);
    rpc DescribeYtConsumer(DescribeYtConsumerRequest) returns (DescribeYtConsumerResponse);
    rpc DescribeAccountTemplate(DescribeAccountTemplateRequest) returns (DescribeAccountTemplateResponse);
    rpc DescribeTopicTemplate(DescribeTopicTemplateRequest) returns (DescribeTopicTemplateResponse);
    rpc DescribeConsumerTemplate(DescribeConsumerTemplateRequest) returns (DescribeConsumerTemplateResponse);

    rpc ListClusters(ListClustersRequest) returns (ListClustersResponse);
    rpc ListAccounts(ListAccountsRequest) returns (ListAccountsResponse);
    // List objects in directory
    rpc ListDirectory(ListDirectoryRequest) returns (ListDirectoryResponse);
    rpc ListYtConsumers(ListYtConsumersRequest) returns (ListYtConsumersResponse);
    rpc ListYdbConsumers(ListYdbConsumersRequest) returns (ListYdbConsumersResponse);
    rpc ListAccountTemplates(ListAccountTemplatesRequest) returns (ListAccountTemplatesResponse);
    rpc ListTopicTemplates(ListTopicTemplatesRequest) returns (ListTopicTemplatesResponse);
    rpc ListConsumerTemplates(ListConsumerTemplatesRequest) returns (ListConsumerTemplatesResponse);

    // Execute all modify (create/update/delete) requests
    rpc ExecuteModifyCommands(ExecuteModifyCommandsRequest) returns (ExecuteModifyCommandsResponse);

    // Get status of request for polling result of asynchronous operation
    rpc GetOperation(Ydb.Operations.GetOperationRequest) returns (Ydb.Operations.GetOperationResponse);

    rpc GetCurrentVersion(GetCurrentVersionRequest) returns (GetCurrentVersionResponse);
    rpc GetBackendVersions(GetBackendVersionsRequest) returns (GetBackendVersionsResponse);
    rpc GetCommandsLog(GetCommandsLogRequest) returns (GetCommandsLogResponse);

}
