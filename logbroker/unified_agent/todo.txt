board:

динамически настраивать logbroker:
    https://st.yandex-team.ru/UNIFIEDAGENT-51

Проверки Unified Agent таймаутятся из-за долгих ответов ручки status
    https://st.yandex-team.ru/UNIFIEDAGENT-31

---
gusev-p:
    * интеграционный тест на юзадж cpu/памяти
        yql/tools/yqlrun/yqlrun.cpp:431

        много мелких сообщений, много крупных сообщений

	fuzzer
		https://a.yandex-team.ru/arc/trunk/arcadia/yql/tools/fuzzer/fuzzer.cpp?rev=3620801

	coverage смотреть периодически

alexnick:
    * syslog теряет трафик?

    * yt sender sigterm
        есть тут прогресс какой-то?

    * показать преимущества схемы ua
        убираем?

andreyst:
    * график числа ua/push_client
        можно здесь что-то улучшить?

    * docs quick start and install
        убираем?

    * docs deploy

    * docs концепции

    * docs про миграцию с push client

    * billing в облаке

    * дока для пользователя DP (хз что это)

    ---
    * reqans -> prod

    * java appender

    * deploy layer + grpc new

artgromov:
    * yql cmp

    * release machine

    * ymq + sqs nginx

=================
acceptance:
    * deploy -> новый протокол

    * dogfood yql compare yt

    * restrict tests

    * splitN + part quota reqans

    * json для deploy

=================
goals:
    * [A] deploy

    * [B] reqans

    * [C] sandbox

    * [D] инфра

    * [E] ua -> yt sender/ydb

    * [F] продукт

    * [G] BigB

    * [H] геосервисы
            https://st.yandex-team.ru/UNIFIEDAGENT-40

=================
backlog:
    * счетчик inflight, брать максимум за интервал
        https://st.yandex-team.ru/UNIFIEDAGENT-18

        тоже самое скорей всего ко всем state-счетчиком применимо - BytesInWriteQueue какой-нибудь, например

    * графики/алерты, если агент был завершен нештатно
        в initd таймаут 10 секунд, иногда не укладываемся почему-то

    * UDF для lenval splitter
        https://st.yandex-team.ru/UNIFIEDAGENT-42

    * stdin, named pipes
        https://st.yandex-team.ru/UNIFIEDAGENT-7

    * перейти на протобуф в yd_format https://st.yandex-team.ru/UNIFIEDAGENT-29

    * batch -> split_session без стораджа
        https://st.yandex-team.ru/UNIFIEDAGENT-21

    * параметризованные channel-ы
        https://st.yandex-team.ru/UNIFIEDAGENT-10

    * метрики app -> logbroker

    * Трассировка в клиентской либе и в агенте
        https://st.yandex-team.ru/UNIFIEDAGENT-38

    * Мониторить cpu
        https://st.yandex-team.ru/UNIFIEDAGENT-3

    * dead letter queue для exception-ов, вылетевших из кастомных плагинов
        возможно стоит конфигурировать поведение при exception-ах - падать, скипать, слать dead letter

    * генерилка конфига ua по конфигу push_client
        https://st.yandex-team.ru/UNIFIEDAGENT-146

    * Либа для записи в агента данных из внешнего персистентного хранилища
        https://st.yandex-team.ru/UNIFIEDAGENT-23

    * pqlib, выставить соломоновские счетики
        https://st.yandex-team.ru/LOGBROKER-5599

    * file output
        простое решение для интеграции с другими тулами (setrace), для тех, кому
        пофиг на 2x по iops-ам к диску

        не понятно только, где ack-и хранить, и что делать, когда данные записались, а аки - нет

        https://st.yandex-team.ru/UNIFIEDAGENT-35

	* бюджет памяти
		yql/minikql/mkql_alloc.h

		SetLimit

		arcadia\yql\minikql\aligned_page_pool.h
			через линковку на нужный аллокатор

    * BacklogOldestMessageAge
        https://st.yandex-team.ru/UNIFIEDAGENT-2

    * метрики app -> solomon
        pull solomon input

        cloud

        metering

    * увеличить размер сообщения в yt_sender до 128mb
        бывают большие сообщения в yt_sender почему-то

    * увеличить дефолтный максимальный размер сообщения до 12mb
        на пути от grpc lib-ы до lb

        12 - дефолт в lb, будет дополнительный гемор, если придется
        в ua раскручить при переезде с push client

    * data driven config
        не знаю, зачем это

    * замена push client для биллинга и ивентов (неразборчиво)

    * замена journald

    * [F] миграция конфигов
        https://st.yandex-team.ru/UNIFIEDAGENT-43

        придумать что-то с изменением сессионной меты через конфиг (assign.session)

        * менять число сессий (https://st.yandex-team.ru/UNIFIEDAGENT-44)

        обсуждали с @vvvv общую схему - дожидаться разгребания стораджа на старом конфиге/бинаре/ресурсах,
        автоматически/атомарно переезжать на новый. Так мы сможем позволить клиентам произвольным образом менять
        конфиг/код плагинов/используемые ресурсы и гарантировать при этом exactly once.

        добивать хвосты в сторадже по сессиям - сессионная мета могла измениться

    * [F, T3] фильтр по наличию меты
        обсудить с vvvv

        произвольные bool expression-ы в match/enable_if

        прикрутить lua вместо своих микроязыков тут и в assign?

        https://st.yandex-team.ru/UNIFIEDAGENT-13

    * [F] сэмплить выхлоп по id-шке плагина (curl-ом)
        https://st.yandex-team.ru/UNIFIEDAGENT-147

    * [T8] ротация sourceid-ов https://st.yandex-team.ru/UNIFIEDAGENT-45

    * [F] новый механизм регистрации плагинов
        опционально собирать плагины - штуки вроде journald_output слишком много притаскивают в зависимостях

        либо so-шки, либо отдельные ya.make
            yql/udfs/common/python/python3_small/ya.make

    * [C] имя топика - из сессионной меты
        Data driven config - что-то слишком общее

    * [F] именованные tvm-клиенты
        https://st.yandex-team.ru/UNIFIEDAGENT-16

    * [F] логи агента через агент
        agent_logs_input?

        self_logs - input-плагин, через который можно достать собственные логи агента

        Artem Gromov, [5 дек. 2019 г., 20:01:11]:
            в общем, важность этой штуки, похоже, возросла

            второй раз у push-agent-proxy нужны логи, мы понадеялись на porto

    * телеметрия от самого агента (метрики/конфиги)
        полезный сценарий - когда в агенте что-то идет не так, он мог бы сам собирать отчет о своем
        состоянии, опрашивая все плагины, слать его в предопределенный топик. Можно будет не напрягать клиентов
        унылыми просьбами собрать логи и тп.

        https://st.yandex-team.ru/UNIFIEDAGENT-46

    * grpc watchdog в клиентской либе?

    * [F] go lib

    * file output

    * file input

    * [F] жить с nobarrier

    ---
    * тех/диз долг
        не знаю, что имеется в виду

    * лимит на число сессий (в сторадже и в пайплайне)

    * checkpoint signal to client
        не знаю, что это

    * grpc quota
        видимо про это речь https://st.yandex-team.ru/UNIFIEDAGENT-8

    * сжатие - тащить id-шку кодека с блоком

    * агент на хосте

=================
other:
* tvm в status-е
    либо выпилить, либо задокать, как юзать

* протащить счетчики в python клиент

* перейти на новую библиотеку сенсоров?
    ISensorsFactory

    https://wiki.yandex-team.ru/solomon/libs/sensorscpp

* не разваливаться, если место внезапно кончилось на WriteBlock
    https://st.yandex-team.ru/UNIFIEDAGENT-131

* "размножающий" фильтр
    без него неудобно в тестировании - приходит пачка по \n,
    хочется скормить в поэлементный фильтр

    тащить ack от output-а через фильтры - конвертить во входной seqNo,
    складывать в какой-то ackMeta, сохранять вместе с ack-ом

* количество метрик агента
    откладываем, соломон пока вполне справляется

* тула для восстановления данных стораджа
    https://st.yandex-team.ru/UNIFIEDAGENT-47

* возможность отключить сбор бэктрейсов
    можем втупить, если диск загружен

    стоит фатальные ошибки по внешним причинам (сломанный диск/недоступная сеть) всегда без бэктрейса писать,
    аналогично ошибкам в конфиге

    https://st.yandex-team.ru/UNIFIEDAGENT-48

* [T7] разобраться с потерей в yt_sender
    https://st.yandex-team.ru/LOGBROKER-5219

* перезагружать конфиг без рестарта https://st.yandex-team.ru/UNIFIEDAGENT-49

* make_load
    https://a.yandex-team.ru/review/1084845

    запись в файл

    запись по HTTP

    идентификатор теста и сообщения для сверки полноты

* копать упавший ассерт в Subchannel::NotifyOnStateChange
    Олег Сидоркин

    написать тест, воспроизвести локально

* деградация производительности
    https://st.yandex-team.ru/LOGBROKER-5093

    разные лаги
        128 -> 5s
        256mb -> 100 millis
            mlockall

            статистика page fault-ов

            lf alloc профилирование - метки tls tag
                PROFILE_MEMORY_ALLOCATIONS

    от куда 5s лаги при 256mb?

    скачки cpu
        мониторинг, питон-хуки

* эксперимент с дискретностью таймера - дать целое ядро, посмотреть будет ли тупизна
    cpu в porto без лимит

    откладываем, латенси пока устраивает

* от куда 20 тредов?

* /status бывает по 300 миллисекунд. Почему?

* добавить отдачу static/ui.html (если есть, то из файла по тому же имени)

* обобщить ReceiptWriteStartTime/ReceiptWriteAckTime, будет полезно для любых output-ов

* syslog парсер
    nohostname

    parse pid from tag?

    новый syslog rfc

* ack в сторадже сейчас по сути только на checkpoint применяются.
  Если юзер отключит checkpoint-ы через конфиг - будет странно.

* storage: обложить repair счетчиками (угадывать количество дропов)
    0.5d

* мета без namespace-а - автоматически приписывать '<plugin-name>:'?

* storage: лимитировать суммарный размер всех партиций
    1d

    aggregate storage size counter/UnacknowledgedSeqNoRange

* сохранение оффсетов для logbroker.yandex.net

* id-шка стораджа может совпасть с id-шкой какого-то другого плагина - некрасиво развалимся

* лимит на элементы меты

* storage
    откладывать backup-ы в сторону, если при восстановлении нарушены какие-то инварианты

    поведение stop при bad state?

    про откладывать сторадж в сторону

    откладываем

* storage: следить за реальным свободным местом, как-то репортить если сильно от расчетного отличается

* storage: учитывать размер индекса и меты при ротации

* сохранение seqNo отфильтрованных сообщений на стороне lb

* delayed executor: не дергать тред слишком часто, просыпаться с некоторой фиксированной частотой из
конфига, забирать что есть одним atomic::exchange(), перекладывать в локальный хип
    уже сделано почти, нужно внедрить

    wakeup-ить тред не чаще 1 миллисекунды

    perf тест, который запруфит выигрыш

* арены для grpc и не только
    https://github.com/protocolbuffers/protobuf/issues/4327

* rusage вместо wall clock

* ShutdownRequested()
    можем обрабатывать более эффективно, чем CancellationRequested(). Позволит например
    в fs_storage отменять целые собранные блоки, которые успели доехать до
    очереди перед WriteBlock-ом, так как есть гарантия, что никакая
    сессия уже более не будет активной.

* [[nodiscard]] virtual EStartSessionResult StartSession(
	тут фьюча?

* THolder<IOutputSessionHandler> CreateOutputHandler(IOutputSessionContext& ctx) override {
	тут фьюча?

* storage: сейчас при выпадении сектора с заголовком сегмента или первого блока сегмента теряется весь сегмент

* task executor: придумать что-то с "медленными" тасками
    можем во fsync уйти из таски, все что за ней в очереди будет висеть

* Недоступные/тормозящие output-ы. Сейчас если output недоступен или просто
не читает стрим по какой-то причине, пайплайн упрется в инфлайт и встанет. Идея в том, чтобы
по некоторым трешолдам научиться распознавать зависшие output-ы, отщеплять
для них отдельный пайплайн и прокачивать независимо от всего остального.
Когда output оживет и этот пайплайн догонит основной - вклеивать его обратно.

* Неупорядоченные output-ы. Сейчас перед отправкой в output безусловно упорядочиваем поток сообщений,
многим output-ам скорей всего это не нужно и можно добиться бОльшего параллелизма.

* TMessage: COW

* TBatchFilter: merge meta

* grpc input TAgentPusher, force close on errors during close

* logbroker_output:
    переподключение к другому серверу/партиции, если старые недоступны?

* функциональный апи для input plugin-а https://st.yandex-team.ru/UNIFIEDAGENT-50

* утащить mpsc_queue в library

* посмотреть на реализацию RWLock-а

* возможные оптимизации cpu:
    * 35% проводим внутри grpc/tcp
        лапшов, snaury, yf

        может просто бачи нужно больше делать

    * пулить NUnifiedAgentProto::Request - много времени проводим в деструкторе. Вот похожее
    yt/19_4/yt/core/misc/object_pool.h:73, но там стек на нодах и куча new/delete.

    * придумать что-то получше std::deque для промежуточных очередей - светятся всякие append/erase-ы
