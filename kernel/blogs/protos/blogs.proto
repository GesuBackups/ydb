package NBlogs;

message TComment {
    optional string Url = 1; // an url of a comment.

    optional string Title = 3; // atom:title type="html"
    optional string Content = 4; // atom:content type="html"
    optional fixed32 Issued = 5; // atom:issued as a timestamp

    optional string Author = 6; 
    // an id of a comment author. http://kukutz.livejournal.com/ for example.
    // a defined but empty value denotes an anonymous comment.

    optional string Parent = 7; // parent comment Url

    // TODO: a spam check results of a specific comment
    optional string Guid = 8;
    optional fixed32 StoreTime = 9;
    optional fixed32 LogTime = 10;
}

message TEnclosure {
    // rss: 
    //   <enclosure url="http://www.foo.com/movie.mov" length="12216320" type="video/quicktime" />
    // atom:
    //   <link xmlns="http://www.w3.org/2005/Atom" rel="enclosure" href="http://www.foo.com/movie.mov" length="12216320" type="video/quicktime" />
    // yahoo: 
    //   <media:content xmlns:media="http://search.yahoo.com/mrss/" 
    //     url="http://www.foo.com/movie.mov" 
    //     fileSize="12216320" 
    //     type="video/quicktime"
    //     ... />

    optional string Url = 1;
    optional string Type = 2; // TODO: enum?
    optional uint32 Length = 3;
}

message TPost {
    optional string Title = 1; // atom:title type="html"
    optional string Content = 2; // atom:content type="html"
    optional fixed32 Issued = 3; // atom:issued as a timestamp

    optional string Journal = 4; 
    // an url of a journal. http://community.livejournal.com/ru_perl for example. 

    optional string Author = 5; 
    // an url of a post author. http://kukutz.livejournal.com/ for example. 
    // in many cases it is equal to the Journal, but for communities it is different.
    // a defined but empty value denotes an anonymous post.

    repeated string Categories = 6; // atom:category
    repeated TEnclosure Enclosures = 7;

    optional string Music = 8; // lj:music
    optional string Mood = 9; // lj:mood

    repeated TComment Comments = 10;

    optional string Url = 11;

    optional uint32 FeedId = 12;
    optional uint32 ItemNo = 13;
    optional string Guid = 14;

    optional fixed32 StoreTime = 15;
    optional string BaseUrl = 16;
    optional string CommentsUrl = 17;
    optional fixed32 LogTime = 18;

    repeated TAttachment Attachments = 19; // ???
    optional TShare Share = 20; // ???
}

message TAttachment {
    required string Link = 1;
    required string Type = 2;
    required string Title = 3;
    required string Body = 4;
    optional TAttachmentMedia Image = 5;
    optional TAttachmentMedia FullImage = 6;
    optional TAttachmentMedia Embed = 7;
}

message TShare {
    required string Body = 1;
    required string Link = 2;
    optional string Author = 3;
    optional string Guid = 4;
}

message TAttachmentMedia {
    required string Link = 1;
    required string Type = 2;
    optional uint32 Height = 3;
    optional uint32 Width = 4;
}

message TDate {
    optional string Year = 1;
    optional string Month = 2;
    optional string Day = 3;
    optional string DateTime = 4;
    // all the fields are optional. sometimes we know month/day but not a specific year. sometimes the opposite only the year is available.
}

message TGeo {
    optional string Country = 1;
    optional string Region = 2;
    optional string City = 3;
    optional string Address = 4;
    optional string FullAddress = 5;
    // TODO: add geo ids for geobase someday?
};

message TThumbnail {
    optional string Url = 1;
    optional uint32 Width = 2;
    optional uint32 Height = 3;
    optional string OrigUrl = 4;
}

message TImage {
    optional string Url = 1;
    optional uint32 Width = 2;
    optional uint32 Height = 3;
    optional string OrigUrl = 4;
    repeated TThumbnail Thumbnails = 5;
}

message TContact {
    enum TType {
        OTHER = 0;
        ICQ = 1;
        JABBER = 2;
        EMAIL = 3;
        SKYPE = 4;
        MSN = 5;
        AOL = 6;
        MOBILE = 7;
        HOME_PHONE = 8;
        PHONE = 9;
        // TODO: moar!
    };
    required TType Type = 1;
    optional string Name = 2; // for Type OTHER
    required string Value = 3; // the contact itself
}

// school, university, job
message TCareer {
    optional TGeo Geo = 1;
    optional int32 StartYear = 2;       // attending date
    optional int32 EndYear = 3;         // -1 if still works here
    optional string Caption = 4;        // "school #42", "Moscow State University", "Yandex"
    optional string ShortCaption = 5;   // "42", "MSU", "Yandex"
    optional string Status = 6;         // "pupil", "student, ...", "research-programmer"
    optional string SubCaption = 7;     // "class B", "Mechanics and Mathematics, Higher geometry and topology", "Combinatorics and Probability Laboratory"
    optional string Form = 8;           // "full-time", "CEO", "Owner", "post-graduate student", ...
    enum ECareerType {
        OTHER = 0;
        SCHOOL = 1;
        UNIVERSITY = 2;
        JOB = 3;
        MILITARY = 4;
    }
    required ECareerType Type = 9;

    optional string Description = 10;
    optional string AboutUrl = 11;
}

message TExternalProfile {
    required string Url = 1;
    optional string Status = 2;
}

message TStats {

    // twitter
    optional uint32 FollowersCount = 1;
    optional uint32 StatusesCount = 2;
    optional uint32 ListedCount = 3;
    optional uint32 FriendsCount = 4;
    optional uint32 FavouritesCount = 10;

    // yandex foaf extention
    optional uint32 PostsCount = 5;
    optional uint32 CommentsPostedCount = 6;
    optional uint32 CommentsReceivedCount = 7;
    optional uint32 SubscribersCount = 8; // vk.com
    optional uint32 SubscribedToCount = 9;
}

message TJournal {
    // a journal or author description
    // TPost.Author, TPost.Journal, TComment.Author and TFoafAgent.Url are intended to refer to this structure.

    enum TType {
        OTHER = 0;
        BLOG = 1;
        COMMUNITY = 2;
        FORUM = 3; // what about forums posts? threads? ya:rss flag?
        SPAM = 4;
    }
    optional TType Type = 1; // TODO: probably we would want separate proto types like TBlog, TCommunity, TForum? //FIMXE: repeated TType Types?
    optional uint32 Subscribers = 2; // the number of feed readers summarized from yandex services.
    optional uint32 Rating = 3; // defined for blogs and communities only, no forums rating at the moment.

    optional string Title = 4; // "brad's life" (feeds.title || profiles.account_title)
    optional string Nick = 5; // "brad" (feeds.author || profiles.nick)
    optional string Name = 6; // "Brad Fitzpatrick" (profiles.full_name)

    optional string Username = 7;
    // a bloghosting specific choice of one of the three above.
    // includes some extra processing (strip to NN symbols etc.)

    optional TDate BirthDate = 8; // the birthday of an author
    optional TDate CreationDate = 9; // the date this journal was started. (profiles.account_creation_date || feeds.creation_date)

    enum TSex {
        UNKNOWN = 0;
        MALE = 1;
        FEMALE = 2;
    }
    optional TSex Sex = 10; // author's gender
    optional TGeo Geo = 11; // author's or journal's geo location
    optional TImage Image = 12; // journal's avatar. TODO: repeated?

    optional string Lang = 13; // three letter lang name. "unk" stands for unknwon language. detection relies on the last posts content.
    optional uint32 SubscribersTotal = 14; // the total number of feed readers summarized from various sources.
    optional uint32 RatingPlace = 15; // defined for blogs and communities only, the place in blogs/communitites ratings.

    optional string Url = 16; // html link. the key in map/reduce.

    optional uint32 FeedId = 17; // feed_id for debugging
    optional string RssLink = 18; // rss/atom feed link
    optional string Description = 19; // "Brad Fitzpatrick - Livejournal.com" (feeds.description)
    optional string Generator = 20; // rss/atom feed generator
    optional bool RssRobotsTxt = 21; // true = allow. robots.txt
    optional bool RssCopyright = 22; // true = allow. <copyright>noindex</copyright>

    optional uint64 AgentId = 23; // agent_id for debugging
    optional string FoafLink = 24; // foaf link
    repeated TContact Contacts = 25; // icq, skype, jabber, ...
    optional string Bio = 26; // a custom text field

    optional uint32 Time = 27; // a timestamp of the patch

    repeated string ExternalUrls = 28; // weblinks from user profile

    enum TFamilyStatus {
        MARRIED = 1;
        SINGLE = 2;
        RELATIONSHIP = 3;  // in a relationship
        ENGAGED = 4;
        COMPLICATED = 5; // it's complicated
        OPENED = 6; // in an open relationship
        WIDOWED = 7;
        SEPARATED = 8;
        DIVORCED = 9;
        LOVING = 10; // stuck on
    }
    optional TFamilyStatus FamilyStatus = 29;
    repeated TCareer Careers = 30; // education and career
    optional TStats Stats = 31;

    optional string Homepage = 32; // homepage
    optional bool PublicAccess = 33; // public access aka ProfileAccess

    enum TProfileState {
        ACTIVE = 1;
        DELETED = 2;
        BANNED = 3;
        DEACTIVATED = 4;
    }
    optional TProfileState ProfileState = 34;

    repeated TExternalProfile ExternalProfiles = 35;

    optional TDate ModificationDate = 36; // the date of modification. (profiles.other.modified)
    optional TDate VisitDate = 37; // profiles.other.visit
    optional TDate LastLogInDate = 38; // last log in

    optional string InterfaceLang = 39;

    repeated string UrlList = 40;
    repeated string ImageList = 41;

    // ProfileAccess is in field PublicAccess
    optional bool PostsAccess = 42;

    // last time we've seen that journal is alive
    // (fetched rss or foaf, or at least received the post from it via speedup stream)
    optional uint32 LastFetch = 43;

    optional uint32 FriendsTotal = 44; // the total number of friends of this feed ("Following" in Twitter)
}

message TFoafAgent {
    required string Url = 1;
    optional uint64 Id = 2; // a PPB id, for debugging mostly
}

// a patch to a foaf graph
message TFoafEdge {
    required TFoafAgent Friender = 1;
    required TFoafAgent Friendee = 2;
    optional uint32 Time = 3;
    required bool Relation = 4; // friend/unfriend
}

// a complete foaf graph for one agent
message TFoafGraph {
    required TFoafAgent Friender = 1;
    repeated TFoafAgent Friendee = 2;
    optional uint32 Time = 3;
}

// a tiny link resolve
message TTinyLink {
    required string TinyLink = 1;
    optional string ResolvedLink = 2; // a redirected link, may be undefined when tiny link is broken
    optional uint32 Time = 3;
}

