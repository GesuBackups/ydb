import "zora/util/proto/types.proto";

import "zora/zora/proto/trace.proto";

import "zora/zora/proto/statuscodes.proto";

import "zora/zora/proto/common/common.proto";

package NZoraPb;

// should be same value-by-value as NFetcherMsg::ERequestType
enum ERequestType {
    ONLINE      = 0;
    OFFLINE     = 1;
    USERPROXY   = 2;
};

message TRdsRequest {
   message TRange {
      optional uint64 Start  = 1;
      optional uint64 Length = 2;
   }
   optional TRange      Range  = 1;
   optional bytes       Cookie = 2;
};

// TODO: refactor
message TRdsResponse {
   enum TStatus {
      Ok_WaitingForNextCommand                          = 1; // See in status of OrdinaryResponse
      Ok_Finished                                       = 2; // See in status of OrdinaryResponse
      IllFormedRequest_BadRange                         = 3; // See BadRangeExplanation
   };
   optional TStatus     Status      = 1;
   optional bytes       Cookie      = 2;
   optional string      Description = 3;
};

message TOneHeaderLine {
   optional string Header = 10;
   optional string Value  = 20;
};
message THttpHeaders {
    repeated string             Headers         = 1;    // one header line "key: val" (no newline needed)

    // these options will be translated to header lines as well
    optional NZUtilPb.TInstant  ModTime         = 2;    // If-Modified-Since:
    optional int64              RangeStart      = 3;    // Range: bytes=X-
    optional int64              RangeEnd        = 4;    // Range: bytes=-X
    optional string             BasicAuthLogin  = 5;
    optional string             BasicAuthPassword = 6;
};

// speed up subsequent requests in this session:
// use allocated bandwidth, described in source config
message TSesOptSpeedup {
    optional bool Speedup   = 10 [default = false];
};

// fetch subsequent requests in this session
// from the same ip first request was fetched
message TSesOptStickyIp {
    optional bool StickyIp = 10 [default = false];
    // enum ActionOnDifferentIp: Warning, Stop, ... - TODO
};

message TCreateSession {
    optional TSesOptSpeedup  SesOptSpeedup  = 10;
    optional TSesOptStickyIp SesOptStickyIp = 20;
};

message TContinueSession {
    optional bytes SessionCookie  = 10;
    optional bool  UseSpeedupSes  = 20;
    optional bool  UseStickyIpSes = 30;
}

message TSessionCommand {
    oneof Command {
        TCreateSession   CreateSession   = 10;
        TContinueSession ContinueSession = 20;
        // TCloseSession    CloseSession    = 30; - TODO
    };
};

message TRedirSettings {
    enum ERedirMode {

        // don't follow redirects
        None = 1;

        // follow redirects and return redirect target (or Depth-th redirect if chain is too long)
        Last = 2;

        // return first result (3xx), fetch redirect target (and intermediate redirects) in background
        // only works if PipelineId is set (otherwise it's useless)
        // this mode is set for all requests with OFFLINE RequestType
        First = 3;

    }
    optional uint32             Depth           = 1 [default = 5];
    optional ERedirMode         Mode            = 2 [default = None];
    repeated string             RedirChain      = 3; // redir chain that led to this fetch (don't include current url)
}

message TFetchOpts {
    optional ERequestType           RequestType                = 1 [default = ONLINE];

    optional string                 Url                        = 21;  // URL to be fetched
    optional uint64                 Priority                   = 22;  // fetch priority within scheduler queue
    optional bool                   NoRetry                    = 23;  // don't wait for bad hosts to become good   Retr
    optional TSslCertPolicy         SslCertPolicy              = 27;
    optional string                 LangRegion                 = 24;  // region from which to fetch (adds Accept-Language to headers)
    optional bool                   IgnoreRobotsTxt            = 25;  // may disobey robots.txt Disallow rules (permition needed)
    optional bool                   UseMimeFilter              = 26;  // use mime filter defined for source in squota.spider
    optional string                 HashedUrl                  = 28;  // hashed url for SecureUrl option

    optional NZUtilPb.TDuration     Freshness                  = 31;  // take from cache if a document is not older than X
    optional bool                   OnlyFromCache              = 32;  // don't actually fetch - try to obtain from cache

    optional string                 HttpMethod                 = 41 [default = "GET"];  // request method
    optional THttpHeaders           HttpHeaders                = 42;  // additional http-headers
    optional bytes                  HttpBody                   = 43;  // request body (e.g. for POST requests)

    optional TRdsRequest            RdsRequest                 = 51;  // options for smart range-request
    optional string                 FetcherDcHint              = 52;  // fetcher is selected from this DC (as specified in cluster.conf) if possible

    optional TSessionCommand        SessionCommand             = 60;

    optional TRedirSettings         Redir                      = 70;

    optional TTrace                 TemporaryTrace             = 80;  // for tracing before TFetchResult is created, should be moved into proper place when possible
    optional bool                   DumpHttpRequestAtFetcher   = 90 [default = false];

    extensions 900 to 999;  // for spider director internal use
};

message TFetchResult {
    optional EFetchStatus                Status                      = 2;        // status code
    optional string                      ErrorStr                    = 3;        // Human-readable error description

    optional int32                       HttpStatus                  = 4;        // Http status-code from server
    optional bytes                       HttpResponse                = 5;        // http-response

    optional bytes                       RobotsTxt                   = 6;        // serialized robots.txt (if http://aaa.com/robots.txt was requested)

    optional NZUtilPb.THostAddress       Ip                          = 10;
    optional NZUtilPb.THostAddress       FetchIp                     = 11;       // fetcher's ip
    optional string                      FetchRegion                 = 12;

    optional NZUtilPb.TInstant           LastAccess                  = 20;
    optional NZUtilPb.TDuration          CrawlDelay                  = 21;
    optional bool                        FromCache                   = 22;
    optional bool                        HasSslCertErrors            = 23;
    optional string                      SslCertErrorsExplanation    = 35;
    optional uint32                      SourceId                    = 24;       // compat: sourceId as in squota config

    optional bool                        ViolatesRobotsTxt           = 25;
    optional bool                        IsMultilingual_DEPRECADED   = 26;

    optional bytes                       SessionCookie               = 30;
    optional TRdsResponse                RdsResponse                 = 31;

    optional uint32                      MimeType                    = 40;       // mime-type detected by fetched content

    optional TTrace                      Trace                       = 50;

    repeated string                      RedirChain                  = 60;       // redirect chain, includes current Final url

    // some values from http response
    optional string                      HttpLocation                = 102;      // Location:
    optional NZUtilPb.TInstant           HttpModTime                 = 103;      // Last-Modified:
    optional int64                       HttpRangeStart              = 104;      // Content-Range:
    optional int64                       HttpRangeEnd                = 105;      // Content-Range:

    optional uint32                      BotId                       = 110;
    // repeated TOneHeaderLine              ReqHeaders                  = 120;      // added by spider
    optional string                      HttpRequest                 = 130;      // as it seen at fetcher / as it sent by fetcher

    optional bool                        RenewHost                   = 135;     // pass it through from squota conf

    optional int32                       RequestGeoId                = 140;     // GeoIds for/from
    optional int32                       ResponseGeoId               = 141;     // Hitrenimals
    optional string                      HitrenimalsDataMark         = 142;     // Hitrenimals Data Mark
}
