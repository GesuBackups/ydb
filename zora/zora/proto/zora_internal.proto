import "zora/util/proto/types.proto";
import "zora/zora/proto/fetch.proto";
import "zora/zora/proto/js.proto";
import "zora/zora/proto/zora.proto";

import "library/cpp/actors/protos/actors.proto";
import "yweb/protos/spider.proto";
import "yweb/robot/js/rotor/proto/execute.proto";

package NZoraPb;

// internal extensions to zora user interface

message TSpiderConvData {
    // conversion time
    optional uint32                                   LogelVersion                  = 2;
    optional NFetcherMsg.TDiagInfo                    DiagInfo                      = 3;
    optional NActorsProto.TActorId                    IcDestinationActorID          = 4;
    optional string                                   IcDestinationCookie           = 5;
    optional bool                                     DumbFetch                     = 7;
    optional bool                                     IgnoreMbResponse              = 8;
}

message TSessionInternalState {
    // actor for session status notifications
    optional NActorsProto.TActorId SessionAID = 1;
}

message TZoraInternal {
   optional NZUtilPb.THostAddress   ClientIp            = 2;   // client ip
   optional string                  RequestId           = 3;   // request is generated by zora
   optional NActorsProto.TActorId   ParentDirectorAID   = 4;
   optional string                  ExplicitId          = 5;   // ID to group requests and subrequests by
};

extend TZoraRequest {
    // response needs to be converted to old format
    optional TSpiderConvData        SpiderConvData  = 901;

    optional TZoraInternal          ZoraInternal  = 903;
}


extend TFetchOpts {
    // serves as a state that director passes to directorPp
    optional TZoraRequest                       ZoraRequestS = 900;

    // internal session info used by fetch service
    optional TSessionInternalState              SessionInternalState = 901;
}

extend TJsOpts {
    // serves as a state that director passes to directorPp
    optional TZoraRequest                       ZoraRequestR = 900;
}

extend NJs.TExecuteRequest {
    optional TZoraRequest                       ZoraRequestE = 1002;
}

