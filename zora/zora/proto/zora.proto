package NZoraPb;

option cc_enable_arenas = true;

import "yweb/robot/gen_act/core/proto/dest_id.proto";
import "zora/util/proto/types.proto";
import "zora/zora/proto/common/common.proto";
import "zora/zora/proto/fetch.proto";
import "zora/zora/proto/js.proto";
import "zora/zora/proto/calc/calc.proto";
import "zora/zora/proto/context.proto";
import "zora/zora/proto/pdfetch.proto";
import "zora/zora/proto/statuscodes.proto";

////////////////////////////////////////////////////////////////////////////////////////////////
// Zora (single entry point for document fetching, js rendering and processing) user interface
////////////////////////////////////////////////////////////////////////////////////////////////

message TZoraRequest {
    optional string                             SourceName      = 1;
    optional string                             ClientInfo      = 2;

    // user can tag a request so that all corresponding actions
    // can be easily found throughout our syslogs
    optional string                             RequestTag      = 3;

    // user can specify either `Deadline' or `Timeout'
    // `Timeout' will be transformed by Zora to `Deadline` at the time of
    // receiving request by just adding it to current time
    // Only one field must be set by user
    optional NZUtilPb.TInstant                  Deadline        = 4;
    optional NZUtilPb.TDuration                 Timeout         = 5;

    // explicit ID to group all requests and sub-requests by
    optional string                             ExplicitId      = 6;

    // interconnect interface: where to return results to
    // If MB or HTTP interface is used, it will be filled by corresponding bridge
    optional NProtoGenericActors.TDestination   Destination     = 10;

    // fetch options for main document
    optional TFetchOpts                         Fetch           = 30;
    // use already fetched document
    optional TFetchResult                       FetchResult     = 31;

    // js-rendering options
    optional TJsOpts                            Js              = 40;

    // pdfetch options
    optional TPDFetchOpts                       PDFetch         = 50;

    // post-processing and pipeline options
    optional TCalcOpts                          Calc            = 60;

    // user cookie to pass through zora
    optional TContext                           Context         = 70;

    // used instead of SourceName to use TVM authorization instead of host/ip whitelist
    optional string                             TvmServiceTicket = 100;

    // for zora internal stuff - don't use them
    extensions 900 to 999;
}

message TMockResult {
    optional bool     IsMock      = 1;
    optional bytes   MockSourceUrl = 2;
}

message TZoraResponse {
    optional TZoraRequest           Request         = 1;

    optional EZoraStatus            Status          = 2;
    optional string                 ErrorStr        = 3;

    optional string                 RequestId       = 4;

    optional TFetchResult           Fetch           = 10;

    optional TJsResult              Js              = 20;

    optional TPDFetchResult         PDFetch         = 30;

    optional TCalcResult            Calc            = 40;

    optional TMockResult            Mock            = 50;
}


message TDiagInfoOfReFetcherPhase {
   optional NZUtilPb.TInstant         Start              = 10;
   optional NZUtilPb.TDuration        Duration           = 20;
   optional uint32                    HttpStatus         = 30;
   optional NZoraPb.EZoraStatus       ZoraStatus         = 34;
   optional NZoraPb.EFetchStatus      FetchStatus        = 38;
   optional uint64                    ResponseSize       = 40;
   optional string                    FirstBytesOfBody   = 50;
}

message TProcStatus {
   enum TStatus {
       OK       = 10;
       PROCFAIL = 20;
       TIMEOUT  = 30;
       SHUTDOWN = 40;
   };
};

message TDiagInfoOfReCalcPhase {
   optional NZUtilPb.TInstant             Start          = 10;
   optional NZUtilPb.TDuration            Duration       = 20;
   optional NZoraPb.TZoraRequest          ZoraRequest    = 31;
   optional string                        DebugLog       = 40;
   optional TProcStatus.TStatus           CalcProcStatus = 50;
}
message TDiagInfoOfPhase {
   oneof Phase {
      TDiagInfoOfReFetcherPhase ReFetcherPhase = 10;
      TDiagInfoOfReCalcPhase    ReCalcPhase    = 20;
   };
};
message TDiagInfo {
   repeated TDiagInfoOfPhase DiagInfoOfPhase = 10;
};

message TPDFetchResult {
    enum TStatus {
        // Unknown                          = 0;
        Ok                               = 10;
        Timeout                          = 20; // job failed to finish in given time
        TooManyResults                   = 30;
        NoResultsHasBeenReceivedFromCalc = 40;
        NoUdfOutAttrInXCalcObject        = 50;
        CanNotDeserializeUdfOutProto     = 60;
        ThereIsNeitherNextReqNorUserResp = 70;
        ShuttingDown                     = 80; // pdfetch was shut down while processing request
        FetcherQueueOverflow             = 90;
        CalcQueueOverflow                = 100;
        Error                            = 110; // see ErrStr
    };
    optional TStatus     Status          = 1 [default = Ok];
    optional string      ErrorStr        = 2; // more elaborative & human-readable explanation of the Status field above

    optional TDiagInfo   Diag            = 3;

    optional string      MonitoringTag   = 4; // what we give to Solomon to show

    optional bytes       Result          = 5;
    optional EDataFormat ResultFormat    = 6; // see comments in zora/zora/calc/calc.proto
    optional EJsonStringTransform JsonStringTransform = 7;

    // procedure may use custom extensions instead of (in addition to) Result
    extensions 1000 to 1999;

}

//////////////////////////////////
// TODO: move to video code
//////////////////////////////////

extend TPDFetchResult {
    optional TVideoParseResult   VideoParseResult   = 1001;
}


service TZoraService {
    rpc Fetch(TZoraRequest) returns (stream TZoraResponse) {}
}
