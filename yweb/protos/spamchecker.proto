//
// Protocols for Realtime SpamChecker comminication
//

package NRealTime;
option optimize_for = SPEED;

import "yweb/realtime/protos/option.proto";
import "yweb/protos/orange.proto";

// Factors calculated using antispam rules on SpamChecker. SpamChecker provides them
// to Orange and Orange passes data to Realtime Indexer for processing.
message TSpamFactors {
    optional double SpamWeight                      = 1;
    // NastyContent factor
    optional double PornoWeight                     = 2;
    optional bool   IsBlog                          = 3;
    optional bool   IsForum                         = 4;
    optional bool   IsLongTitle                     = 5;
    optional bool   IsProgLang                      = 6;
    optional bool   HasLiRuCNT                      = 7;
    optional bool   DownloadVideo                   = 8;
    optional bool   Wap                             = 9;
    optional bool   IsGoodPrgForum                  = 10;
    optional bool   HasUserReviewL                  = 11;
    optional bool   NoUserReview                    = 12;
    optional bool   HasDownloadLinkOnFile           = 13;
    optional bool   HasDownloadLinkOnFileHosting    = 14;
    optional bool   HasHtml5VideoPlayer             = 15;
    optional bool   IsReferat                       = 16;
    optional bool   HasVacancy                      = 17;
    optional bool   EmptyVacancy                    = 18;
    optional bool   IsChildish                      = 19;
    optional bool   IsNarco                         = 20;
    optional bool   IsSuicide                       = 21;
    optional bool   IsRepost                        = 22;
    // optional bool   IsChildPorn                  = 23;	OBSOLETE, DO NOT USE THIS FIELD ID
    optional uint32 AntispamFlags                   = 24;
    optional bool   IsPopunder                      = 25;
    optional bool   IsClickunder                    = 26;
    optional bool   YellowAdv                       = 27;
    optional uint32 TrashAdv                        = 28;
}

// %% {{a name="TUrlCheckRequest"}} **~UrlCheckRequest request** %%
message TUrlCheckRequest {
        required string Url     = 1;
        optional bool   CheckRobotsTxt = 2;
}

// %% {{a name="TUrlCheckResponse"}} **~Response to UrlCheckRequest** %%
message TUrlCheckResponse {
        enum UrlCheckStatus {
            OK                  = 0;
            URL_CHECK_FAIL      = 1;
            SPAM_CHECK_FAIL     = 2;
            URL_CHECK_DISABLED  = 3;
        }

        optional string UrlId                   = 1;    // UrlId (includes mirrors normalization)
        optional string UrlNormalized           = 2;    // Mirror Normalization for URL 
        optional bool Banned                    = 3;    // banned as spam
        optional string Reason                  = 4;    // Reason for failure
        optional float LinkUsefulness           = 5;    // link usefulnes from discovery point of view
        optional float SegmentRate              = 6;    // rate of segment of the url
        optional UrlCheckStatus Status          = 7;    // Status of url check
}

// %% {{a name="TUrlCheckBulkRequest"}} **~UrlCheckBulkRequest request** %%
message TUrlCheckBulkRequest {
        repeated TUrlCheckRequest UrlList       = 1;
        repeated TOption ProcessOptions         = 2;    // options: CalculateStoneFeatures (set SegmentRate and LinkUsefulness in TUrlCheckResponse)
}

// %% {{a name="TUrlCheckBulkResponse"}} **~Response to UrlCheckBulkRequest** %%
message TUrlCheckBulkResponse {
    repeated TUrlCheckResponse ResponseList     = 1;
    optional bool Success                       = 2;
    optional string ErrorMessage                = 3;
}

// %% {{a name="TSpamCheckerRequest"}} **~Request for spam server** %%
message TSpamCheckerRequest {
    optional string Url                         = 1;    // Url to check
    optional bytes Logel                        = 2;    // page returned by spider
    optional bytes Archive                      = 3;    // text archieve generated by parser
    // optional bool NeedHostFactors            = 4;    OBSOLETE, DO NOT USE THIS FIELD ID
    // optional TAnchorText AnchorText          = 5;    OBSOLETE, DO NOT USE THIS FIELD ID
    optional NOrangeData.TOwnerData OwnerData   = 6;
    optional bool OnlyDocFactors                = 7;    // to get only spam factors
}

// %% {{a name="TSpamCheckerResponse"}} **~Response from the spam server** %%
message TSpamCheckerResponse {
    enum EResult {
        Ok      = 1;    // spam weight calculated successfully
        Fail    = 2;    // documents contains error
    }

    required EResult SpamResult                 = 1;    // whether spam weight calculation was successful or not
    optional double SpamWeight                  = 2;    // Deprecated: spam weight
    optional string Error                       = 3;    // error response
    // optional THostFactors HostFactors        = 4;    OBSOLETE, DO NOT USE THIS FIELD ID
    // optional TDocFactors DocFactors          = 5;    OBSOLETE, DO NOT USE THIS FIELD ID
    // optional TAnchorText AnchorText          = 6;    OBSOLETE, DO NOT USE THIS FIELD ID
    optional string BanReason                   = 7;
    optional double PornoWeight                 = 8;    // Deprecated
    optional bool AllowExport                   = 9;
    optional TSpamFactors SpamFactors           = 10;
}

// %% {{a name="THostSegmentsRequest"}} **~HostSegmentsRequest request** %%
message THostSegmentsRequest {
        optional string Host = 1;
}

// %% {{a name="THostSegment"}} **~HostSegment** %%
message THostSegment {
        optional uint32 PartId                  = 1;    // part id
        optional uint32 SegmentId               = 2;    // segment id
        optional string Pattern                 = 3;    // regular expression that determines this segment
        optional float LinkUsefulness           = 4;    // usefulness for incoming links
        optional float SegmentRate              = 5;    // segment rate for url belonging to this segment
}

// %% {{a name="THostSegmentsResponse"}} **~Response to HostSegmentsRequest** %%
message THostSegmentsResponse {
        optional string NormalizedHost          = 1;
        optional uint32 SegmentsDictionaryAge   = 2;
        repeated THostSegment Segments          = 3;
}

// %% {{a name="TNormalizationRequest"}} **~Owner request** %%
message TNormalizationRequest {
        required string Url = 1;
}

// %% {{a name="TNormalizationResponse"}} **~Reponse to a TNormalizationRequest** %%
message TNormalizationResponse {
        required bool Success         = 1;
        optional string Owner         = 2;
        optional string UrlNormalized = 3;
        optional string Reason        = 4; // Reason of failure if Success == False
}

// %% {{a name="TNormalizationBulkRequest"}} **~NormalizationBulkRequest request** %%
message TNormalizationBulkRequest {
        repeated TNormalizationRequest UrlList = 1;
}

// %% {{a name="TNormalizationBulkResponse"}} **~Response to TNormalizationBulkRequest** %%
message TNormalizationBulkResponse {
    repeated TNormalizationResponse ResponseList   = 1;
    optional bool Success                          = 2;
}

// %% {{a name="TUpdateRobotsTxtRequest"}} **~Update `robots.txt' data in SpamHostInfo table** %%
message TUpdateRobotsTxtRequest {
        required string Url = 1;
}

// %% {{a name="TUpdateRobotsTxtResponse"}} **~Response to a TUpdateRobotsTxtRequest** %%
message TUpdateRobotsTxtResponse {
        required bool Success  = 1;
        optional string Reason = 2;
}
