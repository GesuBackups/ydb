package NMRAgent;

message TMapReduceRecord {
    required string Key = 1;
    optional string SubKey = 2;
    optional string Value = 3;
}

message TWriteRequest {
    enum EUpdateMode {
        UM_REPLACE = 0x0001;
        UM_APPEND = 0x0002;
    }
    optional string Server = 1;             // MR server
    optional string User = 2;               // MR user
    optional string Table = 3;              // name of MR table to write
    optional EUpdateMode UpdateMode = 4;    // as in quality/mapreducelib/update.h
    repeated TMapReduceRecord Records = 5;  // list of (key, subkey, value) records
    optional string TransactionId = 6;      // transaction id; if this field is not set, transaction will be started and finished automatically
    optional string NetTable = 7;
}

message TSortRequest {
    optional string Server = 1;             // MR server
    optional string User = 2;               // MR user
    repeated string InputTables = 3;        // list of tables to sort into output table
    optional string OutputTable = 4;        // name of output MR table
    optional string TransactionId = 5;      // transaction id; if this field is not set, transaction will be started and finished automatically
    optional string NetTable = 6;
}

message TCopyRequest {
    optional string Server = 1;             // MR server
    optional string User = 2;               // MR user
    repeated string InputTables = 3;        // list of tables to aggregate into output table
    optional string OutputTable = 4;        // name of output MR table
    optional bool DropInputTables = 5;      // if is true, copy request works as move request
    optional string TransactionId = 6;      // transaction id; if this field is not set, transaction will be started and finished automatically
    optional string NetTable = 7;
}

message TDropRequest {
    optional string Server = 1;             // MR server
    optional string User = 2;               // MR user
    repeated string Tables = 3;             // list of tables to drop
    optional string TransactionId = 4;      // transaction id; if this field is not set, transaction will be started and finished automatically
    optional string NetTable = 5;
}

message TResponse {
    required bool Success = 1;
    optional string Reason = 2;             // in case of Error
}

message TTableListRequest {
    enum EGetTablesType {
        GT_ALL_MATCH = 0x0001;       // return all tables
        GT_EXACT_MATCH = 0x0002;     // return only one table if it exists on server
        GT_PREFIX_MATCH = 0x0003;
        GT_POSTFIX_MATCH = 0x0004;
    }
    required string Server = 1;                 // MR server
    optional EGetTablesType GetTablesType = 2;  // as in quality/mapreducelib/rec_types.h
    optional string Pattern = 3;                // pattern in accordance with GetTablesType
    optional string NetTable = 4;
}

message TTableListResponse {
    required bool Success = 1;
    optional string Reason = 2;             // in case of Error
    repeated string TableNames = 3;         // list of tables
}

message TStartTransactionRequest {
    required string Server = 1;             // MR server
    optional string User = 2;               // MR user
    optional string NetTable = 3;
    optional string SharedTransactionId = 4;            // If this field is set, a client of shared transaction will be started, not
                                                        // a real transaction. Such transaction can be used only for TWriteRequest-s
                                                        // in UM_APPEND update mode.
    optional uint32 SharedTransactionFinishTimeout = 5; // Finish timeout of shared transaction in milliseconds. 0 by default
}

message TStartTransactionResponse {
    required bool Success = 1;
    optional string Reason = 2;             // in case of Error
    optional string TransactionId = 3;      // transaction id
}

message TFinishTransactionRequest{
    required string TransactionId = 1;      // transaction id
    optional bool Commit = 2;               // true if transaction should be commited
}
